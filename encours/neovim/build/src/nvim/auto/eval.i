# 1 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
# 1 "/home/toto/.env/encours/neovim/build/src/nvim//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/eval.c"







# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/math.h" 2 3 4









# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4



# 30 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 44 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignaling (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincos (double __x, double *__sinx, double *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincos (double __x, double *__sinx, double *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp10 (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));





extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));




extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));







extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern double nextdown (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextdown (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double nextup (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextup (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));




extern double roundeven (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __roundeven (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern double fmaxmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern double getpayload (const double *__x) __attribute__ ((__nothrow__ , __leaf__)); extern double __getpayload (const double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayload (double *__x, double __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsig (double *__x, double __payload) __attribute__ ((__nothrow__ , __leaf__));







extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf (float __x, float *__sinx, float *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf (float __x, float *__sinx, float *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));





 extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp10f (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));






 extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));





extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));




extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));







extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern float nextdownf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextdownf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float nextupf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextupf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));




extern float roundevenf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundevenf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern float fmaxmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) __attribute__ ((__nothrow__ , __leaf__));


extern float getpayloadf (const float *__x) __attribute__ ((__nothrow__ , __leaf__)); extern float __getpayloadf (const float *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf (float *__x, float __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf (float *__x, float __payload) __attribute__ ((__nothrow__ , __leaf__));







extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));




extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));







extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern long double nextdownl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextdownl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double nextupl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextupl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));




extern long double roundevenl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundevenl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern long double fmaxmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern long double getpayloadl (const long double *__x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __getpayloadl (const long double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadl (long double *__x, long double __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigl (long double *__x, long double __payload) __attribute__ ((__nothrow__ , __leaf__));







extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __acosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 asinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __asinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 atanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 cosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 sinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 tanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 coshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __coshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 sinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 tanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float32 acoshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __acoshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 asinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __asinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 atanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float32 expf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __expf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 logf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __logf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 log10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __exp10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 expm1f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __expm1f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 log1pf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log1pf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 logbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __logbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 exp2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __exp2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 log2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 sqrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sqrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 cbrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cbrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 ceilf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __nanf32 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __j0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 j1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __j1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 jnf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __jnf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 y0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __y0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 y1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __y1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 ynf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __ynf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__));





extern _Float32 erff32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __erff32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 erfcf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __erfcf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 lgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __lgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 tgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 rintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __rintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 nextdownf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextdownf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 nextupf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextupf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 scalbnf32 (_Float32 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __scalbnf32 (_Float32 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 scalblnf32 (_Float32 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 nearbyintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nearbyintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 roundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 roundevenf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 getpayloadf32 (const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __getpayloadf32 (const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __acosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 asinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __asinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 atanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 cosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 sinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 tanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 coshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __coshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 sinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 tanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float64 acoshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __acoshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 asinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __asinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 atanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float64 expf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __expf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 logf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __logf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 log10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __exp10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 expm1f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __expm1f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 log1pf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log1pf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 logbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __logbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 exp2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __exp2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 log2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 sqrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sqrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 cbrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cbrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 ceilf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __nanf64 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __j0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 j1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __j1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 jnf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __jnf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 y0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __y0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 y1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __y1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 ynf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __ynf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__));





extern _Float64 erff64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __erff64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 erfcf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __erfcf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 lgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __lgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 tgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 rintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __rintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 nextdownf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextdownf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 nextupf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextupf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 scalbnf64 (_Float64 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __scalbnf64 (_Float64 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 scalblnf64 (_Float64 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 nearbyintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nearbyintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 roundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 roundevenf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 getpayloadf64 (const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __getpayloadf64 (const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 407 "/usr/include/math.h" 2 3 4
# 420 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 421 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 acosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __acosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 asinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __asinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 atanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 atan2f128 (_Float128 __y, _Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atan2f128 (_Float128 __y, _Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 cosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 sinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 tanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 coshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __coshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 sinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 tanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float128 acoshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __acoshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 asinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __asinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 atanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float128 expf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __expf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 frexpf128 (_Float128 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __frexpf128 (_Float128 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 ldexpf128 (_Float128 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __ldexpf128 (_Float128 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 logf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __logf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 log10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 modff128 (_Float128 __x, _Float128 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __modff128 (_Float128 __x, _Float128 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float128 exp10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __exp10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 expm1f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __expm1f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 log1pf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log1pf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 logbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __logbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 exp2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __exp2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 log2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float128 powf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __powf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 sqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 hypotf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __hypotf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 cbrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cbrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 ceilf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __ceilf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fabsf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fabsf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 floorf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __floorf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fmodf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fmodf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 copysignf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __copysignf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float128 nanf128 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __nanf128 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 j0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __j0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 j1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __j1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 jnf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __jnf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 y0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __y0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 y1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __y1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 ynf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __ynf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__));





extern _Float128 erff128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __erff128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 erfcf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __erfcf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 lgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __lgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 tgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 lgammaf128_r (_Float128, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __lgammaf128_r (_Float128, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 rintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __rintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 nextafterf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextafterf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 nextdownf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextdownf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 nextupf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextupf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 remainderf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __remainderf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 scalbnf128 (_Float128 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __scalbnf128 (_Float128 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 scalblnf128 (_Float128 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __scalblnf128 (_Float128 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 nearbyintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nearbyintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 roundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __roundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float128 truncf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __truncf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float128 remquof128 (_Float128 __x, _Float128 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __remquof128 (_Float128 __x, _Float128 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 fdimf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fdimf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 fmaxf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaxf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 roundevenf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __roundevenf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float128 fmaxmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaxmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef128 (_Float128 *__cx, const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 getpayloadf128 (const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __getpayloadf128 (const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf128 (_Float128 *__x, _Float128 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf128 (_Float128 *__x, _Float128 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 424 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __acosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x asinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __asinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x atanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x cosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x sinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x tanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x coshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __coshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x sinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x tanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float32x acoshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __acoshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x asinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __asinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x atanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float32x expf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __expf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x logf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __logf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x log10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __exp10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x expm1f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __expm1f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x log1pf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log1pf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x logbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __logbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x exp2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __exp2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x log2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x sqrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sqrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x cbrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cbrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x ceilf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __nanf32x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __j0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x j1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __j1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x jnf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __jnf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x y0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __y0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x y1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __y1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x ynf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __ynf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__));





extern _Float32x erff32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __erff32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x erfcf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __erfcf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x lgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __lgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x tgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x rintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __rintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x nextdownf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextdownf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x nextupf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextupf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x scalbnf32x (_Float32x __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __scalbnf32x (_Float32x __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x scalblnf32x (_Float32x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x nearbyintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nearbyintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x roundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x roundevenf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x getpayloadf32x (const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __getpayloadf32x (const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) __attribute__ ((__nothrow__ , __leaf__));
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __acosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x asinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __asinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x atanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x cosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x sinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x tanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x coshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __coshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x sinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x tanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float64x acoshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __acoshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x asinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __asinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x atanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float64x expf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __expf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x logf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __logf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x log10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __exp10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x expm1f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __expm1f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x log1pf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log1pf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x logbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __logbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x exp2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __exp2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x log2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x sqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x cbrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cbrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x ceilf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __nanf64x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __j0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x j1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __j1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x jnf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __jnf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x y0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __y0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x y1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __y1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x ynf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __ynf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__));





extern _Float64x erff64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __erff64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x erfcf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __erfcf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x lgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __lgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x tgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x rintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __rintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x nextdownf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextdownf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x nextupf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextupf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x scalbnf64x (_Float64x __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __scalbnf64x (_Float64x __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x scalblnf64x (_Float64x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x nearbyintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nearbyintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x roundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x roundevenf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x getpayloadf64x (const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __getpayloadf64x (const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) __attribute__ ((__nothrow__ , __leaf__));
# 458 "/usr/include/math.h" 2 3 4
# 489 "/usr/include/math.h" 3 4
extern int signgam;
# 569 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 684 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 685 "/usr/include/math.h" 2 3 4
# 1263 "/usr/include/math.h" 3 4

# 9 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2





# 1 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdbool.h" 1 3 4
# 5 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/macros.h" 1
# 7 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 8 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/os/os_defs.h" 1



# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));




extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));




extern int isctype (int __c, int __mask) __attribute__ ((__nothrow__ , __leaf__));






extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 327 "/usr/include/ctype.h" 3 4

# 5 "/home/toto/.env/encours/neovim/src/nvim/os/os_defs.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 37 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 38 "/usr/include/stdio.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/libio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 22 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4




typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 42 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 57 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));







extern FILE *tmpfile (void) ;
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 868 "/usr/include/stdio.h" 3 4

# 6 "/home/toto/.env/encours/neovim/src/nvim/os/os_defs.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef int wchar_t;
# 32 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 128 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 157 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 197 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4







struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 198 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


extern unsigned int gnu_dev_major (__dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 85 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 206 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 145 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 255 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));







extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1017 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4

# 7 "/home/toto/.env/encours/neovim/src/nvim/os/os_defs.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));




extern __mode_t getumask (void) __attribute__ ((__nothrow__ , __leaf__));



extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));
# 530 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 8 "/home/toto/.env/encours/neovim/src/nvim/os/os_defs.h" 2





# 1 "/home/toto/.env/encours/neovim/src/nvim/os/unix_defs.h" 1



# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));







extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));




extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;



extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) ;






extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4

# 873 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 994 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1006 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1027 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1038 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1059 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1082 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1092 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1110 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1167 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;








# 5 "/home/toto/.env/encours/neovim/src/nvim/os/unix_defs.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_TKILL = -6,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 63 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 189 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));






extern int sighold (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern int sigrelse (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern int sigignore (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) __attribute__ ((__nothrow__ , __leaf__));
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));





# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 6 "/home/toto/.env/encours/neovim/src/nvim/os/unix_defs.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 9 "/home/toto/.env/encours/neovim/src/nvim/os/unix_defs.h" 2
# 14 "/home/toto/.env/encours/neovim/src/nvim/os/os_defs.h" 2
# 30 "/home/toto/.env/encours/neovim/src/nvim/os/os_defs.h"
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 90 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 103 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 114 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 225 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 252 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 265 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 302 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 329 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 359 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 420 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 486 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 498 "/usr/include/string.h" 3 4

# 31 "/home/toto/.env/encours/neovim/src/nvim/os/os_defs.h" 2
# 9 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 2
# 90 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"

# 90 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
static inline 
# 90 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 90 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_iswhite(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline 
# 94 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 94 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isdigit(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline 
# 98 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 98 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isxdigit(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline 
# 102 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 102 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isident(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline 
# 106 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 106 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isbdigit(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline 
# 110 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 110 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isspace(int)
  __attribute__((const))
  __attribute__((always_inline));




static inline 
# 117 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 117 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_iswhite(int c)
{
  return c == ' ' || c == '\t';
}
# 131 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
static inline 
# 131 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 131 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isdigit(int c)
{
  return c >= '0' && c <= '9';
}




static inline 
# 139 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 139 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isxdigit(int c)
{
  return (c >= '0' && c <= '9')
         || (c >= 'a' && c <= 'f')
         || (c >= 'A' && c <= 'F');
}




static inline 
# 149 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 149 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isident(int c)
{
  return ((((unsigned)(c) >= 'A' && (unsigned)(c) <= 'Z') || ((unsigned)(c) >= 'a' && (unsigned)(c) <= 'z')) || ascii_isdigit(c)) || c == '_';
}




static inline 
# 157 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 157 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isbdigit(int c)
{
  return (c == '0' || c == '1');
}





static inline 
# 166 "/home/toto/.env/encours/neovim/src/nvim/ascii.h" 3 4
             _Bool 
# 166 "/home/toto/.env/encours/neovim/src/nvim/ascii.h"
                  ascii_isspace(int c)
{
  return (c >= 9 && c <= 13) || c == ' ';
}
# 15 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 1



# 1 "/home/toto/.env/encours/neovim/src/nvim/vim.h" 1



# 1 "/home/toto/.env/encours/neovim/src/nvim/types.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4

# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 100 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 2 3 4
# 5 "/home/toto/.env/encours/neovim/src/nvim/types.h" 2



# 7 "/home/toto/.env/encours/neovim/src/nvim/types.h"
typedef void *vim_acl_T;



typedef unsigned char char_u;


typedef uint32_t u8char_T;


typedef int handle_T;




typedef int LuaRef;

typedef struct expand expand_T;

typedef enum {
  kNone = -1,
  kFalse = 0,
  kTrue = 1,
} TriState;
# 5 "/home/toto/.env/encours/neovim/src/nvim/vim.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/pos.h" 1



typedef long linenr_T;




typedef int colnr_T;




enum { MAXLNUM = 0x7fffffff };

enum { MAXCOL = 0x7fffffff };

enum { MINLNUM = 1 };

enum { MINCOL = 1 };




typedef struct {
  linenr_T lnum;
  colnr_T col;
  colnr_T coladd;
} pos_T;





typedef struct {
  linenr_T lnum;
  colnr_T col;
} lpos_T;
# 6 "/home/toto/.env/encours/neovim/src/nvim/vim.h" 2
# 14 "/home/toto/.env/encours/neovim/src/nvim/vim.h"
# 1 "/home/toto/.env/encours/neovim/build/config/auto/config.h" 1
# 15 "/home/toto/.env/encours/neovim/src/nvim/vim.h" 2
# 27 "/home/toto/.env/encours/neovim/src/nvim/vim.h"
enum { NUMBUFLEN = 65 };





# 1 "/home/toto/.env/encours/neovim/src/nvim/keymap.h" 1



# 1 "/home/toto/.env/encours/neovim/src/nvim/strings.h" 1




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 6 "/home/toto/.env/encours/neovim/src/nvim/strings.h" 2



# 1 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 1



# 1 "/usr/include/inttypes.h" 1 3 4
# 34 "/usr/include/inttypes.h" 3 4

# 34 "/usr/include/inttypes.h" 3 4
typedef int __gwchar_t;
# 266 "/usr/include/inttypes.h" 3 4





typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/inttypes.h" 3 4

# 5 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 426 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
} max_align_t;
# 6 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2


# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4



extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



# 9 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2


# 1 "/home/toto/.env/encours/neovim/src/nvim/hashtab.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 5 "/home/toto/.env/encours/neovim/src/nvim/hashtab.h" 2







# 11 "/home/toto/.env/encours/neovim/src/nvim/hashtab.h"
extern char hash_removed;


typedef size_t hash_T;
# 38 "/home/toto/.env/encours/neovim/src/nvim/hashtab.h"
typedef struct hashitem_S {

  hash_T hi_hash;







  char_u *hi_key;
} hashitem_T;
# 62 "/home/toto/.env/encours/neovim/src/nvim/hashtab.h"
typedef struct hashtable_S {
  hash_T ht_mask;

  size_t ht_used;
  size_t ht_filled;
  int ht_locked;
  hashitem_T *ht_array;

  hashitem_T ht_smallarray[16];
} hashtab_T;
# 12 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/garray.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 5 "/home/toto/.env/encours/neovim/src/nvim/garray.h" 2


# 1 "/home/toto/.env/encours/neovim/src/nvim/log.h" 1
# 8 "/home/toto/.env/encours/neovim/src/nvim/garray.h" 2




typedef struct growarray {
  int ga_len;
  int ga_maxlen;
  int ga_itemsize;
  int ga_growsize;
  void *ga_data;
} garray_T;
# 38 "/home/toto/.env/encours/neovim/src/nvim/garray.h"
static inline void *ga_append_via_ptr(garray_T *gap, size_t item_size)
{
  if ((int)item_size != gap->ga_itemsize) {
    logmsg(2, 
# 41 "/home/toto/.env/encours/neovim/src/nvim/garray.h" 3 4
   ((void *)0)
# 41 "/home/toto/.env/encours/neovim/src/nvim/garray.h"
   , __func__, 41, 
# 41 "/home/toto/.env/encours/neovim/src/nvim/garray.h" 3 4
   1
# 41 "/home/toto/.env/encours/neovim/src/nvim/garray.h"
   , "wrong item size (%zu), should be %d", item_size, gap->ga_itemsize);
  }
  ga_grow(gap, 1);
  return ((char *)gap->ga_data) + (item_size * (size_t)gap->ga_len++);
}
# 13 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h" 1







# 1 "/home/toto/.env/encours/neovim/src/nvim/iconv.h" 1






# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4









# 37 "/usr/include/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;





typedef int error_t;





# 8 "/home/toto/.env/encours/neovim/src/nvim/iconv.h" 2
# 1 "/usr/include/iconv.h" 1 3 4
# 23 "/usr/include/iconv.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/iconv.h" 2 3 4





typedef void *iconv_t;







extern iconv_t iconv_open (const char *__tocode, const char *__fromcode);




extern size_t iconv (iconv_t __cd, char **__restrict __inbuf,
       size_t *__restrict __inbytesleft,
       char **__restrict __outbuf,
       size_t *__restrict __outbytesleft);





extern int iconv_close (iconv_t __cd);


# 9 "/home/toto/.env/encours/neovim/src/nvim/iconv.h" 2
# 9 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 10 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h" 2
# 47 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h"

# 47 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h"
typedef enum {
  CONV_NONE = 0,
  CONV_TO_UTF8 = 1,
  CONV_9_TO_UTF8 = 2,
  CONV_TO_LATIN1 = 3,
  CONV_TO_LATIN9 = 4,
  CONV_ICONV = 5,
} ConvFlags;
# 63 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h"
typedef struct {
  int vc_type;
  int vc_factor;

  iconv_t vc_fd;

  
# 69 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h" 3 4
 _Bool 
# 69 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h"
      vc_fail;

} vimconv_T;

extern const uint8_t utf8len_tab_zero[256];

extern const uint8_t utf8len_tab[256];





static inline int mb_strcmp_ic(
# 81 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h" 3 4
                              _Bool 
# 81 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h"
                                   ic, const char *s1, const char *s2)
  __attribute__((nonnull)) __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline int mb_strcmp_ic(
# 89 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h" 3 4
                              _Bool 
# 89 "/home/toto/.env/encours/neovim/src/nvim/mbyte.h"
                                   ic, const char *s1, const char *s2)
{
  return (ic ? mb_stricmp(s1, s2) : strcmp(s1, s2));
}
# 14 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 15 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/lib/queue.h" 1
# 23 "/home/toto/.env/encours/neovim/src/nvim/lib/queue.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/home/toto/.env/encours/neovim/src/nvim/lib/queue.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 26 "/home/toto/.env/encours/neovim/src/nvim/lib/queue.h" 2

typedef struct _queue {
  struct _queue *next;
  struct _queue *prev;
} QUEUE;
# 43 "/home/toto/.env/encours/neovim/src/nvim/lib/queue.h"
static inline int QUEUE_EMPTY(const QUEUE *const q)
  FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
{
  return q == q->next;
}



static inline void QUEUE_INIT(QUEUE *const q) FUNC_ATTR_ALWAYS_INLINE
{
  q->next = q;
  q->prev = q;
}

static inline void QUEUE_ADD(QUEUE *const h, QUEUE *const n)
  FUNC_ATTR_ALWAYS_INLINE
{
  h->prev->next = n->next;
  n->next->prev = h->prev;
  h->prev = n->prev;
  h->prev->next = h;
}

static inline void QUEUE_INSERT_HEAD(QUEUE *const h, QUEUE *const q)
  FUNC_ATTR_ALWAYS_INLINE
{
  q->next = h->next;
  q->prev = h;
  q->next->prev = q;
  h->next = q;
}

static inline void QUEUE_INSERT_TAIL(QUEUE *const h, QUEUE *const q)
  FUNC_ATTR_ALWAYS_INLINE
{
  q->next = h;
  q->prev = h->prev;
  q->prev->next = q;
  h->prev = q;
}

static inline void QUEUE_REMOVE(QUEUE *const q) FUNC_ATTR_ALWAYS_INLINE
{
  q->prev->next = q->next;
  q->next->prev = q->prev;
}
# 16 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/profile.h" 1




# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4

# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));


# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 6 "/home/toto/.env/encours/neovim/src/nvim/profile.h" 2


# 7 "/home/toto/.env/encours/neovim/src/nvim/profile.h"
typedef uint64_t proftime_T;
# 17 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/gettext.h" 1




# 1 "/usr/include/libintl.h" 1 3 4
# 34 "/usr/include/libintl.h" 3 4






# 39 "/usr/include/libintl.h" 3 4
extern char *gettext (const char *__msgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) __attribute__ ((__nothrow__ , __leaf__));



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) __attribute__ ((__nothrow__ , __leaf__));



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) __attribute__ ((__nothrow__ , __leaf__));
# 121 "/usr/include/libintl.h" 3 4

# 6 "/home/toto/.env/encours/neovim/src/nvim/gettext.h" 2
# 19 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/message.h" 1





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 7 "/home/toto/.env/encours/neovim/src/nvim/message.h" 2



# 1 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h" 1




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 6 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h" 2








# 13 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h"
typedef char_u schar_T[(6 +1) * 4 + 1];
typedef int16_t sattr_T;
# 38 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h"
typedef struct {
  handle_T handle;

  schar_T *chars;
  sattr_T *attrs;
  unsigned *line_offset;
  char_u *line_wraps;



  int *dirty_col;


  int Rows;
  int Columns;


  
# 55 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h" 3 4
 _Bool 
# 55 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h"
      valid;



  
# 59 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h" 3 4
 _Bool 
# 59 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h"
      throttled;



  int row_offset;
  int col_offset;


  
# 67 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h" 3 4
 _Bool 
# 67 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h"
      blending;


  
# 70 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h" 3 4
 _Bool 
# 70 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h"
      focusable;





  int comp_row;
  int comp_col;



  size_t comp_index;



  
# 85 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h" 3 4
 _Bool 
# 85 "/home/toto/.env/encours/neovim/src/nvim/grid_defs.h"
      comp_disabled;
} ScreenGrid;
# 11 "/home/toto/.env/encours/neovim/src/nvim/message.h" 2
# 79 "/home/toto/.env/encours/neovim/src/nvim/message.h"
typedef struct msg_hist {
  struct msg_hist *next;
  char_u *msg;
  const char *kind;
  int attr;
  
# 84 "/home/toto/.env/encours/neovim/src/nvim/message.h" 3 4
 _Bool 
# 84 "/home/toto/.env/encours/neovim/src/nvim/message.h"
      multiline;
} MessageHistoryEntry;


extern MessageHistoryEntry *first_msg_hist;

extern MessageHistoryEntry *last_msg_hist;

extern 
# 92 "/home/toto/.env/encours/neovim/src/nvim/message.h" 3 4
      _Bool 
# 92 "/home/toto/.env/encours/neovim/src/nvim/message.h"
           msg_ext_need_clear ;



extern ScreenGrid msg_grid ;
extern int msg_grid_pos ;







extern ScreenGrid msg_grid_adj ;


extern int msg_scrolled_at_flush ;
# 20 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 2






typedef int64_t varnumber_T;
typedef uint64_t uvarnumber_T;


typedef double float_T;


enum { DO_NOT_FREE_CNT = (0x7fffffff / 2) };


enum ListLenSpecials {




  kListLenUnknown = -1,





  kListLenShouldKnow = -2,



  kListLenMayKnow = -3,
};
# 64 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
typedef struct listvar_S list_T;
typedef struct dictvar_S dict_T;
typedef struct partial_S partial_T;

typedef struct ufunc ufunc_T;

typedef enum {
  kCallbackNone = 0,
  kCallbackFuncref,
  kCallbackPartial,
} CallbackType;

typedef struct {
  union {
    char_u *funcref;
    partial_T *partial;
  } data;
  CallbackType type;
} Callback;



typedef struct dict_watcher {
  Callback callback;
  char *key_pattern;
  size_t key_pattern_len;
  QUEUE node;
  
# 91 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
 _Bool 
# 91 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
      busy;
} DictWatcher;


typedef enum {
  kSpecialVarFalse,
  kSpecialVarTrue,
  kSpecialVarNull,
} SpecialVarValue;


typedef enum {
  VAR_UNLOCKED = 0,
  VAR_LOCKED = 1,
  VAR_FIXED = 2,
} VarLockStatus;


typedef enum {
  VAR_UNKNOWN = 0,
  VAR_NUMBER,
  VAR_STRING,
  VAR_FUNC,
  VAR_LIST,
  VAR_DICT,
  VAR_FLOAT,
  VAR_SPECIAL,

  VAR_PARTIAL,
} VarType;


typedef struct {
  VarType v_type;
  VarLockStatus v_lock;
  union typval_vval_union {
    varnumber_T v_number;
    SpecialVarValue v_special;
    float_T v_float;
    char_u *v_string;
    list_T *v_list;
    dict_T *v_dict;
    partial_T *v_partial;
  } vval;
} typval_T;


typedef enum {
  VAR_NO_SCOPE = 0,
  VAR_SCOPE = 1,
  VAR_DEF_SCOPE = 2,

} ScopeType;


typedef struct listitem_S listitem_T;

struct listitem_S {
  listitem_T *li_next;
  listitem_T *li_prev;
  typval_T li_tv;
};


typedef struct listwatch_S listwatch_T;

struct listwatch_S {
  listitem_T *lw_item;
  listwatch_T *lw_next;
};



struct listvar_S {
  listitem_T *lv_first;
  listitem_T *lv_last;
  listwatch_T *lv_watch;
  listitem_T *lv_idx_item;
  list_T *lv_copylist;
  list_T *lv_used_next;
  list_T *lv_used_prev;
  int lv_refcount;
  int lv_len;
  int lv_idx;
  int lv_copyID;
  VarLockStatus lv_lock;
};


typedef struct {
  list_T sl_list;
  listitem_T sl_items[10];
} staticList10_T;
# 212 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
typedef struct { typval_T di_tv; uint8_t di_flags; char_u di_key[1]; } ScopeDictDictItem;






typedef struct { typval_T di_tv; uint8_t di_flags; char_u di_key[]; } dictitem_T;


typedef enum {
  DI_FLAGS_RO = 1,
  DI_FLAGS_RO_SBX = 2,
  DI_FLAGS_FIX = 4,
  DI_FLAGS_LOCK = 8,
  DI_FLAGS_ALLOC = 16,
} DictItemFlags;


struct dictvar_S {
  VarLockStatus dv_lock;
  ScopeType dv_scope;

  int dv_refcount;
  int dv_copyID;
  hashtab_T dv_hashtab;
  dict_T *dv_copydict;
  dict_T *dv_used_next;
  dict_T *dv_used_prev;
  QUEUE watchers;
};


typedef int scid_T;
# 255 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
typedef struct {
  scid_T sc_sid;
  int sc_seq;
  linenr_T sc_lnum;
} sctx_T;
# 269 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
typedef struct funccall_S funccall_T;

struct funccall_S {
  ufunc_T *func;
  int linenr;
  int returned;

  struct { typval_T di_tv; uint8_t di_flags; char_u di_key[20 + 1]; } fixvar[12];
  dict_T l_vars;
  ScopeDictDictItem l_vars_var;
  dict_T l_avars;
  ScopeDictDictItem l_avars_var;
  list_T l_varlist;
  listitem_T l_listitems[20];
  typval_T *rettv;
  linenr_T breakpoint;
  int dbg_tick;
  int level;
  proftime_T prof_child;
  funccall_T *caller;
  int fc_refcount;
  int fc_copyID;
  garray_T fc_funcs;
};


struct ufunc {
  int uf_varargs;
  int uf_flags;
  int uf_calls;
  
# 299 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
 _Bool 
# 299 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              uf_cleared;
  garray_T uf_args;
  garray_T uf_lines;
  int uf_profiling;
  int uf_prof_initialized;

  int uf_tm_count;
  proftime_T uf_tm_total;
  proftime_T uf_tm_self;
  proftime_T uf_tm_children;

  int *uf_tml_count;
  proftime_T *uf_tml_total;
  proftime_T *uf_tml_self;
  proftime_T uf_tml_start;
  proftime_T uf_tml_children;
  proftime_T uf_tml_wait;
  int uf_tml_idx;
  int uf_tml_execed;
  sctx_T uf_script_ctx;

  int uf_refcount;
  funccall_T *uf_scoped;
  char_u uf_name[];

};

struct partial_S {
  int pt_refcount;
  char_u *pt_name;
  ufunc_T *pt_func;

  
# 331 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
 _Bool 
# 331 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
      pt_auto;

  int pt_argc;
  typval_T *pt_argv;
  dict_T *pt_dict;
};


typedef struct ht_stack_S {
  hashtab_T *ht;
  struct ht_stack_S *prev;
} ht_stack_T;


typedef struct list_stack_S {
  list_T *list;
  struct list_stack_S *prev;
} list_stack_T;


typedef struct {
  listitem_T *item;
  int idx;
} ListSortItem;

typedef int (*ListSorter)(const void *, const void *);
# 455 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
static inline void tv_list_ref(list_T *const l)
  __attribute__((always_inline));






static inline void tv_list_ref(list_T *const l)
{
  if (l == 
# 465 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 465 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ) {
    return;
  }
  l->lv_refcount++;
}

static inline void tv_list_set_ret(typval_T *const tv, list_T *const l)
  __attribute__((always_inline)) __attribute__((nonnull(1)));





static inline void tv_list_set_ret(typval_T *const tv, list_T *const l)
{
  tv->v_type = VAR_LIST;
  tv->vval.v_list = l;
  tv_list_ref(l);
}

static inline VarLockStatus tv_list_locked(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline VarLockStatus tv_list_locked(const list_T *const l)
{
  if (l == 
# 495 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 495 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ) {
    return VAR_FIXED;
  }
  return l->lv_lock;
}







static inline void tv_list_set_lock(list_T *const l,
                                    const VarLockStatus lock)
{
  if (l == 
# 510 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 510 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ) {
    
# 511 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
   ((void) sizeof ((
# 511 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
   lock == VAR_FIXED
# 511 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
   ) ? 1 : 0), __extension__ ({ if (
# 511 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
   lock == VAR_FIXED
# 511 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
   ) ; else __assert_fail (
# 511 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
   "lock == VAR_FIXED"
# 511 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
   , "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h", 511, __extension__ __PRETTY_FUNCTION__); }))
# 511 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                            ;
    return;
  }
  l->lv_lock = lock;
}







static inline void tv_list_set_copyid(list_T *const l,
                                      const int copyid)
  FUNC_ATTR_NONNULL_ALL
{
  l->lv_copyID = copyid;
}

static inline int tv_list_len(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));




static inline int tv_list_len(const list_T *const l)
{
  ;
  if (l == 
# 539 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 539 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ) {
    return 0;
  }
  return l->lv_len;
}

static inline int tv_list_copyid(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result)) __attribute__((nonnull));






static inline int tv_list_copyid(const list_T *const l)
{
  return l->lv_copyID;
}

static inline list_T *tv_list_latest_copy(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result)) __attribute__((nonnull));
# 568 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
static inline list_T *tv_list_latest_copy(const list_T *const l)
{
  return l->lv_copylist;
}

static inline int tv_list_uidx(const list_T *const l, int n)
  __attribute__ ((pure)) __attribute__((warn_unused_result));







static inline int tv_list_uidx(const list_T *const l, int n)
{

  if (n < 0) {
    n += tv_list_len(l);
  }


  if (n < 0 || n >= tv_list_len(l)) {
    return -1;
  }
  return n;
}

static inline 
# 596 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
             _Bool 
# 596 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                  tv_list_has_watchers(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));
# 606 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
static inline 
# 606 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
             _Bool 
# 606 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                  tv_list_has_watchers(const list_T *const l)
{
  return l && l->lv_watch;
}

static inline listitem_T *tv_list_first(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline listitem_T *tv_list_first(const list_T *const l)
{
  if (l == 
# 621 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 621 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ) {
    ;
    return 
# 623 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 623 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ;
  }
  ;
  return l->lv_first;
}

static inline listitem_T *tv_list_last(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline listitem_T *tv_list_last(const list_T *const l)
{
  if (l == 
# 639 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 639 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ) {
    ;
    return 
# 641 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 641 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ;
  }
  ;
  return l->lv_last;
}

static inline void tv_dict_set_ret(typval_T *const tv, dict_T *const d)
  __attribute__((always_inline)) __attribute__((nonnull(1)));





static inline void tv_dict_set_ret(typval_T *const tv, dict_T *const d)
{
  tv->v_type = VAR_DICT;
  tv->vval.v_dict = d;
  if (d != 
# 658 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 658 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ) {
    d->dv_refcount++;
  }
}

static inline long tv_dict_len(const dict_T *const d)
  __attribute__ ((pure)) __attribute__((warn_unused_result));




static inline long tv_dict_len(const dict_T *const d)
{
  if (d == 
# 671 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          ((void *)0)
# 671 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ) {
    return 0L;
  }
  return (long)d->dv_hashtab.ht_used;
}

static inline 
# 677 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
             _Bool 
# 677 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                  tv_dict_is_watched(const dict_T *const d)
  __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline 
# 685 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
             _Bool 
# 685 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                  tv_dict_is_watched(const dict_T *const d)
{
  return d && !QUEUE_EMPTY(&d->watchers);
}






static inline void tv_init(typval_T *const tv)
{
  if (tv != 
# 697 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
           ((void *)0)
# 697 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
               ) {
    memset(tv, 0, sizeof(*tv));
  }
}
# 712 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
extern const char *const tv_empty_string;


extern 
# 715 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
      _Bool 
# 715 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
           tv_in_free_unref_items;
# 802 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
static inline 
# 802 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
             _Bool 
# 802 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                  tv_get_float_chk(const typval_T *const tv,
                                    float_T *const ret_f)
  __attribute__((nonnull)) __attribute__((warn_unused_result));



# 807 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
_Bool 
# 807 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
    emsgf(const char *const fmt, ...);
# 817 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
static inline 
# 817 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
             _Bool 
# 817 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                  tv_get_float_chk(const typval_T *const tv,
                                    float_T *const ret_f)
{
  if (tv->v_type == VAR_FLOAT) {
    *ret_f = tv->vval.v_float;
    return 
# 822 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          1
# 822 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ;
  }
  if (tv->v_type == VAR_NUMBER) {
    *ret_f = (float_T)tv->vval.v_number;
    return 
# 826 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
          1
# 826 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
              ;
  }
  emsgf("%s", gettext((char *)("E808: Number or Float required")));
  return 
# 829 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
        0
# 829 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
             ;
}

static inline DictWatcher *tv_dict_watcher_node_data(QUEUE *q)
  __attribute__((nonnull)) __attribute__((returns_nonnull)) __attribute__ ((pure))
  __attribute__((warn_unused_result)) __attribute__((always_inline));





static inline DictWatcher *tv_dict_watcher_node_data(QUEUE *q)
{
  return ((DictWatcher *)((char *)(q) - 
# 842 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
        __builtin_offsetof (
# 842 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
        DictWatcher
# 842 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
        , 
# 842 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
        node
# 842 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
        )
# 842 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
        ));
}

static inline 
# 845 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
             _Bool 
# 845 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                  tv_is_func(const typval_T tv)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_CONST;
# 855 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
static inline 
# 855 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 3 4
             _Bool 
# 855 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h"
                  tv_is_func(const typval_T tv)
{
  return tv.v_type == VAR_FUNC || tv.v_type == VAR_PARTIAL;
}
# 10 "/home/toto/.env/encours/neovim/src/nvim/strings.h" 2
# 20 "/home/toto/.env/encours/neovim/src/nvim/strings.h"
static inline char *strappend(char *const dst, const char *const src)
  FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
  FUNC_ATTR_NONNULL_RET
{
  const size_t src_len = strlen(src);
  return (char *)memmove(dst, src, src_len) + src_len;
}
# 5 "/home/toto/.env/encours/neovim/src/nvim/keymap.h" 2
# 124 "/home/toto/.env/encours/neovim/src/nvim/keymap.h"
enum key_extra {
  KE_NAME = 3

  , KE_S_UP = 4
  , KE_S_DOWN = 5

  , KE_S_F1 = 6
  , KE_S_F2 = 7
  , KE_S_F3 = 8
  , KE_S_F4 = 9
  , KE_S_F5 = 10
  , KE_S_F6 = 11
  , KE_S_F7 = 12
  , KE_S_F8 = 13
  , KE_S_F9 = 14
  , KE_S_F10 = 15

  , KE_S_F11 = 16
  , KE_S_F12 = 17
  , KE_S_F13 = 18
  , KE_S_F14 = 19
  , KE_S_F15 = 20
  , KE_S_F16 = 21
  , KE_S_F17 = 22
  , KE_S_F18 = 23
  , KE_S_F19 = 24
  , KE_S_F20 = 25

  , KE_S_F21 = 26
  , KE_S_F22 = 27
  , KE_S_F23 = 28
  , KE_S_F24 = 29
  , KE_S_F25 = 30
  , KE_S_F26 = 31
  , KE_S_F27 = 32
  , KE_S_F28 = 33
  , KE_S_F29 = 34
  , KE_S_F30 = 35

  , KE_S_F31 = 36
  , KE_S_F32 = 37
  , KE_S_F33 = 38
  , KE_S_F34 = 39
  , KE_S_F35 = 40
  , KE_S_F36 = 41
  , KE_S_F37 = 42

  , KE_MOUSE = 43



  , KE_LEFTMOUSE = 44
  , KE_LEFTDRAG = 45
  , KE_LEFTRELEASE = 46
  , KE_MIDDLEMOUSE = 47
  , KE_MIDDLEDRAG = 48
  , KE_MIDDLERELEASE = 49
  , KE_RIGHTMOUSE = 50
  , KE_RIGHTDRAG = 51
  , KE_RIGHTRELEASE = 52

  , KE_IGNORE = 53

  , KE_TAB = 54
  , KE_S_TAB_OLD = 55


  , KE_XF1 = 57
  , KE_XF2 = 58
  , KE_XF3 = 59
  , KE_XF4 = 60
  , KE_XEND = 61
  , KE_ZEND = 62
  , KE_XHOME = 63
  , KE_ZHOME = 64
  , KE_XUP = 65
  , KE_XDOWN = 66
  , KE_XLEFT = 67
  , KE_XRIGHT = 68

  , KE_LEFTMOUSE_NM = 69
  , KE_LEFTRELEASE_NM = 70

  , KE_S_XF1 = 71
  , KE_S_XF2 = 72
  , KE_S_XF3 = 73
  , KE_S_XF4 = 74




  , KE_MOUSEDOWN = 75
  , KE_MOUSEUP = 76
  , KE_MOUSELEFT = 77
  , KE_MOUSERIGHT = 78

  , KE_KINS = 79
  , KE_KDEL = 80

  , KE_CSI = 81
  , KE_SNR = 82
  , KE_PLUG = 83
  , KE_CMDWIN = 84

  , KE_C_LEFT = 85
  , KE_C_RIGHT = 86
  , KE_C_HOME = 87
  , KE_C_END = 88

  , KE_X1MOUSE = 89
  , KE_X1DRAG = 90
  , KE_X1RELEASE = 91
  , KE_X2MOUSE = 92
  , KE_X2DRAG = 93
  , KE_X2RELEASE = 94

  , KE_DROP = 95

  , KE_NOP = 97




  , KE_EVENT = 102
  , KE_COMMAND = 104
};
# 34 "/home/toto/.env/encours/neovim/src/nvim/vim.h" 2
# 80 "/home/toto/.env/encours/neovim/src/nvim/vim.h"
typedef enum {
  kDirectionNotSet = 0,
  FORWARD = 1,
  BACKWARD = (-1),
  FORWARD_FILE = 3,
  BACKWARD_FILE = (-3),
} Direction;
# 108 "/home/toto/.env/encours/neovim/src/nvim/vim.h"
enum {
  EXPAND_UNSUCCESSFUL = -2,
  EXPAND_OK = -1,
  EXPAND_NOTHING = 0,
  EXPAND_COMMANDS,
  EXPAND_FILES,
  EXPAND_DIRECTORIES,
  EXPAND_SETTINGS,
  EXPAND_BOOL_SETTINGS,
  EXPAND_TAGS,
  EXPAND_OLD_SETTING,
  EXPAND_HELP,
  EXPAND_BUFFERS,
  EXPAND_EVENTS,
  EXPAND_MENUS,
  EXPAND_SYNTAX,
  EXPAND_HIGHLIGHT,
  EXPAND_AUGROUP,
  EXPAND_USER_VARS,
  EXPAND_MAPPINGS,
  EXPAND_TAGS_LISTFILES,
  EXPAND_FUNCTIONS,
  EXPAND_USER_FUNC,
  EXPAND_EXPRESSION,
  EXPAND_MENUNAMES,
  EXPAND_USER_COMMANDS,
  EXPAND_USER_CMD_FLAGS,
  EXPAND_USER_NARGS,
  EXPAND_USER_COMPLETE,
  EXPAND_ENV_VARS,
  EXPAND_LANGUAGE,
  EXPAND_COLORS,
  EXPAND_COMPILER,
  EXPAND_USER_DEFINED,
  EXPAND_USER_LIST,
  EXPAND_SHELLCMD,
  EXPAND_CSCOPE,
  EXPAND_SIGN,
  EXPAND_PROFILE,
  EXPAND_BEHAVE,
  EXPAND_FILETYPE,
  EXPAND_FILES_IN_PATH,
  EXPAND_OWNSYNTAX,
  EXPAND_LOCALES,
  EXPAND_HISTORY,
  EXPAND_USER,
  EXPAND_SYNTIME,
  EXPAND_USER_ADDR_TYPE,
  EXPAND_PACKADD,
  EXPAND_MESSAGES,
  EXPAND_MAPCLEAR,
  EXPAND_ARGLIST,
  EXPAND_CHECKHEALTH,
};
# 199 "/home/toto/.env/encours/neovim/src/nvim/vim.h"
enum { FOLD_TEXT_LEN = 51 };
# 263 "/home/toto/.env/encours/neovim/src/nvim/vim.h"
# 1 "/home/toto/.env/encours/neovim/src/nvim/path.h" 1



# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 5 "/home/toto/.env/encours/neovim/src/nvim/path.h" 2
# 31 "/home/toto/.env/encours/neovim/src/nvim/path.h"
typedef enum file_comparison {
  kEqualFiles = 1,
  kDifferentFiles = 2,
  kBothFilesMissing = 4,
  kOneFileMissing = 6,
  kEqualFileNames = 7
} FileComparison;
# 264 "/home/toto/.env/encours/neovim/src/nvim/vim.h" 2
# 300 "/home/toto/.env/encours/neovim/src/nvim/vim.h"
# 1 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 1







# 1 "/home/toto/.env/encours/neovim/src/nvim/ex_eval.h" 1




# 1 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 1







# 1 "/home/toto/.env/encours/neovim/src/nvim/normal.h" 1





# 1 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 1
# 9 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct file_buffer buf_T;



typedef struct {
  buf_T *br_buf;
  int br_fnum;
  int br_buf_free_count;
} bufref_T;






# 1 "/home/toto/.env/encours/neovim/src/nvim/highlight_defs.h" 1







typedef int32_t RgbValue;




typedef enum {
  HL_INVERSE = 0x01,
  HL_BOLD = 0x02,
  HL_ITALIC = 0x04,
  HL_UNDERLINE = 0x08,
  HL_UNDERCURL = 0x10,
  HL_STANDOUT = 0x20,
  HL_STRIKETHROUGH = 0x40,
  HL_NOCOMBINE = 0x80,
  HL_BG_INDEXED = 0x0100,
  HL_FG_INDEXED = 0x0200,
} HlAttrFlags;



typedef struct attr_entry {
  int16_t rgb_ae_attr, cterm_ae_attr;
  RgbValue rgb_fg_color, rgb_bg_color, rgb_sp_color;
  int cterm_fg_color, cterm_bg_color;
  int hl_blend;
} HlAttrs;
# 48 "/home/toto/.env/encours/neovim/src/nvim/highlight_defs.h"
typedef enum {
  HLF_8 = 0

  , HLF_EOB
  , HLF_TERM
  , HLF_TERMNC
  , HLF_AT

  , HLF_D
  , HLF_E
  , HLF_I
  , HLF_L
  , HLF_M
  , HLF_CM
  , HLF_N
  , HLF_CLN
  , HLF_R
  , HLF_S
  , HLF_SNC
  , HLF_C
  , HLF_T
  , HLF_V
  , HLF_VNC
  , HLF_W
  , HLF_WM
  , HLF_FL
  , HLF_FC
  , HLF_ADD
  , HLF_CHD
  , HLF_DED
  , HLF_TXD
  , HLF_SC
  , HLF_CONCEAL
  , HLF_SPB
  , HLF_SPC
  , HLF_SPR
  , HLF_SPL
  , HLF_PNI
  , HLF_PSI
  , HLF_PSB
  , HLF_PST
  , HLF_TP
  , HLF_TPS
  , HLF_TPF
  , HLF_CUC
  , HLF_CUL
  , HLF_MC
  , HLF_QFL
  , HLF_0
  , HLF_INACTIVE
  , HLF_MSGSEP
  , HLF_NFLOAT
  , HLF_MSG
  , HLF_COUNT
} hlf_T;

extern const char *hlf_names[]
# 155 "/home/toto/.env/encours/neovim/src/nvim/highlight_defs.h"
  ;


extern int highlight_attr[HLF_COUNT];
extern int highlight_attr_last[HLF_COUNT];
extern int highlight_user[9];
extern int highlight_stlnc[9];
extern int cterm_normal_fg_color ;
extern int cterm_normal_bg_color ;
extern RgbValue normal_fg ;
extern RgbValue normal_bg ;
extern RgbValue normal_sp ;

typedef enum {
  kHlUnknown,
  kHlUI,
  kHlSyntax,
  kHlTerminal,
  kHlCombine,
  kHlBlend,
  kHlBlendThrough,
} HlKind;

typedef struct {
  HlAttrs attr;
  HlKind kind;
  int id1;
  int id2;
} HlEntry;
# 25 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2



# 1 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h" 1





# 1 "/home/toto/.env/encours/neovim/src/nvim/eval/typval.h" 1
# 7 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h" 2
# 156 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
enum {
  SHM_RO = 'r',
  SHM_MOD = 'm',
  SHM_FILE = 'f',
  SHM_LAST = 'i',
  SHM_TEXT = 'x',
  SHM_LINES = 'l',
  SHM_NEW = 'n',
  SHM_WRI = 'w',
  SHM_ABBREVIATIONS = 'a',
  SHM_WRITE = 'W',
  SHM_TRUNC = 't',
  SHM_TRUNCALL = 'T',
  SHM_OVER = 'o',
  SHM_OVERALL = 'O',
  SHM_SEARCH = 's',
  SHM_ATTENTION = 'A',
  SHM_INTRO = 'I',
  SHM_COMPLETIONMENU = 'c',
  SHM_RECORDING = 'q',
  SHM_FILEINFO = 'F',
  SHM_SEARCHCOUNT = 'S',
};
# 224 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
enum {
  STL_FILEPATH = 'f',
  STL_FULLPATH = 'F',
  STL_FILENAME = 't',
  STL_COLUMN = 'c',
  STL_VIRTCOL = 'v',
  STL_VIRTCOL_ALT = 'V',
  STL_LINE = 'l',
  STL_NUMLINES = 'L',
  STL_BUFNO = 'n',
  STL_KEYMAP = 'k',
  STL_OFFSET = 'o',
  STL_OFFSET_X = 'O',
  STL_BYTEVAL = 'b',
  STL_BYTEVAL_X = 'B',
  STL_ROFLAG = 'r',
  STL_ROFLAG_ALT = 'R',
  STL_HELPFLAG = 'h',
  STL_HELPFLAG_ALT = 'H',
  STL_FILETYPE = 'y',
  STL_FILETYPE_ALT = 'Y',
  STL_PREVIEWFLAG = 'w',
  STL_PREVIEWFLAG_ALT = 'W',
  STL_MODIFIED = 'm',
  STL_MODIFIED_ALT = 'M',
  STL_QUICKFIX = 'q',
  STL_PERCENTAGE = 'p',
  STL_ALTPERCENT = 'P',
  STL_ARGLISTSTAT = 'a',
  STL_PAGENUM = 'N',
  STL_VIM_EXPR = '{',
  STL_SEPARATE = '=',
  STL_TRUNCMARK = '<',
  STL_USER_HL = '*',
  STL_HIGHLIGHT = '#',
  STL_TABPAGENR = 'T',
  STL_TABCLOSENR = 'X',
  STL_CLICK_FUNC = '@',
};
# 294 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern long p_aleph;
extern int p_acd;
extern char_u *p_ambw;
extern int p_ar;
extern int p_aw;
extern int p_awa;
extern char_u *p_bs;
extern char_u *p_bg;
extern int p_bk;
extern char_u *p_bkc;
extern unsigned int bkc_flags;
# 314 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern char_u *p_bdir;
extern char_u *p_bex;
extern char_u *p_bo;
extern char breakat_flags[256];
extern unsigned bo_flags;
# 348 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern char_u *p_bsk;
extern char_u *p_breakat;
extern char_u *p_cmp;
extern unsigned cmp_flags;





extern char_u *p_enc;
extern int p_deco;
extern char_u *p_ccv;
extern char_u *p_cedit;
extern char_u *p_cb;
extern unsigned cb_flags;






extern long p_cwh;
extern long p_ch;
extern long p_columns;
extern int p_confirm;
extern int p_cp;
extern char_u *p_cot;
extern long p_pb;
extern long p_ph;
extern long p_pw;
extern char_u *p_cpo;
extern char_u *p_csprg;
extern int p_csre;
extern char_u *p_csqf;


extern int p_cst;
extern long p_csto;
extern long p_cspc;
extern int p_csverbose;
extern char_u *p_debug;
extern char_u *p_def;
extern char_u *p_inc;
extern char_u *p_dip;
extern char_u *p_dex;
extern char_u *p_dict;
extern int p_dg;
extern char_u *p_dir;
extern char_u *p_dy;
extern unsigned dy_flags;
# 407 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern int p_ed;
extern int p_emoji;
extern char_u *p_ead;
extern int p_ea;
extern char_u *p_ep;
extern int p_eb;
extern char_u *p_ef;
extern char_u *p_efm;
extern char_u *p_gefm;
extern char_u *p_gp;
extern char_u *p_ei;
extern int p_exrc;
extern char_u *p_fencs;
extern char_u *p_ffs;
extern int p_fic;
extern char_u *p_fcl;
extern long p_fdls;
extern char_u *p_fdo;
extern unsigned fdo_flags;
# 442 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern char_u *p_fp;
extern int p_fs;
extern int p_gd;
extern char_u *p_pdev;
extern char_u *p_penc;
extern char_u *p_pexpr;
extern char_u *p_pmfn;
extern char_u *p_pmcs;
extern char_u *p_pfn;
extern char_u *p_popt;
extern char_u *p_header;
extern int p_prompt;
extern char_u *p_guicursor;
extern char_u *p_guifont;
extern char_u *p_guifontset;
extern char_u *p_guifontwide;
extern char_u *p_hf;
extern long p_hh;
extern char_u *p_hlg;
extern int p_hid;
extern char_u *p_hl;
extern int p_hls;
extern long p_hi;
extern int p_hkmap;
extern int p_hkmapp;
extern int p_arshape;
extern int p_icon;
extern char_u *p_iconstring;
extern int p_ic;
extern int p_is;
extern char_u *p_icm;
extern int p_im;
extern char_u *p_isf;
extern char_u *p_isi;
extern char_u *p_isp;
extern int p_js;
extern char_u *p_jop;
extern unsigned jop_flags;




extern char_u *p_kp;
extern char_u *p_km;
extern char_u *p_langmap;
extern int p_lnr;
extern int p_lrm;
extern char_u *p_lm;
extern long p_lines;
extern long p_linespace;
extern char_u *p_lispwords;
extern long p_ls;
extern long p_stal;
extern char_u *p_lcs;

extern int p_lz;
extern int p_lpl;
extern int p_magic;
extern char_u *p_menc;
extern char_u *p_mef;
extern char_u *p_mp;
extern char_u *p_cc;
extern int p_cc_cols[256];
extern long p_mat;
extern long p_mco;
extern long p_mfd;
extern long p_mmd;
extern long p_mmp;
extern long p_mis;
extern char_u *p_msm;
extern long p_mle;
extern long p_mls;
extern char_u *p_mouse;
extern char_u *p_mousem;
extern long p_mouset;
extern int p_more;
extern char_u *p_opfunc;
extern char_u *p_para;
extern int p_paste;
extern char_u *p_pt;
extern char_u *p_pex;
extern char_u *p_pm;
extern char_u *p_path;
extern char_u *p_cdpath;
extern long p_pyx;
extern char_u *p_rdb;
extern unsigned rdb_flags;
# 543 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern long p_rdt;
extern int p_remap;
extern long p_re;
extern long p_report;
extern long p_pvh;
extern int p_ari;
extern int p_ri;
extern int p_ru;
extern char_u *p_ruf;
extern char_u *p_pp;
extern char_u *p_rtp;
extern long p_scbk;
extern long p_sj;
extern long p_so;
extern char_u *p_sbo;
extern char_u *p_sections;
extern int p_secure;
extern char_u *p_sel;
extern char_u *p_slm;
extern char_u *p_ssop;
extern unsigned ssop_flags;
# 589 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern char_u *p_sh;
extern char_u *p_shcf;
extern char_u *p_sp;
extern char_u *p_shq;
extern char_u *p_sxq;
extern char_u *p_sxe;
extern char_u *p_srr;
extern int p_stmp;



extern char_u *p_stl;
extern int p_sr;
extern char_u *p_shm;
extern char_u *p_sbr;
extern int p_sc;
extern int p_sft;
extern int p_sm;
extern int p_smd;
extern long p_ss;
extern long p_siso;
extern int p_scs;
extern int p_sta;
extern int p_sb;
extern long p_tpm;
extern char_u *p_tal;
extern char_u *p_sps;
extern int p_spr;
extern int p_sol;
extern char_u *p_su;
extern char_u *p_swb;
extern unsigned swb_flags;
# 631 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern int p_tbs;
extern char_u *p_tc;
extern unsigned tc_flags;
# 643 "/home/toto/.env/encours/neovim/src/nvim/option_defs.h"
extern long p_tl;
extern int p_tr;
extern char_u *p_tags;
extern int p_tgst;
extern int p_tbidi;
extern int p_terse;
extern int p_to;
extern int p_timeout;
extern long p_tm;
extern int p_title;
extern long p_titlelen;
extern char_u *p_titleold;
extern char_u *p_titlestring;
extern char_u *p_tsr;
extern int p_tgc;
extern int p_ttimeout;
extern long p_ttm;
extern char_u *p_udir;
extern long p_ul;
extern long p_ur;
extern long p_uc;
extern long p_ut;
extern char_u *p_fcs;
extern char_u *p_shada;
extern char *p_shadafile;
extern char_u *p_vdir;
extern char_u *p_vop;
extern unsigned vop_flags;
extern int p_vb;
extern char_u *p_ve;
extern unsigned ve_flags;







extern long p_verbose;



extern char_u *p_vfile;

extern int p_warn;
extern char_u *p_wop;
extern unsigned wop_flags;





extern long p_window;
extern char_u *p_wak;
extern char_u *p_wig;
extern char_u *p_ww;
extern long p_wc;
extern long p_wcm;
extern int p_wic;
extern char_u *p_wim;
extern int p_wmnu;
extern long p_wh;
extern long p_wmh;
extern long p_wmw;
extern long p_wiw;
extern int p_ws;
extern int p_write;
extern int p_wa;
extern int p_wb;
extern long p_wd;

extern int p_force_on;
extern int p_force_off;






enum {
  BV_AI = 0
  , BV_AR
  , BV_BH
  , BV_BKC
  , BV_BT
  , BV_EFM
  , BV_GP
  , BV_MP
  , BV_BIN
  , BV_BL
  , BV_BOMB
  , BV_CHANNEL
  , BV_CI
  , BV_CIN
  , BV_CINK
  , BV_CINO
  , BV_CINW
  , BV_CM
  , BV_CMS
  , BV_COM
  , BV_CPT
  , BV_DICT
  , BV_TSR
  , BV_CFU
  , BV_DEF
  , BV_INC
  , BV_EOL
  , BV_FIXEOL
  , BV_EP
  , BV_ET
  , BV_FENC
  , BV_FP
  , BV_BEXPR
  , BV_FEX
  , BV_FF
  , BV_FLP
  , BV_FO
  , BV_FT
  , BV_IMI
  , BV_IMS
  , BV_INDE
  , BV_INDK
  , BV_INEX
  , BV_INF
  , BV_ISK
  , BV_KMAP
  , BV_KP
  , BV_LISP
  , BV_LW
  , BV_MENC
  , BV_MA
  , BV_ML
  , BV_MOD
  , BV_MPS
  , BV_NF
  , BV_OFU
  , BV_PATH
  , BV_PI
  , BV_QE
  , BV_RO
  , BV_SCBK
  , BV_SI
  , BV_SMC
  , BV_SYN
  , BV_SPC
  , BV_SPF
  , BV_SPL
  , BV_STS
  , BV_SUA
  , BV_SW
  , BV_SWF
  , BV_TFU
  , BV_TAGS
  , BV_TC
  , BV_TS
  , BV_TW
  , BV_TX
  , BV_UDF
  , BV_UL
  , BV_WM
  , BV_COUNT
};






enum {
  WV_LIST = 0
  , WV_ARAB
  , WV_COCU
  , WV_COLE
  , WV_CRBIND
  , WV_BRI
  , WV_BRIOPT
  , WV_DIFF
  , WV_FDC
  , WV_FEN
  , WV_FDI
  , WV_FDL
  , WV_FDM
  , WV_FML
  , WV_FDN
  , WV_FDE
  , WV_FDT
  , WV_FMR
  , WV_LBR
  , WV_NU
  , WV_RNU
  , WV_NUW
  , WV_PVW
  , WV_RL
  , WV_RLC
  , WV_SCBIND
  , WV_SCROLL
  , WV_SISO
  , WV_SO
  , WV_SPELL
  , WV_CUC
  , WV_CUL
  , WV_CC
  , WV_STL
  , WV_WFH
  , WV_WFW
  , WV_WRAP
  , WV_SCL
  , WV_WINHL
  , WV_FCS
  , WV_LCS
  , WV_WINBL
  , WV_COUNT
};







typedef struct {
  sctx_T script_ctx;
  uint64_t channel_id;
} LastSet;
# 29 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/mark_defs.h" 1




# 1 "/home/toto/.env/encours/neovim/src/nvim/os/time.h" 1







typedef uint64_t Timestamp;
# 6 "/home/toto/.env/encours/neovim/src/nvim/mark_defs.h" 2
# 35 "/home/toto/.env/encours/neovim/src/nvim/mark_defs.h"
typedef struct filemark {
  pos_T mark;
  int fnum;
  Timestamp timestamp;
  dict_T *additional_data;
} fmark_T;


typedef struct xfilemark {
  fmark_T fmark;
  char_u *fname;
} xfmark_T;
# 31 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/undo_defs.h" 1






# 1 "/home/toto/.env/encours/neovim/src/nvim/extmark_defs.h" 1




# 1 "/home/toto/.env/encours/neovim/src/nvim/lib/kvec.h" 1
# 43 "/home/toto/.env/encours/neovim/src/nvim/lib/kvec.h"
# 1 "/home/toto/.env/encours/neovim/src/nvim/memory.h" 1





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 7 "/home/toto/.env/encours/neovim/src/nvim/memory.h" 2



typedef void *(*MemMalloc)(size_t);


typedef void (*MemFree)(void *);


typedef void *(*MemCalloc)(size_t, size_t);


typedef void *(*MemRealloc)(void *, size_t);
# 44 "/home/toto/.env/encours/neovim/src/nvim/lib/kvec.h" 2
# 139 "/home/toto/.env/encours/neovim/src/nvim/lib/kvec.h"
static inline void *_memcpy_free(void *const restrict dest,
                                 void *const restrict src,
                                 const size_t size)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_NONNULL_RET FUNC_ATTR_ALWAYS_INLINE
{
  memcpy(dest, src, size);
  do { void **ptr_ = (void **)&(src); xfree(*ptr_); *ptr_ = 
# 145 "/home/toto/.env/encours/neovim/src/nvim/lib/kvec.h" 3 4
 ((void *)0)
# 145 "/home/toto/.env/encours/neovim/src/nvim/lib/kvec.h"
 ; (void)(*ptr_); } while (0);
  return dest;
}
# 6 "/home/toto/.env/encours/neovim/src/nvim/extmark_defs.h" 2

typedef struct {
  char *text;
  int hl_id;
} VirtTextChunk;

typedef struct { size_t size; size_t capacity; VirtTextChunk *items; } VirtText;


typedef struct
{
  uint64_t ns_id;
  uint64_t mark_id;
  int hl_id;


  VirtText virt_text;
} ExtmarkItem;

typedef struct undo_object ExtmarkUndoObject;
typedef struct { size_t size; size_t capacity; ExtmarkUndoObject *items; } extmark_undo_vec_t;



typedef enum {
  kExtmarkNOOP,
  kExtmarkUndo,
  kExtmarkNoUndo,
  kExtmarkUndoNoRedo,
} ExtmarkOp;
# 8 "/home/toto/.env/encours/neovim/src/nvim/undo_defs.h" 2


typedef struct u_header u_header_T;


typedef struct {
  pos_T vi_start;
  pos_T vi_end;
  int vi_mode;
  colnr_T vi_curswant;
} visualinfo_T;

# 1 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 1
# 21 "/home/toto/.env/encours/neovim/src/nvim/undo_defs.h" 2

typedef struct u_entry u_entry_T;
struct u_entry {
  u_entry_T *ue_next;
  linenr_T ue_top;
  linenr_T ue_bot;
  linenr_T ue_lcount;
  char_u **ue_array;
  long ue_size;



};

struct u_header {


  union {
    u_header_T *ptr;
    long seq;
  } uh_next;
  union {
    u_header_T *ptr;
    long seq;
  } uh_prev;
  union {
    u_header_T *ptr;
    long seq;
  } uh_alt_next;
  union {
    u_header_T *ptr;
    long seq;
  } uh_alt_prev;
  long uh_seq;
  int uh_walk;
  u_entry_T *uh_entry;
  u_entry_T *uh_getbot_entry;
  pos_T uh_cursor;
  long uh_cursor_vcol;
  int uh_flags;
  fmark_T uh_namedm[('z' - 'a' + 1)];
  extmark_undo_vec_t uh_extmark;
  visualinfo_T uh_visual;
  time_t uh_time;
  long uh_save_nr;




};






typedef struct {
  buf_T *bi_buf;
  FILE *bi_fp;
} bufinfo_T;
# 33 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2







# 1 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h" 1







# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 9 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h" 2
# 25 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h"
typedef enum {
  kErrorTypeNone = -1,
  kErrorTypeException,
  kErrorTypeValidation
} ErrorType;

typedef enum {
  kMessageTypeUnknown = -1,

  kMessageTypeRequest = 0,
  kMessageTypeResponse = 1,
  kMessageTypeNotification = 2,
} MessageType;
# 48 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h"
static inline 
# 48 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h" 3 4
             _Bool 
# 48 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h"
                  is_internal_call(const uint64_t channel_id)
  __attribute__((always_inline)) __attribute__((const));






static inline 
# 56 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h" 3 4
             _Bool 
# 56 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h"
                  is_internal_call(const uint64_t channel_id)
{
  return !!(channel_id & (((uint64_t)1) << (sizeof(uint64_t) * 8 - 1)));
}

typedef struct {
  ErrorType type;
  char *msg;
} Error;

typedef 
# 66 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h" 3 4
       _Bool 
# 66 "/home/toto/.env/encours/neovim/src/nvim/api/private/defs.h"
            Boolean;
typedef int64_t Integer;
typedef double Float;







typedef struct {
  char *data;
  size_t size;
} String;

typedef handle_T Buffer;
typedef handle_T Window;
typedef handle_T Tabpage;

typedef struct object Object;

typedef struct {
  Object *items;
  size_t size, capacity;
} Array;

typedef struct key_value_pair KeyValuePair;

typedef struct {
  KeyValuePair *items;
  size_t size, capacity;
} Dictionary;

typedef enum {
  kObjectTypeNil = 0,
  kObjectTypeBoolean,
  kObjectTypeInteger,
  kObjectTypeFloat,
  kObjectTypeString,
  kObjectTypeArray,
  kObjectTypeDictionary,
  kObjectTypeLuaRef,

  kObjectTypeBuffer,
  kObjectTypeWindow,
  kObjectTypeTabpage,
} ObjectType;

struct object {
  ObjectType type;
  union {
    Boolean boolean;
    Integer integer;
    Float floating;
    String string;
    Array array;
    Dictionary dictionary;
    LuaRef luaref;
  } data;
};

struct key_value_pair {
  String key;
  Object value;
};
# 41 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/map.h" 1





# 1 "/home/toto/.env/encours/neovim/src/nvim/map_defs.h" 1



# 1 "/home/toto/.env/encours/neovim/src/nvim/lib/khash.h" 1
# 130 "/home/toto/.env/encours/neovim/src/nvim/lib/khash.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 131 "/home/toto/.env/encours/neovim/src/nvim/lib/khash.h" 2




# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 136 "/home/toto/.env/encours/neovim/src/nvim/lib/khash.h" 2




typedef unsigned int khint32_t;





typedef unsigned long khint64_t;
# 157 "/home/toto/.env/encours/neovim/src/nvim/lib/khash.h"
typedef khint32_t khint_t;
typedef khint_t khiter_t;
# 459 "/home/toto/.env/encours/neovim/src/nvim/lib/khash.h"
static inline khint_t __ac_X31_hash_string(const char *s)
{
 khint_t h = (khint_t)*s;
 if (h) for (++s ; *s; ++s) h = (h << 5) - h + (uint8_t)*s;
 return h;
}
# 476 "/home/toto/.env/encours/neovim/src/nvim/lib/khash.h"
static inline khint_t __ac_Wang_hash(khint_t key)
{
    key += ~(key << 15);
    key ^= (key >> 10);
    key += (key << 3);
    key ^= (key >> 6);
    key += ~(key << 11);
    key ^= (key >> 16);
    return key;
}
# 700 "/home/toto/.env/encours/neovim/src/nvim/lib/khash.h"
typedef const char *kh_cstr_t;
# 5 "/home/toto/.env/encours/neovim/src/nvim/map_defs.h" 2

typedef const char * cstr_t;
typedef void * ptr_t;
# 7 "/home/toto/.env/encours/neovim/src/nvim/map.h" 2


# 1 "/home/toto/.env/encours/neovim/src/nvim/api/private/dispatch.h" 1





typedef Object (*ApiDispatchWrapper)(uint64_t channel_id,
                                     Array args,
                                     Error *error);



typedef struct {
  ApiDispatchWrapper fn;
  
# 14 "/home/toto/.env/encours/neovim/src/nvim/api/private/dispatch.h" 3 4
 _Bool 
# 14 "/home/toto/.env/encours/neovim/src/nvim/api/private/dispatch.h"
      fast;



} MsgpackRpcRequestHandler;
# 10 "/home/toto/.env/encours/neovim/src/nvim/map.h" 2
# 37 "/home/toto/.env/encours/neovim/src/nvim/map.h"
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; int *keys; int *vals; } kh_int_int_map_t; extern kh_int_int_map_t *kh_init_int_int_map(void); extern void kh_dealloc_int_int_map(kh_int_int_map_t *h); extern void kh_destroy_int_int_map(kh_int_int_map_t *h); extern void kh_clear_int_int_map(kh_int_int_map_t *h); extern khint_t kh_get_int_int_map(const kh_int_int_map_t *h, int key); extern void kh_resize_int_int_map(kh_int_int_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_int_int_map(kh_int_int_map_t *h, int key, int *ret); extern void kh_del_int_int_map(kh_int_int_map_t *h, khint_t x); typedef struct { kh_int_int_map_t *table; } Map_int_int; Map_int_int *map_int_int_new(void); void map_int_int_free(Map_int_int *map); int map_int_int_get(Map_int_int *map, int key); 
# 37 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 37 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_int_int_has(Map_int_int *map, int key); int map_int_int_key(Map_int_int *map, int key); int map_int_int_put(Map_int_int *map, int key, int value); int *map_int_int_ref(Map_int_int *map, int key, 
# 37 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 37 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); int map_int_int_del(Map_int_int *map, int key); void map_int_int_clear(Map_int_int *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; cstr_t *keys; ptr_t *vals; } kh_cstr_t_ptr_t_map_t; extern kh_cstr_t_ptr_t_map_t *kh_init_cstr_t_ptr_t_map(void); extern void kh_dealloc_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h); extern void kh_destroy_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h); extern void kh_clear_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h); extern khint_t kh_get_cstr_t_ptr_t_map(const kh_cstr_t_ptr_t_map_t *h, cstr_t key); extern void kh_resize_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, cstr_t key, int *ret); extern void kh_del_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, khint_t x); typedef struct { kh_cstr_t_ptr_t_map_t *table; } Map_cstr_t_ptr_t; Map_cstr_t_ptr_t *map_cstr_t_ptr_t_new(void); void map_cstr_t_ptr_t_free(Map_cstr_t_ptr_t *map); ptr_t map_cstr_t_ptr_t_get(Map_cstr_t_ptr_t *map, cstr_t key); 
# 38 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 38 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_cstr_t_ptr_t_has(Map_cstr_t_ptr_t *map, cstr_t key); cstr_t map_cstr_t_ptr_t_key(Map_cstr_t_ptr_t *map, cstr_t key); ptr_t map_cstr_t_ptr_t_put(Map_cstr_t_ptr_t *map, cstr_t key, ptr_t value); ptr_t *map_cstr_t_ptr_t_ref(Map_cstr_t_ptr_t *map, cstr_t key, 
# 38 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 38 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); ptr_t map_cstr_t_ptr_t_del(Map_cstr_t_ptr_t *map, cstr_t key); void map_cstr_t_ptr_t_clear(Map_cstr_t_ptr_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; ptr_t *keys; ptr_t *vals; } kh_ptr_t_ptr_t_map_t; extern kh_ptr_t_ptr_t_map_t *kh_init_ptr_t_ptr_t_map(void); extern void kh_dealloc_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h); extern void kh_destroy_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h); extern void kh_clear_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h); extern khint_t kh_get_ptr_t_ptr_t_map(const kh_ptr_t_ptr_t_map_t *h, ptr_t key); extern void kh_resize_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, ptr_t key, int *ret); extern void kh_del_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, khint_t x); typedef struct { kh_ptr_t_ptr_t_map_t *table; } Map_ptr_t_ptr_t; Map_ptr_t_ptr_t *map_ptr_t_ptr_t_new(void); void map_ptr_t_ptr_t_free(Map_ptr_t_ptr_t *map); ptr_t map_ptr_t_ptr_t_get(Map_ptr_t_ptr_t *map, ptr_t key); 
# 39 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 39 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_ptr_t_ptr_t_has(Map_ptr_t_ptr_t *map, ptr_t key); ptr_t map_ptr_t_ptr_t_key(Map_ptr_t_ptr_t *map, ptr_t key); ptr_t map_ptr_t_ptr_t_put(Map_ptr_t_ptr_t *map, ptr_t key, ptr_t value); ptr_t *map_ptr_t_ptr_t_ref(Map_ptr_t_ptr_t *map, ptr_t key, 
# 39 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 39 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); ptr_t map_ptr_t_ptr_t_del(Map_ptr_t_ptr_t *map, ptr_t key); void map_ptr_t_ptr_t_clear(Map_ptr_t_ptr_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; uint64_t *keys; ptr_t *vals; } kh_uint64_t_ptr_t_map_t; extern kh_uint64_t_ptr_t_map_t *kh_init_uint64_t_ptr_t_map(void); extern void kh_dealloc_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h); extern void kh_destroy_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h); extern void kh_clear_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h); extern khint_t kh_get_uint64_t_ptr_t_map(const kh_uint64_t_ptr_t_map_t *h, uint64_t key); extern void kh_resize_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, uint64_t key, int *ret); extern void kh_del_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, khint_t x); typedef struct { kh_uint64_t_ptr_t_map_t *table; } Map_uint64_t_ptr_t; Map_uint64_t_ptr_t *map_uint64_t_ptr_t_new(void); void map_uint64_t_ptr_t_free(Map_uint64_t_ptr_t *map); ptr_t map_uint64_t_ptr_t_get(Map_uint64_t_ptr_t *map, uint64_t key); 
# 40 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 40 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_uint64_t_ptr_t_has(Map_uint64_t_ptr_t *map, uint64_t key); uint64_t map_uint64_t_ptr_t_key(Map_uint64_t_ptr_t *map, uint64_t key); ptr_t map_uint64_t_ptr_t_put(Map_uint64_t_ptr_t *map, uint64_t key, ptr_t value); ptr_t *map_uint64_t_ptr_t_ref(Map_uint64_t_ptr_t *map, uint64_t key, 
# 40 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 40 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); ptr_t map_uint64_t_ptr_t_del(Map_uint64_t_ptr_t *map, uint64_t key); void map_uint64_t_ptr_t_clear(Map_uint64_t_ptr_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; uint64_t *keys; ssize_t *vals; } kh_uint64_t_ssize_t_map_t; extern kh_uint64_t_ssize_t_map_t *kh_init_uint64_t_ssize_t_map(void); extern void kh_dealloc_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h); extern void kh_destroy_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h); extern void kh_clear_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h); extern khint_t kh_get_uint64_t_ssize_t_map(const kh_uint64_t_ssize_t_map_t *h, uint64_t key); extern void kh_resize_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h, uint64_t key, int *ret); extern void kh_del_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h, khint_t x); typedef struct { kh_uint64_t_ssize_t_map_t *table; } Map_uint64_t_ssize_t; Map_uint64_t_ssize_t *map_uint64_t_ssize_t_new(void); void map_uint64_t_ssize_t_free(Map_uint64_t_ssize_t *map); ssize_t map_uint64_t_ssize_t_get(Map_uint64_t_ssize_t *map, uint64_t key); 
# 41 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 41 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_uint64_t_ssize_t_has(Map_uint64_t_ssize_t *map, uint64_t key); uint64_t map_uint64_t_ssize_t_key(Map_uint64_t_ssize_t *map, uint64_t key); ssize_t map_uint64_t_ssize_t_put(Map_uint64_t_ssize_t *map, uint64_t key, ssize_t value); ssize_t *map_uint64_t_ssize_t_ref(Map_uint64_t_ssize_t *map, uint64_t key, 
# 41 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 41 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); ssize_t map_uint64_t_ssize_t_del(Map_uint64_t_ssize_t *map, uint64_t key); void map_uint64_t_ssize_t_clear(Map_uint64_t_ssize_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; uint64_t *keys; uint64_t *vals; } kh_uint64_t_uint64_t_map_t; extern kh_uint64_t_uint64_t_map_t *kh_init_uint64_t_uint64_t_map(void); extern void kh_dealloc_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h); extern void kh_destroy_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h); extern void kh_clear_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h); extern khint_t kh_get_uint64_t_uint64_t_map(const kh_uint64_t_uint64_t_map_t *h, uint64_t key); extern void kh_resize_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h, uint64_t key, int *ret); extern void kh_del_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h, khint_t x); typedef struct { kh_uint64_t_uint64_t_map_t *table; } Map_uint64_t_uint64_t; Map_uint64_t_uint64_t *map_uint64_t_uint64_t_new(void); void map_uint64_t_uint64_t_free(Map_uint64_t_uint64_t *map); uint64_t map_uint64_t_uint64_t_get(Map_uint64_t_uint64_t *map, uint64_t key); 
# 42 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 42 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_uint64_t_uint64_t_has(Map_uint64_t_uint64_t *map, uint64_t key); uint64_t map_uint64_t_uint64_t_key(Map_uint64_t_uint64_t *map, uint64_t key); uint64_t map_uint64_t_uint64_t_put(Map_uint64_t_uint64_t *map, uint64_t key, uint64_t value); uint64_t *map_uint64_t_uint64_t_ref(Map_uint64_t_uint64_t *map, uint64_t key, 
# 42 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 42 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); uint64_t map_uint64_t_uint64_t_del(Map_uint64_t_uint64_t *map, uint64_t key); void map_uint64_t_uint64_t_clear(Map_uint64_t_uint64_t *map);



typedef struct ExtmarkNs {
  Map_uint64_t_uint64_t *map;
  uint64_t free_id;
} ExtmarkNs;

typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; uint64_t *keys; ExtmarkNs *vals; } kh_uint64_t_ExtmarkNs_map_t; extern kh_uint64_t_ExtmarkNs_map_t *kh_init_uint64_t_ExtmarkNs_map(void); extern void kh_dealloc_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h); extern void kh_destroy_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h); extern void kh_clear_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h); extern khint_t kh_get_uint64_t_ExtmarkNs_map(const kh_uint64_t_ExtmarkNs_map_t *h, uint64_t key); extern void kh_resize_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h, uint64_t key, int *ret); extern void kh_del_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h, khint_t x); typedef struct { kh_uint64_t_ExtmarkNs_map_t *table; } Map_uint64_t_ExtmarkNs; Map_uint64_t_ExtmarkNs *map_uint64_t_ExtmarkNs_new(void); void map_uint64_t_ExtmarkNs_free(Map_uint64_t_ExtmarkNs *map); ExtmarkNs map_uint64_t_ExtmarkNs_get(Map_uint64_t_ExtmarkNs *map, uint64_t key); 
# 51 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 51 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_uint64_t_ExtmarkNs_has(Map_uint64_t_ExtmarkNs *map, uint64_t key); uint64_t map_uint64_t_ExtmarkNs_key(Map_uint64_t_ExtmarkNs *map, uint64_t key); ExtmarkNs map_uint64_t_ExtmarkNs_put(Map_uint64_t_ExtmarkNs *map, uint64_t key, ExtmarkNs value); ExtmarkNs *map_uint64_t_ExtmarkNs_ref(Map_uint64_t_ExtmarkNs *map, uint64_t key, 
# 51 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 51 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); ExtmarkNs map_uint64_t_ExtmarkNs_del(Map_uint64_t_ExtmarkNs *map, uint64_t key); void map_uint64_t_ExtmarkNs_clear(Map_uint64_t_ExtmarkNs *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; uint64_t *keys; ExtmarkItem *vals; } kh_uint64_t_ExtmarkItem_map_t; extern kh_uint64_t_ExtmarkItem_map_t *kh_init_uint64_t_ExtmarkItem_map(void); extern void kh_dealloc_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h); extern void kh_destroy_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h); extern void kh_clear_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h); extern khint_t kh_get_uint64_t_ExtmarkItem_map(const kh_uint64_t_ExtmarkItem_map_t *h, uint64_t key); extern void kh_resize_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h, uint64_t key, int *ret); extern void kh_del_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h, khint_t x); typedef struct { kh_uint64_t_ExtmarkItem_map_t *table; } Map_uint64_t_ExtmarkItem; Map_uint64_t_ExtmarkItem *map_uint64_t_ExtmarkItem_new(void); void map_uint64_t_ExtmarkItem_free(Map_uint64_t_ExtmarkItem *map); ExtmarkItem map_uint64_t_ExtmarkItem_get(Map_uint64_t_ExtmarkItem *map, uint64_t key); 
# 52 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 52 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_uint64_t_ExtmarkItem_has(Map_uint64_t_ExtmarkItem *map, uint64_t key); uint64_t map_uint64_t_ExtmarkItem_key(Map_uint64_t_ExtmarkItem *map, uint64_t key); ExtmarkItem map_uint64_t_ExtmarkItem_put(Map_uint64_t_ExtmarkItem *map, uint64_t key, ExtmarkItem value); ExtmarkItem *map_uint64_t_ExtmarkItem_ref(Map_uint64_t_ExtmarkItem *map, uint64_t key, 
# 52 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 52 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); ExtmarkItem map_uint64_t_ExtmarkItem_del(Map_uint64_t_ExtmarkItem *map, uint64_t key); void map_uint64_t_ExtmarkItem_clear(Map_uint64_t_ExtmarkItem *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; handle_T *keys; ptr_t *vals; } kh_handle_T_ptr_t_map_t; extern kh_handle_T_ptr_t_map_t *kh_init_handle_T_ptr_t_map(void); extern void kh_dealloc_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h); extern void kh_destroy_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h); extern void kh_clear_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h); extern khint_t kh_get_handle_T_ptr_t_map(const kh_handle_T_ptr_t_map_t *h, handle_T key); extern void kh_resize_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, handle_T key, int *ret); extern void kh_del_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, khint_t x); typedef struct { kh_handle_T_ptr_t_map_t *table; } Map_handle_T_ptr_t; Map_handle_T_ptr_t *map_handle_T_ptr_t_new(void); void map_handle_T_ptr_t_free(Map_handle_T_ptr_t *map); ptr_t map_handle_T_ptr_t_get(Map_handle_T_ptr_t *map, handle_T key); 
# 53 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 53 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_handle_T_ptr_t_has(Map_handle_T_ptr_t *map, handle_T key); handle_T map_handle_T_ptr_t_key(Map_handle_T_ptr_t *map, handle_T key); ptr_t map_handle_T_ptr_t_put(Map_handle_T_ptr_t *map, handle_T key, ptr_t value); ptr_t *map_handle_T_ptr_t_ref(Map_handle_T_ptr_t *map, handle_T key, 
# 53 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 53 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); ptr_t map_handle_T_ptr_t_del(Map_handle_T_ptr_t *map, handle_T key); void map_handle_T_ptr_t_clear(Map_handle_T_ptr_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; String *keys; MsgpackRpcRequestHandler *vals; } kh_String_MsgpackRpcRequestHandler_map_t; extern kh_String_MsgpackRpcRequestHandler_map_t *kh_init_String_MsgpackRpcRequestHandler_map(void); extern void kh_dealloc_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h); extern void kh_destroy_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h); extern void kh_clear_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h); extern khint_t kh_get_String_MsgpackRpcRequestHandler_map(const kh_String_MsgpackRpcRequestHandler_map_t *h, String key); extern void kh_resize_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, String key, int *ret); extern void kh_del_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, khint_t x); typedef struct { kh_String_MsgpackRpcRequestHandler_map_t *table; } Map_String_MsgpackRpcRequestHandler; Map_String_MsgpackRpcRequestHandler *map_String_MsgpackRpcRequestHandler_new(void); void map_String_MsgpackRpcRequestHandler_free(Map_String_MsgpackRpcRequestHandler *map); MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_get(Map_String_MsgpackRpcRequestHandler *map, String key); 
# 54 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 54 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_String_MsgpackRpcRequestHandler_has(Map_String_MsgpackRpcRequestHandler *map, String key); String map_String_MsgpackRpcRequestHandler_key(Map_String_MsgpackRpcRequestHandler *map, String key); MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_put(Map_String_MsgpackRpcRequestHandler *map, String key, MsgpackRpcRequestHandler value); MsgpackRpcRequestHandler *map_String_MsgpackRpcRequestHandler_ref(Map_String_MsgpackRpcRequestHandler *map, String key, 
# 54 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 54 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_del(Map_String_MsgpackRpcRequestHandler *map, String key); void map_String_MsgpackRpcRequestHandler_clear(Map_String_MsgpackRpcRequestHandler *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; HlEntry *keys; int *vals; } kh_HlEntry_int_map_t; extern kh_HlEntry_int_map_t *kh_init_HlEntry_int_map(void); extern void kh_dealloc_HlEntry_int_map(kh_HlEntry_int_map_t *h); extern void kh_destroy_HlEntry_int_map(kh_HlEntry_int_map_t *h); extern void kh_clear_HlEntry_int_map(kh_HlEntry_int_map_t *h); extern khint_t kh_get_HlEntry_int_map(const kh_HlEntry_int_map_t *h, HlEntry key); extern void kh_resize_HlEntry_int_map(kh_HlEntry_int_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_HlEntry_int_map(kh_HlEntry_int_map_t *h, HlEntry key, int *ret); extern void kh_del_HlEntry_int_map(kh_HlEntry_int_map_t *h, khint_t x); typedef struct { kh_HlEntry_int_map_t *table; } Map_HlEntry_int; Map_HlEntry_int *map_HlEntry_int_new(void); void map_HlEntry_int_free(Map_HlEntry_int *map); int map_HlEntry_int_get(Map_HlEntry_int *map, HlEntry key); 
# 55 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 55 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_HlEntry_int_has(Map_HlEntry_int *map, HlEntry key); HlEntry map_HlEntry_int_key(Map_HlEntry_int *map, HlEntry key); int map_HlEntry_int_put(Map_HlEntry_int *map, HlEntry key, int value); int *map_HlEntry_int_ref(Map_HlEntry_int *map, HlEntry key, 
# 55 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 55 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); int map_HlEntry_int_del(Map_HlEntry_int *map, HlEntry key); void map_HlEntry_int_clear(Map_HlEntry_int *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; String *keys; handle_T *vals; } kh_String_handle_T_map_t; extern kh_String_handle_T_map_t *kh_init_String_handle_T_map(void); extern void kh_dealloc_String_handle_T_map(kh_String_handle_T_map_t *h); extern void kh_destroy_String_handle_T_map(kh_String_handle_T_map_t *h); extern void kh_clear_String_handle_T_map(kh_String_handle_T_map_t *h); extern khint_t kh_get_String_handle_T_map(const kh_String_handle_T_map_t *h, String key); extern void kh_resize_String_handle_T_map(kh_String_handle_T_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_String_handle_T_map(kh_String_handle_T_map_t *h, String key, int *ret); extern void kh_del_String_handle_T_map(kh_String_handle_T_map_t *h, khint_t x); typedef struct { kh_String_handle_T_map_t *table; } Map_String_handle_T; Map_String_handle_T *map_String_handle_T_new(void); void map_String_handle_T_free(Map_String_handle_T *map); handle_T map_String_handle_T_get(Map_String_handle_T *map, String key); 
# 56 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 56 "/home/toto/.env/encours/neovim/src/nvim/map.h"
map_String_handle_T_has(Map_String_handle_T *map, String key); String map_String_handle_T_key(Map_String_handle_T *map, String key); handle_T map_String_handle_T_put(Map_String_handle_T *map, String key, handle_T value); handle_T *map_String_handle_T_ref(Map_String_handle_T *map, String key, 
# 56 "/home/toto/.env/encours/neovim/src/nvim/map.h" 3 4
_Bool 
# 56 "/home/toto/.env/encours/neovim/src/nvim/map.h"
put); handle_T map_String_handle_T_del(Map_String_handle_T *map, String key); void map_String_handle_T_clear(Map_String_handle_T *map);
# 86 "/home/toto/.env/encours/neovim/src/nvim/map.h"
void pmap_del2(Map_cstr_t_ptr_t *map, const char *key);
# 43 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2



# 1 "/home/toto/.env/encours/neovim/src/nvim/marktree.h" 1
# 11 "/home/toto/.env/encours/neovim/src/nvim/marktree.h"
typedef struct {
  int32_t row;
  int32_t col;
} mtpos_t;

typedef struct {
  int32_t row;
  int32_t col;
  uint64_t id;
  
# 20 "/home/toto/.env/encours/neovim/src/nvim/marktree.h" 3 4
 _Bool 
# 20 "/home/toto/.env/encours/neovim/src/nvim/marktree.h"
      right_gravity;
} mtmark_t;

typedef struct mtnode_s mtnode_t;
typedef struct {
  int oldcol;
  int i;
} iterstate_t;

typedef struct {
  mtpos_t pos;
  int lvl;
  mtnode_t *node;
  int i;
  iterstate_t s[20];
} MarkTreeIter;






typedef struct {
  mtpos_t pos;
  uint64_t id;
} mtkey_t;

struct mtnode_s {
  int32_t n;
  int32_t level;


  mtnode_t *parent;
  mtkey_t key[2 * 10 - 1];
  mtnode_t *ptr[];
};



typedef struct {
  mtnode_t *root;
  size_t n_keys, n_nodes;
  uint64_t next_id;


  Map_uint64_t_ptr_t *id2node;
} MarkTree;
# 47 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2
# 98 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct window_S win_T;
typedef struct wininfo_S wininfo_T;
typedef struct frame_S frame_T;
typedef uint16_t disptick_T;


# 1 "/home/toto/.env/encours/neovim/src/nvim/memline_defs.h" 1



# 1 "/home/toto/.env/encours/neovim/src/nvim/memfile_defs.h" 1
# 16 "/home/toto/.env/encours/neovim/src/nvim/memfile_defs.h"
typedef int64_t blocknr_T;
# 25 "/home/toto/.env/encours/neovim/src/nvim/memfile_defs.h"
typedef struct mf_hashitem {
  struct mf_hashitem *mhi_next;
  struct mf_hashitem *mhi_prev;
  blocknr_T mhi_key;
} mf_hashitem_T;
# 40 "/home/toto/.env/encours/neovim/src/nvim/memfile_defs.h"
typedef struct mf_hashtab {
  size_t mht_mask;

  size_t mht_count;
  mf_hashitem_T **mht_buckets;


  mf_hashitem_T *mht_small_buckets[64];
} mf_hashtab_T;
# 63 "/home/toto/.env/encours/neovim/src/nvim/memfile_defs.h"
typedef struct bhdr {
  mf_hashitem_T bh_hashitem;


  struct bhdr *bh_next;
  struct bhdr *bh_prev;
  void *bh_data;
  unsigned bh_page_count;



  unsigned bh_flags;
} bhdr_T;







typedef struct mf_blocknr_trans_item {
  mf_hashitem_T nt_hashitem;

  blocknr_T nt_new_bnum;
} mf_blocknr_trans_item_T;


typedef struct memfile {
  char_u *mf_fname;
  char_u *mf_ffname;
  int mf_fd;
  bhdr_T *mf_free_first;
  bhdr_T *mf_used_first;
  bhdr_T *mf_used_last;
  mf_hashtab_T mf_hash;
  mf_hashtab_T mf_trans;
  blocknr_T mf_blocknr_max;
  blocknr_T mf_blocknr_min;
  blocknr_T mf_neg_count;
  blocknr_T mf_infile_count;
  unsigned mf_page_size;
  
# 104 "/home/toto/.env/encours/neovim/src/nvim/memfile_defs.h" 3 4
 _Bool 
# 104 "/home/toto/.env/encours/neovim/src/nvim/memfile_defs.h"
      mf_dirty;
} memfile_T;
# 5 "/home/toto/.env/encours/neovim/src/nvim/memline_defs.h" 2






typedef struct info_pointer {
  blocknr_T ip_bnum;
  linenr_T ip_low;
  linenr_T ip_high;
  int ip_index;
} infoptr_T;

typedef struct ml_chunksize {
  int mlcs_numlines;
  long mlcs_totalsize;
} chunksize_T;
# 43 "/home/toto/.env/encours/neovim/src/nvim/memline_defs.h"
typedef struct memline {
  linenr_T ml_line_count;

  memfile_T *ml_mfp;





  int ml_flags;

  infoptr_T *ml_stack;
  int ml_stack_top;
  int ml_stack_size;

  linenr_T ml_line_lnum;
  char_u *ml_line_ptr;

  bhdr_T *ml_locked;
  linenr_T ml_locked_low;
  linenr_T ml_locked_high;
  int ml_locked_lineadd;
  chunksize_T *ml_chunksize;
  int ml_numchunks;
  int ml_usedchunks;
} memline_T;
# 105 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2




# 1 "/home/toto/.env/encours/neovim/src/nvim/regexp_defs.h" 1
# 45 "/home/toto/.env/encours/neovim/src/nvim/regexp_defs.h"
typedef struct regengine regengine_T;
typedef struct regprog regprog_T;
typedef struct reg_extmatch reg_extmatch_T;







typedef struct {
  regprog_T *regprog;
  lpos_T startpos[10];
  lpos_T endpos[10];
  int rmm_ic;
  colnr_T rmm_maxcol;
} regmmatch_T;
# 70 "/home/toto/.env/encours/neovim/src/nvim/regexp_defs.h"
struct regprog {
  regengine_T *engine;
  unsigned regflags;
  unsigned re_engine;
  unsigned re_flags;
};






typedef struct {

  regengine_T *engine;
  unsigned regflags;
  unsigned re_engine;
  unsigned re_flags;

  int regstart;
  char_u reganch;
  char_u *regmust;
  int regmlen;
  char_u reghasz;
  char_u program[1];
} bt_regprog_T;



typedef struct nfa_state nfa_state_T;
struct nfa_state {
  int c;
  nfa_state_T *out;
  nfa_state_T *out1;
  int id;
  int lastlist[2];
  int val;
};




typedef struct {

  regengine_T *engine;
  unsigned regflags;
  unsigned re_engine;
  unsigned re_flags;

  nfa_state_T *start;

  int reganch;
  int regstart;
  char_u *match_text;

  int has_zend;
  int has_backref;
  int reghasz;
  char_u *pattern;
  int nsubexp;
  int nstate;
  nfa_state_T state[1];
} nfa_regprog_T;






typedef struct {
  regprog_T *regprog;
  char_u *startp[10];
  char_u *endp[10];
  
# 143 "/home/toto/.env/encours/neovim/src/nvim/regexp_defs.h" 3 4
 _Bool 
# 143 "/home/toto/.env/encours/neovim/src/nvim/regexp_defs.h"
                      rm_ic;
} regmatch_T;






struct reg_extmatch {
  int16_t refcnt;
  char_u *matches[10];
};

struct regengine {
  regprog_T *(*regcomp)(char_u *, int);
  void (*regfree)(regprog_T *);
  int (*regexec_nl)(regmatch_T *, char_u *, colnr_T, 
# 159 "/home/toto/.env/encours/neovim/src/nvim/regexp_defs.h" 3 4
                                                    _Bool
# 159 "/home/toto/.env/encours/neovim/src/nvim/regexp_defs.h"
                                                        );
  long (*regexec_multi)(regmmatch_T *, win_T *, buf_T *, linenr_T, colnr_T,
                        proftime_T *, int *);
  char_u *expr;
};
# 110 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/syntax_defs.h" 1
# 12 "/home/toto/.env/encours/neovim/src/nvim/syntax_defs.h"
typedef struct syn_state synstate_T;





struct sp_syn {
  int inc_tag;
  int16_t id;
  int16_t *cont_in_list;
};




typedef struct keyentry keyentry_T;

struct keyentry {
  keyentry_T *ke_next;
  struct sp_syn k_syn;
  int16_t *next_list;
  int flags;
  int k_char;
  char_u keyword[1];
};




typedef struct buf_state {
  int bs_idx;
  int bs_flags;
  int bs_seqnr;
  int bs_cchar;
  reg_extmatch_T *bs_extmatch;
} bufstate_T;





struct syn_state {
  synstate_T *sst_next;
  linenr_T sst_lnum;
  union {
    bufstate_T sst_stack[7];
    garray_T sst_ga;
  } sst_union;
  int sst_next_flags;
  int sst_stacksize;
  int16_t *sst_next_list;

  disptick_T sst_tick;
  linenr_T sst_change_lnum;

};
# 112 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/sign_defs.h" 1
# 10 "/home/toto/.env/encours/neovim/src/nvim/sign_defs.h"
typedef struct signgroup_S
{
    uint16_t refcount;
    int next_sign_id;
    char_u sg_name[1];
} signgroup_T;





typedef struct signlist signlist_T;

struct signlist
{
    int id;
    linenr_T lnum;
    int typenr;
    signgroup_T *group;
    int priority;
    signlist_T *next;
    signlist_T *prev;
};





typedef enum {
  SIGN_ANY,
  SIGN_LINEHL,
  SIGN_ICON,
  SIGN_TEXT,
  SIGN_NUMHL,
} SignType;
# 114 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/os/fs_defs.h" 1



# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 1
# 52 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/errno.h" 1
# 53 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/version.h" 1
# 54 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 55 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 2
# 66 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 1
# 27 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4

# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 346 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 347 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 380 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4





extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    __attribute__ ((__nothrow__ , __leaf__));






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 435 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) __attribute__ ((__nothrow__ , __leaf__));





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);




# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 79 "/usr/include/fcntl.h" 2 3 4
# 147 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 167 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 181 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 213 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 249 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 261 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 271 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 293 "/usr/include/fcntl.h" 3 4

# 28 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4

# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };


struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 162 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 173 "/usr/include/dirent.h" 3 4
extern struct dirent64 *readdir64 (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 183 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));
# 201 "/usr/include/dirent.h" 3 4
extern int readdir64_r (DIR *__restrict __dirp,
   struct dirent64 *__restrict __entry,
   struct dirent64 **__restrict __result)
  __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));




extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 245 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 246 "/usr/include/dirent.h" 2 3 4
# 255 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 278 "/usr/include/dirent.h" 3 4
extern int scandir64 (const char *__restrict __dir,
        struct dirent64 ***__restrict __namelist,
        int (*__selector) (const struct dirent64 *),
        int (*__cmp) (const struct dirent64 **,
        const struct dirent64 **))
     __attribute__ ((__nonnull__ (1, 2)));
# 293 "/usr/include/dirent.h" 3 4
extern int scandirat (int __dfd, const char *__restrict __dir,
        struct dirent ***__restrict __namelist,
        int (*__selector) (const struct dirent *),
        int (*__cmp) (const struct dirent **,
        const struct dirent **))
     __attribute__ ((__nonnull__ (2, 3)));
# 315 "/usr/include/dirent.h" 3 4
extern int scandirat64 (int __dfd, const char *__restrict __dir,
   struct dirent64 ***__restrict __namelist,
   int (*__selector) (const struct dirent64 *),
   int (*__cmp) (const struct dirent64 **,
          const struct dirent64 **))
     __attribute__ ((__nonnull__ (2, 3)));




extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/dirent.h" 3 4
extern int alphasort64 (const struct dirent64 **__e1,
   const struct dirent64 **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 353 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
# 370 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
      size_t __nbytes,
      __off64_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));






extern int versionsort (const struct dirent **__e1,
   const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 396 "/usr/include/dirent.h" 3 4
extern int versionsort64 (const struct dirent64 **__e1,
     const struct dirent64 **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




# 29 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/socket.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/socket.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 172 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 173 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 188 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_BATCH = 0x40000,

    MSG_ZEROCOPY = 0x4000000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 302 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) __attribute__ ((__nothrow__ , __leaf__));
# 329 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 390 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 2 3 4
# 6 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 2 3 4
# 391 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 444 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 34 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_osockaddr.h" 1 3 4





struct osockaddr
{
  unsigned short int sa_family;
  unsigned char sa_data[14];
};
# 37 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 79 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
typedef union { struct sockaddr *__restrict __sockaddr__; struct sockaddr_at *__restrict __sockaddr_at__; struct sockaddr_ax25 *__restrict __sockaddr_ax25__; struct sockaddr_dl *__restrict __sockaddr_dl__; struct sockaddr_eon *__restrict __sockaddr_eon__; struct sockaddr_in *__restrict __sockaddr_in__; struct sockaddr_in6 *__restrict __sockaddr_in6__; struct sockaddr_inarp *__restrict __sockaddr_inarp__; struct sockaddr_ipx *__restrict __sockaddr_ipx__; struct sockaddr_iso *__restrict __sockaddr_iso__; struct sockaddr_ns *__restrict __sockaddr_ns__; struct sockaddr_un *__restrict __sockaddr_un__; struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __SOCKADDR_ARG __attribute__ ((__transparent_union__));


typedef union { const struct sockaddr *__restrict __sockaddr__; const struct sockaddr_at *__restrict __sockaddr_at__; const struct sockaddr_ax25 *__restrict __sockaddr_ax25__; const struct sockaddr_dl *__restrict __sockaddr_dl__; const struct sockaddr_eon *__restrict __sockaddr_eon__; const struct sockaddr_in *__restrict __sockaddr_in__; const struct sockaddr_in6 *__restrict __sockaddr_in6__; const struct sockaddr_inarp *__restrict __sockaddr_inarp__; const struct sockaddr_ipx *__restrict __sockaddr_ipx__; const struct sockaddr_iso *__restrict __sockaddr_iso__; const struct sockaddr_ns *__restrict __sockaddr_ns__; const struct sockaddr_un *__restrict __sockaddr_un__; const struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __CONST_SOCKADDR_ARG __attribute__ ((__transparent_union__));





struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__ , __leaf__));





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) __attribute__ ((__nothrow__ , __leaf__));


extern int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));


extern int getsockname (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));
# 126 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int connect (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);



extern int getpeername (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, __CONST_SOCKADDR_ARG __addr,
         socklen_t __addr_len);
# 163 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, __SOCKADDR_ARG __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);







extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);







extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);







extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);






extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) __attribute__ ((__nothrow__ , __leaf__));




extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) __attribute__ ((__nothrow__ , __leaf__));





extern int listen (int __fd, int __n) __attribute__ ((__nothrow__ , __leaf__));
# 232 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int accept (int __fd, __SOCKADDR_ARG __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, __SOCKADDR_ARG __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 250 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) __attribute__ ((__nothrow__ , __leaf__));




extern int sockatmark (int __fd) __attribute__ ((__nothrow__ , __leaf__));







extern int isfdtype (int __fd, int __fdtype) __attribute__ ((__nothrow__ , __leaf__));
# 272 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4

# 31 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 27 "/usr/include/netinet/in.h" 3 4



typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };


# 1 "/usr/include/x86_64-linux-gnu/bits/in.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 38 "/usr/include/netinet/in.h" 2 3 4


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_MTP = 92,

    IPPROTO_BEETPH = 94,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_MPLS = 137,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };





enum
  {
    IPPROTO_HOPOPTS = 0,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MH = 135

  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };
# 211 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];
 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];
      } __in6_u;





  };


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 237 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };



struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 374 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 386 "/usr/include/netinet/in.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 387 "/usr/include/netinet/in.h" 2 3 4
# 502 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) __attribute__ ((__nothrow__ , __leaf__));


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     __attribute__ ((__nothrow__ , __leaf__));
# 532 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;



struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    const uint8_t *__typep, int __multx,
    int __plusy) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_next (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_find (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));



extern socklen_t inet6_rth_space (int __type, int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_reverse (const void *__in, void *__out) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_segments (const void *__bp) __attribute__ ((__nothrow__ , __leaf__));
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
     __attribute__ ((__nothrow__ , __leaf__));





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    const struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       const struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));



# 32 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2
# 1 "/usr/include/netinet/tcp.h" 1 3 4
# 82 "/usr/include/netinet/tcp.h" 3 4
typedef uint32_t tcp_seq;




struct tcphdr
  {
    __extension__ union
    {
      struct
      {
 uint16_t th_sport;
 uint16_t th_dport;
 tcp_seq th_seq;
 tcp_seq th_ack;

 uint8_t th_x2:4;
 uint8_t th_off:4;





 uint8_t th_flags;






 uint16_t th_win;
 uint16_t th_sum;
 uint16_t th_urp;
      };
      struct
      {
 uint16_t source;
 uint16_t dest;
 uint32_t seq;
 uint32_t ack_seq;

 uint16_t res1:4;
 uint16_t doff:4;
 uint16_t fin:1;
 uint16_t syn:1;
 uint16_t rst:1;
 uint16_t psh:1;
 uint16_t ack:1;
 uint16_t urg:1;
 uint16_t res2:2;
# 145 "/usr/include/netinet/tcp.h" 3 4
 uint16_t window;
 uint16_t check;
 uint16_t urg_ptr;
      };
    };
};

enum
{
  TCP_ESTABLISHED = 1,
  TCP_SYN_SENT,
  TCP_SYN_RECV,
  TCP_FIN_WAIT1,
  TCP_FIN_WAIT2,
  TCP_TIME_WAIT,
  TCP_CLOSE,
  TCP_CLOSE_WAIT,
  TCP_LAST_ACK,
  TCP_LISTEN,
  TCP_CLOSING
};
# 206 "/usr/include/netinet/tcp.h" 3 4
enum tcp_ca_state
{
  TCP_CA_Open = 0,
  TCP_CA_Disorder = 1,
  TCP_CA_CWR = 2,
  TCP_CA_Recovery = 3,
  TCP_CA_Loss = 4
};

struct tcp_info
{
  uint8_t tcpi_state;
  uint8_t tcpi_ca_state;
  uint8_t tcpi_retransmits;
  uint8_t tcpi_probes;
  uint8_t tcpi_backoff;
  uint8_t tcpi_options;
  uint8_t tcpi_snd_wscale : 4, tcpi_rcv_wscale : 4;

  uint32_t tcpi_rto;
  uint32_t tcpi_ato;
  uint32_t tcpi_snd_mss;
  uint32_t tcpi_rcv_mss;

  uint32_t tcpi_unacked;
  uint32_t tcpi_sacked;
  uint32_t tcpi_lost;
  uint32_t tcpi_retrans;
  uint32_t tcpi_fackets;


  uint32_t tcpi_last_data_sent;
  uint32_t tcpi_last_ack_sent;
  uint32_t tcpi_last_data_recv;
  uint32_t tcpi_last_ack_recv;


  uint32_t tcpi_pmtu;
  uint32_t tcpi_rcv_ssthresh;
  uint32_t tcpi_rtt;
  uint32_t tcpi_rttvar;
  uint32_t tcpi_snd_ssthresh;
  uint32_t tcpi_snd_cwnd;
  uint32_t tcpi_advmss;
  uint32_t tcpi_reordering;

  uint32_t tcpi_rcv_rtt;
  uint32_t tcpi_rcv_space;

  uint32_t tcpi_total_retrans;
};
# 265 "/usr/include/netinet/tcp.h" 3 4
struct tcp_md5sig
{
  struct sockaddr_storage tcpm_addr;
  uint8_t tcpm_flags;
  uint8_t tcpm_prefixlen;
  uint16_t tcpm_keylen;
  uint32_t __tcpm_pad;
  uint8_t tcpm_key[80];
};


struct tcp_repair_opt
{
  uint32_t opt_code;
  uint32_t opt_val;
};


enum
{
  TCP_NO_QUEUE,
  TCP_RECV_QUEUE,
  TCP_SEND_QUEUE,
  TCP_QUEUES_NR,
};
# 308 "/usr/include/netinet/tcp.h" 3 4
struct tcp_cookie_transactions
{
  uint16_t tcpct_flags;
  uint8_t __tcpct_pad1;
  uint8_t tcpct_cookie_desired;
  uint16_t tcpct_s_data_desired;
  uint16_t tcpct_used;
  uint8_t tcpct_value[536U];
};


struct tcp_repair_window
{
  uint32_t snd_wl1;
  uint32_t snd_wnd;
  uint32_t max_window;
  uint32_t rcv_wnd;
  uint32_t rcv_wup;
};
# 33 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2
# 1 "/usr/include/arpa/inet.h" 1 3 4
# 30 "/usr/include/arpa/inet.h" 3 4




extern in_addr_t inet_addr (const char *__cp) __attribute__ ((__nothrow__ , __leaf__));


extern in_addr_t inet_lnaof (struct in_addr __in) __attribute__ ((__nothrow__ , __leaf__));



extern struct in_addr inet_makeaddr (in_addr_t __net, in_addr_t __host)
     __attribute__ ((__nothrow__ , __leaf__));


extern in_addr_t inet_netof (struct in_addr __in) __attribute__ ((__nothrow__ , __leaf__));



extern in_addr_t inet_network (const char *__cp) __attribute__ ((__nothrow__ , __leaf__));



extern char *inet_ntoa (struct in_addr __in) __attribute__ ((__nothrow__ , __leaf__));




extern int inet_pton (int __af, const char *__restrict __cp,
        void *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern const char *inet_ntop (int __af, const void *__restrict __cp,
         char *__restrict __buf, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));






extern int inet_aton (const char *__cp, struct in_addr *__inp) __attribute__ ((__nothrow__ , __leaf__));



extern char *inet_neta (in_addr_t __net, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern char *inet_net_ntop (int __af, const void *__cp, int __bits,
       char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern int inet_net_pton (int __af, const char *__cp,
     void *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern unsigned int inet_nsap_addr (const char *__cp,
        unsigned char *__buf, int __len) __attribute__ ((__nothrow__ , __leaf__));



extern char *inet_nsap_ntoa (int __len, const unsigned char *__cp,
        char *__buf) __attribute__ ((__nothrow__ , __leaf__));



# 34 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2
# 1 "/usr/include/netdb.h" 1 3 4
# 32 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4



struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) __attribute__ ((__nothrow__ , __leaf__));
extern void endrpcent (void) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcbyname (const char *__name) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcbynumber (int __number) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcent (void) __attribute__ ((__nothrow__ , __leaf__));


extern int getrpcbyname_r (const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));



# 33 "/usr/include/netdb.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 41 "/usr/include/netdb.h" 2 3 4
# 51 "/usr/include/netdb.h" 3 4








extern int *__h_errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 90 "/usr/include/netdb.h" 3 4
extern void herror (const char *__str) __attribute__ ((__nothrow__ , __leaf__));


extern const char *hstrerror (int __err_num) __attribute__ ((__nothrow__ , __leaf__));




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (const char *__name);
# 153 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (const char *__name, int __af);
# 165 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 196 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (const char *__name);
# 235 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (const char *__name, const char *__proto);






extern struct servent *getservbyport (int __port, const char *__proto);
# 306 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (const char *__restrict __name,
       const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 372 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 393 "/usr/include/netdb.h" 3 4
extern int setnetgrent (const char *__netgroup);







extern void endnetgrent (void);
# 410 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 421 "/usr/include/netdb.h" 3 4
extern int innetgr (const char *__netgroup, const char *__host,
      const char *__user, const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 449 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   const char *__restrict __locuser,
   const char *__restrict __remuser,
   const char *__restrict __cmd, int *__restrict __fd2p);
# 461 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      const char *__restrict __locuser,
      const char *__restrict __remuser,
      const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 477 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    const char *__restrict __name,
    const char *__restrict __pass,
    const char *__restrict __cmd, int *__restrict __fd2p);
# 489 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       const char *__restrict __name,
       const char *__restrict __pass,
       const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 503 "/usr/include/netdb.h" 3 4
extern int ruserok (const char *__rhost, int __suser,
      const char *__remuser, const char *__locuser);
# 513 "/usr/include/netdb.h" 3 4
extern int ruserok_af (const char *__rhost, int __suser,
         const char *__remuser, const char *__locuser,
         sa_family_t __af);
# 526 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       const char *__remuser, const char *__locuser);
# 537 "/usr/include/netdb.h" 3 4
extern int iruserok_af (const void *__raddr, int __suser,
   const char *__remuser, const char *__locuser,
   sa_family_t __af);
# 549 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 558 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __glibc_reserved[5];
};
# 660 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (const char *__restrict __name,
   const char *__restrict __service,
   const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) __attribute__ ((__nothrow__ , __leaf__));


extern const char *gai_strerror (int __ecode) __attribute__ ((__nothrow__ , __leaf__));





extern int getnameinfo (const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, int __flags);
# 690 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[__restrict],
     int __ent, struct sigevent *__restrict __sig);
# 701 "/usr/include/netdb.h" 3 4
extern int gai_suspend (const struct gaicb *const __list[], int __ent,
   const struct timespec *__timeout);


extern int gai_error (struct gaicb *__req) __attribute__ ((__nothrow__ , __leaf__));


extern int gai_cancel (struct gaicb *__gaicbp) __attribute__ ((__nothrow__ , __leaf__));



# 35 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2

# 1 "/usr/include/termios.h" 1 3 4
# 35 "/usr/include/termios.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/termios.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/termios.h" 3 4
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef unsigned int tcflag_t;


struct termios
  {
    tcflag_t c_iflag;
    tcflag_t c_oflag;
    tcflag_t c_cflag;
    tcflag_t c_lflag;
    cc_t c_line;
    cc_t c_cc[32];
    speed_t c_ispeed;
    speed_t c_ospeed;


  };
# 40 "/usr/include/termios.h" 2 3 4
# 48 "/usr/include/termios.h" 3 4
extern speed_t cfgetospeed (const struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));


extern speed_t cfgetispeed (const struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));


extern int cfsetospeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__ , __leaf__));


extern int cfsetispeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__ , __leaf__));



extern int cfsetspeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__ , __leaf__));




extern int tcgetattr (int __fd, struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));



extern int tcsetattr (int __fd, int __optional_actions,
        const struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));




extern void cfmakeraw (struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));



extern int tcsendbreak (int __fd, int __duration) __attribute__ ((__nothrow__ , __leaf__));





extern int tcdrain (int __fd);



extern int tcflush (int __fd, int __queue_selector) __attribute__ ((__nothrow__ , __leaf__));



extern int tcflow (int __fd, int __action) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t tcgetsid (int __fd) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/x86_64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 105 "/usr/include/termios.h" 2 3 4



# 37 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2
# 1 "/usr/include/pwd.h" 1 3 4
# 27 "/usr/include/pwd.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 33 "/usr/include/pwd.h" 2 3 4
# 49 "/usr/include/pwd.h" 3 4
struct passwd
{
  char *pw_name;
  char *pw_passwd;
  __uid_t pw_uid;
  __gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
};
# 71 "/usr/include/pwd.h" 3 4
extern void setpwent (void);





extern void endpwent (void);





extern struct passwd *getpwent (void);
# 93 "/usr/include/pwd.h" 3 4
extern struct passwd *fgetpwent (FILE *__stream) __attribute__ ((__nonnull__ (1)));







extern int putpwent (const struct passwd *__restrict __p,
       FILE *__restrict __f);






extern struct passwd *getpwuid (__uid_t __uid);





extern struct passwd *getpwnam (const char *__name) __attribute__ ((__nonnull__ (1)));
# 138 "/usr/include/pwd.h" 3 4
extern int getpwent_r (struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 4)));


extern int getpwuid_r (__uid_t __uid,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (2, 3, 5)));

extern int getpwnam_r (const char *__restrict __name,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 165 "/usr/include/pwd.h" 3 4
extern int fgetpwent_r (FILE *__restrict __stream,
   struct passwd *__restrict __resultbuf,
   char *__restrict __buffer, size_t __buflen,
   struct passwd **__restrict __result)
   __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 183 "/usr/include/pwd.h" 3 4
extern int getpw (__uid_t __uid, char *__buffer);



# 38 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2


# 1 "/usr/include/semaphore.h" 1 3 4
# 28 "/usr/include/semaphore.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 3 4
typedef union
{
  char __size[32];
  long int __align;
} sem_t;
# 29 "/usr/include/semaphore.h" 2 3 4






extern int sem_init (sem_t *__sem, int __pshared, unsigned int __value)
     __attribute__ ((__nothrow__ , __leaf__));

extern int sem_destroy (sem_t *__sem) __attribute__ ((__nothrow__ , __leaf__));


extern sem_t *sem_open (const char *__name, int __oflag, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int sem_close (sem_t *__sem) __attribute__ ((__nothrow__ , __leaf__));


extern int sem_unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__));





extern int sem_wait (sem_t *__sem);






extern int sem_timedwait (sem_t *__restrict __sem,
     const struct timespec *__restrict __abstime);



extern int sem_trywait (sem_t *__sem) __attribute__ ((__nothrow__));


extern int sem_post (sem_t *__sem) __attribute__ ((__nothrow__));


extern int sem_getvalue (sem_t *__restrict __sem, int *__restrict __sval)
     __attribute__ ((__nothrow__ , __leaf__));



# 41 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2


# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
{
  int sched_priority;
};





extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int unshare (int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getcpu (void) __attribute__ ((__nothrow__ , __leaf__));


extern int setns (int __fd, int __nstype) __attribute__ ((__nothrow__ , __leaf__));



# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));



# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 156 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 191 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 229 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setconcurrency (int __level) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_yield (void) __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 495 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 507 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 541 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 681 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 693 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 716 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     ;
# 729 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 807 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 889 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1001 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1045 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1112 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1146 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
# 1160 "/usr/include/pthread.h" 3 4

# 44 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/threadpool.h" 1
# 30 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/threadpool.h"

# 30 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/threadpool.h"
struct uv__work {
  void (*work)(struct uv__work *w);
  void (*done)(struct uv__work *w, int status);
  struct uv_loop_s* loop;
  void* wq[2];
};
# 47 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/linux.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h" 2
# 86 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h"
struct uv__io_s;
struct uv_loop_s;

typedef void (*uv__io_cb)(struct uv_loop_s* loop,
                          struct uv__io_s* w,
                          unsigned int events);
typedef struct uv__io_s uv__io_t;

struct uv__io_s {
  uv__io_cb cb;
  void* pending_queue[2];
  void* watcher_queue[2];
  unsigned int pevents;
  unsigned int events;
  int fd;
 
};
# 121 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h"
typedef struct uv_buf_t {
  char* base;
  size_t len;
} uv_buf_t;

typedef int uv_file;
typedef int uv_os_sock_t;
typedef int uv_os_fd_t;
typedef pid_t uv_pid_t;



typedef pthread_once_t uv_once_t;
typedef pthread_t uv_thread_t;
typedef pthread_mutex_t uv_mutex_t;
typedef pthread_rwlock_t uv_rwlock_t;
typedef sem_t uv_sem_t;
typedef pthread_cond_t uv_cond_t;
typedef pthread_key_t uv_key_t;
# 162 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h"
typedef pthread_barrier_t uv_barrier_t;



typedef gid_t uv_gid_t;
typedef uid_t uv_uid_t;

typedef struct dirent uv__dirent_t;
# 216 "/home/toto/.env/encours/neovim/.deps/usr/include/uv/unix.h"
typedef struct {
  void* handle;
  char* errmsg;
} uv_lib_t;
# 67 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 2
# 182 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
typedef enum {

  UV_E2BIG = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 7
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EACCES = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 13
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EADDRINUSE = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 98
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EADDRNOTAVAIL = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 99
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EAFNOSUPPORT = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 97
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EAGAIN = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 11
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EAI_ADDRFAMILY = (-3000), UV_EAI_AGAIN = (-3001), UV_EAI_BADFLAGS = (-3002), UV_EAI_BADHINTS = (-3013), UV_EAI_CANCELED = (-3003), UV_EAI_FAIL = (-3004), UV_EAI_FAMILY = (-3005), UV_EAI_MEMORY = (-3006), UV_EAI_NODATA = (-3007), UV_EAI_NONAME = (-3008), UV_EAI_OVERFLOW = (-3009), UV_EAI_PROTOCOL = (-3014), UV_EAI_SERVICE = (-3010), UV_EAI_SOCKTYPE = (-3011), UV_EALREADY = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 114
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EBADF = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 9
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EBUSY = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 16
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ECANCELED = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 125
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ECHARSET = (-4080), UV_ECONNABORTED = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 103
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ECONNREFUSED = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 111
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ECONNRESET = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 104
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EDESTADDRREQ = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 89
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EEXIST = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 17
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EFAULT = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 14
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EFBIG = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 27
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EHOSTUNREACH = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 113
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EINTR = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 4
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EINVAL = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 22
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EIO = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 5
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EISCONN = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 106
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EISDIR = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 21
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ELOOP = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 40
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EMFILE = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 24
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EMSGSIZE = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 90
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENAMETOOLONG = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 36
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENETDOWN = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 100
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENETUNREACH = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 101
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENFILE = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 23
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOBUFS = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 105
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENODEV = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 19
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOENT = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 2
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOMEM = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 12
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENONET = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 64
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOPROTOOPT = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 92
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOSPC = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 28
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOSYS = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 38
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOTCONN = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 107
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOTDIR = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 20
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOTEMPTY = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 39
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOTSOCK = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 88
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOTSUP = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 95
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EPERM = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 1
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EPIPE = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 32
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EPROTO = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 71
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EPROTONOSUPPORT = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 93
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EPROTOTYPE = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 91
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ERANGE = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 34
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EROFS = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 30
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ESHUTDOWN = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 108
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ESPIPE = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 29
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ESRCH = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 3
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ETIMEDOUT = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 110
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ETXTBSY = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 26
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EXDEV = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 18
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_UNKNOWN = (-4094), UV_EOF = (-4095), UV_ENXIO = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 6
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EMLINK = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 31
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EHOSTDOWN = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 112
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EREMOTEIO = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 121
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_ENOTTY = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 25
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )), UV_EFTYPE = (-4028), UV_EILSEQ = (-(
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 84
# 184 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 )),

  UV_ERRNO_MAX = (-4095) - 1
} uv_errno_t;

typedef enum {
  UV_UNKNOWN_HANDLE = 0,

  UV_ASYNC, UV_CHECK, UV_FS_EVENT, UV_FS_POLL, UV_HANDLE, UV_IDLE, UV_NAMED_PIPE, UV_POLL, UV_PREPARE, UV_PROCESS, UV_STREAM, UV_TCP, UV_TIMER, UV_TTY, UV_UDP, UV_SIGNAL,

  UV_FILE,
  UV_HANDLE_TYPE_MAX
} uv_handle_type;

typedef enum {
  UV_UNKNOWN_REQ = 0,

  UV_REQ, UV_CONNECT, UV_WRITE, UV_SHUTDOWN, UV_UDP_SEND, UV_FS, UV_WORK, UV_GETADDRINFO, UV_GETNAMEINFO, UV_RANDOM,

 
  UV_REQ_TYPE_MAX
} uv_req_type;



typedef struct uv_loop_s uv_loop_t;
typedef struct uv_handle_s uv_handle_t;
typedef struct uv_dir_s uv_dir_t;
typedef struct uv_stream_s uv_stream_t;
typedef struct uv_tcp_s uv_tcp_t;
typedef struct uv_udp_s uv_udp_t;
typedef struct uv_pipe_s uv_pipe_t;
typedef struct uv_tty_s uv_tty_t;
typedef struct uv_poll_s uv_poll_t;
typedef struct uv_timer_s uv_timer_t;
typedef struct uv_prepare_s uv_prepare_t;
typedef struct uv_check_s uv_check_t;
typedef struct uv_idle_s uv_idle_t;
typedef struct uv_async_s uv_async_t;
typedef struct uv_process_s uv_process_t;
typedef struct uv_fs_event_s uv_fs_event_t;
typedef struct uv_fs_poll_s uv_fs_poll_t;
typedef struct uv_signal_s uv_signal_t;


typedef struct uv_req_s uv_req_t;
typedef struct uv_getaddrinfo_s uv_getaddrinfo_t;
typedef struct uv_getnameinfo_s uv_getnameinfo_t;
typedef struct uv_shutdown_s uv_shutdown_t;
typedef struct uv_write_s uv_write_t;
typedef struct uv_connect_s uv_connect_t;
typedef struct uv_udp_send_s uv_udp_send_t;
typedef struct uv_fs_s uv_fs_t;
typedef struct uv_work_s uv_work_t;
typedef struct uv_random_s uv_random_t;


typedef struct uv_env_item_s uv_env_item_t;
typedef struct uv_cpu_info_s uv_cpu_info_t;
typedef struct uv_interface_address_s uv_interface_address_t;
typedef struct uv_dirent_s uv_dirent_t;
typedef struct uv_passwd_s uv_passwd_t;
typedef struct uv_utsname_s uv_utsname_t;
typedef struct uv_statfs_s uv_statfs_t;

typedef enum {
  UV_LOOP_BLOCK_SIGNAL
} uv_loop_option;

typedef enum {
  UV_RUN_DEFAULT = 0,
  UV_RUN_ONCE,
  UV_RUN_NOWAIT
} uv_run_mode;


__attribute__((visibility("default"))) unsigned int uv_version(void);
__attribute__((visibility("default"))) const char* uv_version_string(void);

typedef void* (*uv_malloc_func)(size_t size);
typedef void* (*uv_realloc_func)(void* ptr, size_t size);
typedef void* (*uv_calloc_func)(size_t count, size_t size);
typedef void (*uv_free_func)(void* ptr);

__attribute__((visibility("default"))) int uv_replace_allocator(uv_malloc_func malloc_func,
                                   uv_realloc_func realloc_func,
                                   uv_calloc_func calloc_func,
                                   uv_free_func free_func);

__attribute__((visibility("default"))) uv_loop_t* uv_default_loop(void);
__attribute__((visibility("default"))) int uv_loop_init(uv_loop_t* loop);
__attribute__((visibility("default"))) int uv_loop_close(uv_loop_t* loop);





__attribute__((visibility("default"))) uv_loop_t* uv_loop_new(void);





__attribute__((visibility("default"))) void uv_loop_delete(uv_loop_t*);
__attribute__((visibility("default"))) size_t uv_loop_size(void);
__attribute__((visibility("default"))) int uv_loop_alive(const uv_loop_t* loop);
__attribute__((visibility("default"))) int uv_loop_configure(uv_loop_t* loop, uv_loop_option option, ...);
__attribute__((visibility("default"))) int uv_loop_fork(uv_loop_t* loop);

__attribute__((visibility("default"))) int uv_run(uv_loop_t*, uv_run_mode mode);
__attribute__((visibility("default"))) void uv_stop(uv_loop_t*);

__attribute__((visibility("default"))) void uv_ref(uv_handle_t*);
__attribute__((visibility("default"))) void uv_unref(uv_handle_t*);
__attribute__((visibility("default"))) int uv_has_ref(const uv_handle_t*);

__attribute__((visibility("default"))) void uv_update_time(uv_loop_t*);
__attribute__((visibility("default"))) uint64_t uv_now(const uv_loop_t*);

__attribute__((visibility("default"))) int uv_backend_fd(const uv_loop_t*);
__attribute__((visibility("default"))) int uv_backend_timeout(const uv_loop_t*);

typedef void (*uv_alloc_cb)(uv_handle_t* handle,
                            size_t suggested_size,
                            uv_buf_t* buf);
typedef void (*uv_read_cb)(uv_stream_t* stream,
                           ssize_t nread,
                           const uv_buf_t* buf);
typedef void (*uv_write_cb)(uv_write_t* req, int status);
typedef void (*uv_connect_cb)(uv_connect_t* req, int status);
typedef void (*uv_shutdown_cb)(uv_shutdown_t* req, int status);
typedef void (*uv_connection_cb)(uv_stream_t* server, int status);
typedef void (*uv_close_cb)(uv_handle_t* handle);
typedef void (*uv_poll_cb)(uv_poll_t* handle, int status, int events);
typedef void (*uv_timer_cb)(uv_timer_t* handle);
typedef void (*uv_async_cb)(uv_async_t* handle);
typedef void (*uv_prepare_cb)(uv_prepare_t* handle);
typedef void (*uv_check_cb)(uv_check_t* handle);
typedef void (*uv_idle_cb)(uv_idle_t* handle);
typedef void (*uv_exit_cb)(uv_process_t*, int64_t exit_status, int term_signal);
typedef void (*uv_walk_cb)(uv_handle_t* handle, void* arg);
typedef void (*uv_fs_cb)(uv_fs_t* req);
typedef void (*uv_work_cb)(uv_work_t* req);
typedef void (*uv_after_work_cb)(uv_work_t* req, int status);
typedef void (*uv_getaddrinfo_cb)(uv_getaddrinfo_t* req,
                                  int status,
                                  struct addrinfo* res);
typedef void (*uv_getnameinfo_cb)(uv_getnameinfo_t* req,
                                  int status,
                                  const char* hostname,
                                  const char* service);
typedef void (*uv_random_cb)(uv_random_t* req,
                             int status,
                             void* buf,
                             size_t buflen);

typedef struct {
  long tv_sec;
  long tv_nsec;
} uv_timespec_t;


typedef struct {
  uint64_t st_dev;
  uint64_t st_mode;
  uint64_t st_nlink;
  uint64_t st_uid;
  uint64_t st_gid;
  uint64_t st_rdev;
  uint64_t st_ino;
  uint64_t st_size;
  uint64_t st_blksize;
  uint64_t st_blocks;
  uint64_t st_flags;
  uint64_t st_gen;
  uv_timespec_t st_atim;
  uv_timespec_t st_mtim;
  uv_timespec_t st_ctim;
  uv_timespec_t st_birthtim;
} uv_stat_t;


typedef void (*uv_fs_event_cb)(uv_fs_event_t* handle,
                               const char* filename,
                               int events,
                               int status);

typedef void (*uv_fs_poll_cb)(uv_fs_poll_t* handle,
                              int status,
                              const uv_stat_t* prev,
                              const uv_stat_t* curr);

typedef void (*uv_signal_cb)(uv_signal_t* handle, int signum);


typedef enum {
  UV_LEAVE_GROUP = 0,
  UV_JOIN_GROUP
} uv_membership;


__attribute__((visibility("default"))) int uv_translate_sys_error(int sys_errno);

__attribute__((visibility("default"))) const char* uv_strerror(int err);
__attribute__((visibility("default"))) char* uv_strerror_r(int err, char* buf, size_t buflen);

__attribute__((visibility("default"))) const char* uv_err_name(int err);
__attribute__((visibility("default"))) char* uv_err_name_r(int err, char* buf, size_t buflen);
# 404 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
struct uv_req_s {
  void* data; uv_req_type type; void* reserved[6];
};






__attribute__((visibility("default"))) int uv_shutdown(uv_shutdown_t* req,
                          uv_stream_t* handle,
                          uv_shutdown_cb cb);

struct uv_shutdown_s {
  void* data; uv_req_type type; void* reserved[6];
  uv_stream_t* handle;
  uv_shutdown_cb cb;
 
};
# 441 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
struct uv_handle_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
};

__attribute__((visibility("default"))) size_t uv_handle_size(uv_handle_type type);
__attribute__((visibility("default"))) uv_handle_type uv_handle_get_type(const uv_handle_t* handle);
__attribute__((visibility("default"))) const char* uv_handle_type_name(uv_handle_type type);
__attribute__((visibility("default"))) void* uv_handle_get_data(const uv_handle_t* handle);
__attribute__((visibility("default"))) uv_loop_t* uv_handle_get_loop(const uv_handle_t* handle);
__attribute__((visibility("default"))) void uv_handle_set_data(uv_handle_t* handle, void* data);

__attribute__((visibility("default"))) size_t uv_req_size(uv_req_type type);
__attribute__((visibility("default"))) void* uv_req_get_data(const uv_req_t* req);
__attribute__((visibility("default"))) void uv_req_set_data(uv_req_t* req, void* data);
__attribute__((visibility("default"))) uv_req_type uv_req_get_type(const uv_req_t* req);
__attribute__((visibility("default"))) const char* uv_req_type_name(uv_req_type type);

__attribute__((visibility("default"))) int uv_is_active(const uv_handle_t* handle);

__attribute__((visibility("default"))) void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg);


__attribute__((visibility("default"))) void uv_print_all_handles(uv_loop_t* loop, FILE* stream);
__attribute__((visibility("default"))) void uv_print_active_handles(uv_loop_t* loop, FILE* stream);

__attribute__((visibility("default"))) void uv_close(uv_handle_t* handle, uv_close_cb close_cb);

__attribute__((visibility("default"))) int uv_send_buffer_size(uv_handle_t* handle, int* value);
__attribute__((visibility("default"))) int uv_recv_buffer_size(uv_handle_t* handle, int* value);

__attribute__((visibility("default"))) int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd);

__attribute__((visibility("default"))) uv_buf_t uv_buf_init(char* base, unsigned int len);
# 491 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
struct uv_stream_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  size_t write_queue_size; uv_alloc_cb alloc_cb; uv_read_cb read_cb; uv_connect_t *connect_req; uv_shutdown_t *shutdown_req; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2]; uv_connection_cb connection_cb; int delayed_error; int accepted_fd; void* queued_fds;
};

__attribute__((visibility("default"))) size_t uv_stream_get_write_queue_size(const uv_stream_t* stream);

__attribute__((visibility("default"))) int uv_listen(uv_stream_t* stream, int backlog, uv_connection_cb cb);
__attribute__((visibility("default"))) int uv_accept(uv_stream_t* server, uv_stream_t* client);

__attribute__((visibility("default"))) int uv_read_start(uv_stream_t*,
                            uv_alloc_cb alloc_cb,
                            uv_read_cb read_cb);
__attribute__((visibility("default"))) int uv_read_stop(uv_stream_t*);

__attribute__((visibility("default"))) int uv_write(uv_write_t* req,
                       uv_stream_t* handle,
                       const uv_buf_t bufs[],
                       unsigned int nbufs,
                       uv_write_cb cb);
__attribute__((visibility("default"))) int uv_write2(uv_write_t* req,
                        uv_stream_t* handle,
                        const uv_buf_t bufs[],
                        unsigned int nbufs,
                        uv_stream_t* send_handle,
                        uv_write_cb cb);
__attribute__((visibility("default"))) int uv_try_write(uv_stream_t* handle,
                           const uv_buf_t bufs[],
                           unsigned int nbufs);


struct uv_write_s {
  void* data; uv_req_type type; void* reserved[6];
  uv_write_cb cb;
  uv_stream_t* send_handle;
  uv_stream_t* handle;
  void* queue[2]; unsigned int write_index; uv_buf_t* bufs; unsigned int nbufs; int error; uv_buf_t bufsml[4];
};


__attribute__((visibility("default"))) int uv_is_readable(const uv_stream_t* handle);
__attribute__((visibility("default"))) int uv_is_writable(const uv_stream_t* handle);

__attribute__((visibility("default"))) int uv_stream_set_blocking(uv_stream_t* handle, int blocking);

__attribute__((visibility("default"))) int uv_is_closing(const uv_handle_t* handle);







struct uv_tcp_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  size_t write_queue_size; uv_alloc_cb alloc_cb; uv_read_cb read_cb; uv_connect_t *connect_req; uv_shutdown_t *shutdown_req; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2]; uv_connection_cb connection_cb; int delayed_error; int accepted_fd; void* queued_fds;
 
};

__attribute__((visibility("default"))) int uv_tcp_init(uv_loop_t*, uv_tcp_t* handle);
__attribute__((visibility("default"))) int uv_tcp_init_ex(uv_loop_t*, uv_tcp_t* handle, unsigned int flags);
__attribute__((visibility("default"))) int uv_tcp_open(uv_tcp_t* handle, uv_os_sock_t sock);
__attribute__((visibility("default"))) int uv_tcp_nodelay(uv_tcp_t* handle, int enable);
__attribute__((visibility("default"))) int uv_tcp_keepalive(uv_tcp_t* handle,
                               int enable,
                               unsigned int delay);
__attribute__((visibility("default"))) int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);

enum uv_tcp_flags {

  UV_TCP_IPV6ONLY = 1
};

__attribute__((visibility("default"))) int uv_tcp_bind(uv_tcp_t* handle,
                          const struct sockaddr* addr,
                          unsigned int flags);
__attribute__((visibility("default"))) int uv_tcp_getsockname(const uv_tcp_t* handle,
                                 struct sockaddr* name,
                                 int* namelen);
__attribute__((visibility("default"))) int uv_tcp_getpeername(const uv_tcp_t* handle,
                                 struct sockaddr* name,
                                 int* namelen);
__attribute__((visibility("default"))) int uv_tcp_close_reset(uv_tcp_t* handle, uv_close_cb close_cb);
__attribute__((visibility("default"))) int uv_tcp_connect(uv_connect_t* req,
                             uv_tcp_t* handle,
                             const struct sockaddr* addr,
                             uv_connect_cb cb);


struct uv_connect_s {
  void* data; uv_req_type type; void* reserved[6];
  uv_connect_cb cb;
  uv_stream_t* handle;
  void* queue[2];
};






enum uv_udp_flags {

  UV_UDP_IPV6ONLY = 1,




  UV_UDP_PARTIAL = 2,
# 608 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
  UV_UDP_REUSEADDR = 4
};

typedef void (*uv_udp_send_cb)(uv_udp_send_t* req, int status);
typedef void (*uv_udp_recv_cb)(uv_udp_t* handle,
                               ssize_t nread,
                               const uv_buf_t* buf,
                               const struct sockaddr* addr,
                               unsigned flags);


struct uv_udp_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;





  size_t send_queue_size;



  size_t send_queue_count;
  uv_alloc_cb alloc_cb; uv_udp_recv_cb recv_cb; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2];
};


struct uv_udp_send_s {
  void* data; uv_req_type type; void* reserved[6];
  uv_udp_t* handle;
  uv_udp_send_cb cb;
  void* queue[2]; struct sockaddr_storage addr; unsigned int nbufs; uv_buf_t* bufs; ssize_t status; uv_udp_send_cb send_cb; uv_buf_t bufsml[4];
};

__attribute__((visibility("default"))) int uv_udp_init(uv_loop_t*, uv_udp_t* handle);
__attribute__((visibility("default"))) int uv_udp_init_ex(uv_loop_t*, uv_udp_t* handle, unsigned int flags);
__attribute__((visibility("default"))) int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock);
__attribute__((visibility("default"))) int uv_udp_bind(uv_udp_t* handle,
                          const struct sockaddr* addr,
                          unsigned int flags);
__attribute__((visibility("default"))) int uv_udp_connect(uv_udp_t* handle, const struct sockaddr* addr);

__attribute__((visibility("default"))) int uv_udp_getpeername(const uv_udp_t* handle,
                                 struct sockaddr* name,
                                 int* namelen);
__attribute__((visibility("default"))) int uv_udp_getsockname(const uv_udp_t* handle,
                                 struct sockaddr* name,
                                 int* namelen);
__attribute__((visibility("default"))) int uv_udp_set_membership(uv_udp_t* handle,
                                    const char* multicast_addr,
                                    const char* interface_addr,
                                    uv_membership membership);
__attribute__((visibility("default"))) int uv_udp_set_source_membership(uv_udp_t* handle,
                                           const char* multicast_addr,
                                           const char* interface_addr,
                                           const char* source_addr,
                                           uv_membership membership);
__attribute__((visibility("default"))) int uv_udp_set_multicast_loop(uv_udp_t* handle, int on);
__attribute__((visibility("default"))) int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);
__attribute__((visibility("default"))) int uv_udp_set_multicast_interface(uv_udp_t* handle,
                                             const char* interface_addr);
__attribute__((visibility("default"))) int uv_udp_set_broadcast(uv_udp_t* handle, int on);
__attribute__((visibility("default"))) int uv_udp_set_ttl(uv_udp_t* handle, int ttl);
__attribute__((visibility("default"))) int uv_udp_send(uv_udp_send_t* req,
                          uv_udp_t* handle,
                          const uv_buf_t bufs[],
                          unsigned int nbufs,
                          const struct sockaddr* addr,
                          uv_udp_send_cb send_cb);
__attribute__((visibility("default"))) int uv_udp_try_send(uv_udp_t* handle,
                              const uv_buf_t bufs[],
                              unsigned int nbufs,
                              const struct sockaddr* addr);
__attribute__((visibility("default"))) int uv_udp_recv_start(uv_udp_t* handle,
                                uv_alloc_cb alloc_cb,
                                uv_udp_recv_cb recv_cb);
__attribute__((visibility("default"))) int uv_udp_recv_stop(uv_udp_t* handle);
__attribute__((visibility("default"))) size_t uv_udp_get_send_queue_size(const uv_udp_t* handle);
__attribute__((visibility("default"))) size_t uv_udp_get_send_queue_count(const uv_udp_t* handle);







struct uv_tty_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  size_t write_queue_size; uv_alloc_cb alloc_cb; uv_read_cb read_cb; uv_connect_t *connect_req; uv_shutdown_t *shutdown_req; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2]; uv_connection_cb connection_cb; int delayed_error; int accepted_fd; void* queued_fds;
  struct termios orig_termios; int mode;
};

typedef enum {

  UV_TTY_MODE_NORMAL,

  UV_TTY_MODE_RAW,

  UV_TTY_MODE_IO
} uv_tty_mode_t;

typedef enum {




  UV_TTY_SUPPORTED,



  UV_TTY_UNSUPPORTED
} uv_tty_vtermstate_t;


__attribute__((visibility("default"))) int uv_tty_init(uv_loop_t*, uv_tty_t*, uv_file fd, int readable);
__attribute__((visibility("default"))) int uv_tty_set_mode(uv_tty_t*, uv_tty_mode_t mode);
__attribute__((visibility("default"))) int uv_tty_reset_mode(void);
__attribute__((visibility("default"))) int uv_tty_get_winsize(uv_tty_t*, int* width, int* height);
__attribute__((visibility("default"))) void uv_tty_set_vterm_state(uv_tty_vtermstate_t state);
__attribute__((visibility("default"))) int uv_tty_get_vterm_state(uv_tty_vtermstate_t* state);
# 739 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
__attribute__((visibility("default"))) uv_handle_type uv_guess_handle(uv_file file);







struct uv_pipe_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  size_t write_queue_size; uv_alloc_cb alloc_cb; uv_read_cb read_cb; uv_connect_t *connect_req; uv_shutdown_t *shutdown_req; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2]; uv_connection_cb connection_cb; int delayed_error; int accepted_fd; void* queued_fds;
  int ipc;
  const char* pipe_fname;
};

__attribute__((visibility("default"))) int uv_pipe_init(uv_loop_t*, uv_pipe_t* handle, int ipc);
__attribute__((visibility("default"))) int uv_pipe_open(uv_pipe_t*, uv_file file);
__attribute__((visibility("default"))) int uv_pipe_bind(uv_pipe_t* handle, const char* name);
__attribute__((visibility("default"))) void uv_pipe_connect(uv_connect_t* req,
                               uv_pipe_t* handle,
                               const char* name,
                               uv_connect_cb cb);
__attribute__((visibility("default"))) int uv_pipe_getsockname(const uv_pipe_t* handle,
                                  char* buffer,
                                  size_t* size);
__attribute__((visibility("default"))) int uv_pipe_getpeername(const uv_pipe_t* handle,
                                  char* buffer,
                                  size_t* size);
__attribute__((visibility("default"))) void uv_pipe_pending_instances(uv_pipe_t* handle, int count);
__attribute__((visibility("default"))) int uv_pipe_pending_count(uv_pipe_t* handle);
__attribute__((visibility("default"))) uv_handle_type uv_pipe_pending_type(uv_pipe_t* handle);
__attribute__((visibility("default"))) int uv_pipe_chmod(uv_pipe_t* handle, int flags);


struct uv_poll_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_poll_cb poll_cb;
  uv__io_t io_watcher;
};

enum uv_poll_event {
  UV_READABLE = 1,
  UV_WRITABLE = 2,
  UV_DISCONNECT = 4,
  UV_PRIORITIZED = 8
};

__attribute__((visibility("default"))) int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd);
__attribute__((visibility("default"))) int uv_poll_init_socket(uv_loop_t* loop,
                                  uv_poll_t* handle,
                                  uv_os_sock_t socket);
__attribute__((visibility("default"))) int uv_poll_start(uv_poll_t* handle, int events, uv_poll_cb cb);
__attribute__((visibility("default"))) int uv_poll_stop(uv_poll_t* handle);


struct uv_prepare_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_prepare_cb prepare_cb; void* queue[2];
};

__attribute__((visibility("default"))) int uv_prepare_init(uv_loop_t*, uv_prepare_t* prepare);
__attribute__((visibility("default"))) int uv_prepare_start(uv_prepare_t* prepare, uv_prepare_cb cb);
__attribute__((visibility("default"))) int uv_prepare_stop(uv_prepare_t* prepare);


struct uv_check_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_check_cb check_cb; void* queue[2];
};

__attribute__((visibility("default"))) int uv_check_init(uv_loop_t*, uv_check_t* check);
__attribute__((visibility("default"))) int uv_check_start(uv_check_t* check, uv_check_cb cb);
__attribute__((visibility("default"))) int uv_check_stop(uv_check_t* check);


struct uv_idle_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_idle_cb idle_cb; void* queue[2];
};

__attribute__((visibility("default"))) int uv_idle_init(uv_loop_t*, uv_idle_t* idle);
__attribute__((visibility("default"))) int uv_idle_start(uv_idle_t* idle, uv_idle_cb cb);
__attribute__((visibility("default"))) int uv_idle_stop(uv_idle_t* idle);


struct uv_async_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_async_cb async_cb; void* queue[2]; int pending;
};

__attribute__((visibility("default"))) int uv_async_init(uv_loop_t*,
                            uv_async_t* async,
                            uv_async_cb async_cb);
__attribute__((visibility("default"))) int uv_async_send(uv_async_t* async);







struct uv_timer_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_timer_cb timer_cb; void* heap_node[3]; uint64_t timeout; uint64_t repeat; uint64_t start_id;
};

__attribute__((visibility("default"))) int uv_timer_init(uv_loop_t*, uv_timer_t* handle);
__attribute__((visibility("default"))) int uv_timer_start(uv_timer_t* handle,
                             uv_timer_cb cb,
                             uint64_t timeout,
                             uint64_t repeat);
__attribute__((visibility("default"))) int uv_timer_stop(uv_timer_t* handle);
__attribute__((visibility("default"))) int uv_timer_again(uv_timer_t* handle);
__attribute__((visibility("default"))) void uv_timer_set_repeat(uv_timer_t* handle, uint64_t repeat);
__attribute__((visibility("default"))) uint64_t uv_timer_get_repeat(const uv_timer_t* handle);







struct uv_getaddrinfo_s {
  void* data; uv_req_type type; void* reserved[6];

  uv_loop_t* loop;

  struct uv__work work_req; uv_getaddrinfo_cb cb; struct addrinfo* hints; char* hostname; char* service; struct addrinfo* addrinfo; int retcode;
};


__attribute__((visibility("default"))) int uv_getaddrinfo(uv_loop_t* loop,
                             uv_getaddrinfo_t* req,
                             uv_getaddrinfo_cb getaddrinfo_cb,
                             const char* node,
                             const char* service,
                             const struct addrinfo* hints);
__attribute__((visibility("default"))) void uv_freeaddrinfo(struct addrinfo* ai);







struct uv_getnameinfo_s {
  void* data; uv_req_type type; void* reserved[6];

  uv_loop_t* loop;

  struct uv__work work_req; uv_getnameinfo_cb getnameinfo_cb; struct sockaddr_storage storage; int flags; char host[
# 889 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 1025
# 889 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 ]; char service[
# 889 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h" 3 4
 32
# 889 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
 ]; int retcode;
};

__attribute__((visibility("default"))) int uv_getnameinfo(uv_loop_t* loop,
                             uv_getnameinfo_t* req,
                             uv_getnameinfo_cb getnameinfo_cb,
                             const struct sockaddr* addr,
                             int flags);



typedef enum {
  UV_IGNORE = 0x00,
  UV_CREATE_PIPE = 0x01,
  UV_INHERIT_FD = 0x02,
  UV_INHERIT_STREAM = 0x04,






  UV_READABLE_PIPE = 0x10,
  UV_WRITABLE_PIPE = 0x20,





  UV_OVERLAPPED_PIPE = 0x40
} uv_stdio_flags;

typedef struct uv_stdio_container_s {
  uv_stdio_flags flags;

  union {
    uv_stream_t* stream;
    int fd;
  } data;
} uv_stdio_container_t;

typedef struct uv_process_options_s {
  uv_exit_cb exit_cb;
  const char* file;






  char** args;




  char** env;




  const char* cwd;




  unsigned int flags;
# 964 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
  int stdio_count;
  uv_stdio_container_t* stdio;





  uv_uid_t uid;
  uv_gid_t gid;
} uv_process_options_t;




enum uv_process_flags {





  UV_PROCESS_SETUID = (1 << 0),





  UV_PROCESS_SETGID = (1 << 1),





  UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS = (1 << 2),







  UV_PROCESS_DETACHED = (1 << 3),




  UV_PROCESS_WINDOWS_HIDE = (1 << 4),





  UV_PROCESS_WINDOWS_HIDE_CONSOLE = (1 << 5),





  UV_PROCESS_WINDOWS_HIDE_GUI = (1 << 6)
};




struct uv_process_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_exit_cb exit_cb;
  int pid;
  void* queue[2]; int status;
};

__attribute__((visibility("default"))) int uv_spawn(uv_loop_t* loop,
                       uv_process_t* handle,
                       const uv_process_options_t* options);
__attribute__((visibility("default"))) int uv_process_kill(uv_process_t*, int signum);
__attribute__((visibility("default"))) int uv_kill(int pid, int signum);
__attribute__((visibility("default"))) uv_pid_t uv_process_get_pid(const uv_process_t*);





struct uv_work_s {
  void* data; uv_req_type type; void* reserved[6];
  uv_loop_t* loop;
  uv_work_cb work_cb;
  uv_after_work_cb after_work_cb;
  struct uv__work work_req;
};

__attribute__((visibility("default"))) int uv_queue_work(uv_loop_t* loop,
                            uv_work_t* req,
                            uv_work_cb work_cb,
                            uv_after_work_cb after_work_cb);

__attribute__((visibility("default"))) int uv_cancel(uv_req_t* req);


struct uv_cpu_times_s {
  uint64_t user;
  uint64_t nice;
  uint64_t sys;
  uint64_t idle;
  uint64_t irq;
};

struct uv_cpu_info_s {
  char* model;
  int speed;
  struct uv_cpu_times_s cpu_times;
};

struct uv_interface_address_s {
  char* name;
  char phys_addr[6];
  int is_internal;
  union {
    struct sockaddr_in address4;
    struct sockaddr_in6 address6;
  } address;
  union {
    struct sockaddr_in netmask4;
    struct sockaddr_in6 netmask6;
  } netmask;
};

struct uv_passwd_s {
  char* username;
  long uid;
  long gid;
  char* shell;
  char* homedir;
};

struct uv_utsname_s {
  char sysname[256];
  char release[256];
  char version[256];
  char machine[256];



};

struct uv_statfs_s {
  uint64_t f_type;
  uint64_t f_bsize;
  uint64_t f_blocks;
  uint64_t f_bfree;
  uint64_t f_bavail;
  uint64_t f_files;
  uint64_t f_ffree;
  uint64_t f_spare[4];
};

typedef enum {
  UV_DIRENT_UNKNOWN,
  UV_DIRENT_FILE,
  UV_DIRENT_DIR,
  UV_DIRENT_LINK,
  UV_DIRENT_FIFO,
  UV_DIRENT_SOCKET,
  UV_DIRENT_CHAR,
  UV_DIRENT_BLOCK
} uv_dirent_type_t;

struct uv_dirent_s {
  const char* name;
  uv_dirent_type_t type;
};

__attribute__((visibility("default"))) char** uv_setup_args(int argc, char** argv);
__attribute__((visibility("default"))) int uv_get_process_title(char* buffer, size_t size);
__attribute__((visibility("default"))) int uv_set_process_title(const char* title);
__attribute__((visibility("default"))) int uv_resident_set_memory(size_t* rss);
__attribute__((visibility("default"))) int uv_uptime(double* uptime);
__attribute__((visibility("default"))) uv_os_fd_t uv_get_osfhandle(int fd);
__attribute__((visibility("default"))) int uv_open_osfhandle(uv_os_fd_t os_fd);

typedef struct {
  long tv_sec;
  long tv_usec;
} uv_timeval_t;

typedef struct {
  int64_t tv_sec;
  int32_t tv_usec;
} uv_timeval64_t;

typedef struct {
   uv_timeval_t ru_utime;
   uv_timeval_t ru_stime;
   uint64_t ru_maxrss;
   uint64_t ru_ixrss;
   uint64_t ru_idrss;
   uint64_t ru_isrss;
   uint64_t ru_minflt;
   uint64_t ru_majflt;
   uint64_t ru_nswap;
   uint64_t ru_inblock;
   uint64_t ru_oublock;
   uint64_t ru_msgsnd;
   uint64_t ru_msgrcv;
   uint64_t ru_nsignals;
   uint64_t ru_nvcsw;
   uint64_t ru_nivcsw;
} uv_rusage_t;

__attribute__((visibility("default"))) int uv_getrusage(uv_rusage_t* rusage);

__attribute__((visibility("default"))) int uv_os_homedir(char* buffer, size_t* size);
__attribute__((visibility("default"))) int uv_os_tmpdir(char* buffer, size_t* size);
__attribute__((visibility("default"))) int uv_os_get_passwd(uv_passwd_t* pwd);
__attribute__((visibility("default"))) void uv_os_free_passwd(uv_passwd_t* pwd);
__attribute__((visibility("default"))) uv_pid_t uv_os_getpid(void);
__attribute__((visibility("default"))) uv_pid_t uv_os_getppid(void);
# 1187 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
__attribute__((visibility("default"))) int uv_os_getpriority(uv_pid_t pid, int* priority);
__attribute__((visibility("default"))) int uv_os_setpriority(uv_pid_t pid, int priority);

__attribute__((visibility("default"))) int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count);
__attribute__((visibility("default"))) void uv_free_cpu_info(uv_cpu_info_t* cpu_infos, int count);

__attribute__((visibility("default"))) int uv_interface_addresses(uv_interface_address_t** addresses,
                                     int* count);
__attribute__((visibility("default"))) void uv_free_interface_addresses(uv_interface_address_t* addresses,
                                           int count);

struct uv_env_item_s {
  char* name;
  char* value;
};

__attribute__((visibility("default"))) int uv_os_environ(uv_env_item_t** envitems, int* count);
__attribute__((visibility("default"))) void uv_os_free_environ(uv_env_item_t* envitems, int count);
__attribute__((visibility("default"))) int uv_os_getenv(const char* name, char* buffer, size_t* size);
__attribute__((visibility("default"))) int uv_os_setenv(const char* name, const char* value);
__attribute__((visibility("default"))) int uv_os_unsetenv(const char* name);
# 1220 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
__attribute__((visibility("default"))) int uv_os_gethostname(char* buffer, size_t* size);

__attribute__((visibility("default"))) int uv_os_uname(uv_utsname_t* buffer);


typedef enum {
  UV_FS_UNKNOWN = -1,
  UV_FS_CUSTOM,
  UV_FS_OPEN,
  UV_FS_CLOSE,
  UV_FS_READ,
  UV_FS_WRITE,
  UV_FS_SENDFILE,
  UV_FS_STAT,
  UV_FS_LSTAT,
  UV_FS_FSTAT,
  UV_FS_FTRUNCATE,
  UV_FS_UTIME,
  UV_FS_FUTIME,
  UV_FS_ACCESS,
  UV_FS_CHMOD,
  UV_FS_FCHMOD,
  UV_FS_FSYNC,
  UV_FS_FDATASYNC,
  UV_FS_UNLINK,
  UV_FS_RMDIR,
  UV_FS_MKDIR,
  UV_FS_MKDTEMP,
  UV_FS_RENAME,
  UV_FS_SCANDIR,
  UV_FS_LINK,
  UV_FS_SYMLINK,
  UV_FS_READLINK,
  UV_FS_CHOWN,
  UV_FS_FCHOWN,
  UV_FS_REALPATH,
  UV_FS_COPYFILE,
  UV_FS_LCHOWN,
  UV_FS_OPENDIR,
  UV_FS_READDIR,
  UV_FS_CLOSEDIR,
  UV_FS_STATFS,
  UV_FS_MKSTEMP
} uv_fs_type;

struct uv_dir_s {
  uv_dirent_t* dirents;
  size_t nentries;
  void* reserved[4];
  DIR* dir;
};


struct uv_fs_s {
  void* data; uv_req_type type; void* reserved[6];
  uv_fs_type fs_type;
  uv_loop_t* loop;
  uv_fs_cb cb;
  ssize_t result;
  void* ptr;
  const char* path;
  uv_stat_t statbuf;
  const char *new_path; uv_file file; int flags; mode_t mode; unsigned int nbufs; uv_buf_t* bufs; off_t off; uv_uid_t uid; uv_gid_t gid; double atime; double mtime; struct uv__work work_req; uv_buf_t bufsml[4];
};

__attribute__((visibility("default"))) uv_fs_type uv_fs_get_type(const uv_fs_t*);
__attribute__((visibility("default"))) ssize_t uv_fs_get_result(const uv_fs_t*);
__attribute__((visibility("default"))) void* uv_fs_get_ptr(const uv_fs_t*);
__attribute__((visibility("default"))) const char* uv_fs_get_path(const uv_fs_t*);
__attribute__((visibility("default"))) uv_stat_t* uv_fs_get_statbuf(uv_fs_t*);

__attribute__((visibility("default"))) void uv_fs_req_cleanup(uv_fs_t* req);
__attribute__((visibility("default"))) int uv_fs_close(uv_loop_t* loop,
                          uv_fs_t* req,
                          uv_file file,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_open(uv_loop_t* loop,
                         uv_fs_t* req,
                         const char* path,
                         int flags,
                         int mode,
                         uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_read(uv_loop_t* loop,
                         uv_fs_t* req,
                         uv_file file,
                         const uv_buf_t bufs[],
                         unsigned int nbufs,
                         int64_t offset,
                         uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_unlink(uv_loop_t* loop,
                           uv_fs_t* req,
                           const char* path,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_write(uv_loop_t* loop,
                          uv_fs_t* req,
                          uv_file file,
                          const uv_buf_t bufs[],
                          unsigned int nbufs,
                          int64_t offset,
                          uv_fs_cb cb);
# 1338 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
__attribute__((visibility("default"))) int uv_fs_copyfile(uv_loop_t* loop,
                             uv_fs_t* req,
                             const char* path,
                             const char* new_path,
                             int flags,
                             uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_mkdir(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          int mode,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_mkdtemp(uv_loop_t* loop,
                            uv_fs_t* req,
                            const char* tpl,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_mkstemp(uv_loop_t* loop,
                            uv_fs_t* req,
                            const char* tpl,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_rmdir(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_scandir(uv_loop_t* loop,
                            uv_fs_t* req,
                            const char* path,
                            int flags,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_scandir_next(uv_fs_t* req,
                                 uv_dirent_t* ent);
__attribute__((visibility("default"))) int uv_fs_opendir(uv_loop_t* loop,
                            uv_fs_t* req,
                            const char* path,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_readdir(uv_loop_t* loop,
                            uv_fs_t* req,
                            uv_dir_t* dir,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_closedir(uv_loop_t* loop,
                             uv_fs_t* req,
                             uv_dir_t* dir,
                             uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_stat(uv_loop_t* loop,
                         uv_fs_t* req,
                         const char* path,
                         uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fstat(uv_loop_t* loop,
                          uv_fs_t* req,
                          uv_file file,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_rename(uv_loop_t* loop,
                           uv_fs_t* req,
                           const char* path,
                           const char* new_path,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fsync(uv_loop_t* loop,
                          uv_fs_t* req,
                          uv_file file,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fdatasync(uv_loop_t* loop,
                              uv_fs_t* req,
                              uv_file file,
                              uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_ftruncate(uv_loop_t* loop,
                              uv_fs_t* req,
                              uv_file file,
                              int64_t offset,
                              uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_sendfile(uv_loop_t* loop,
                             uv_fs_t* req,
                             uv_file out_fd,
                             uv_file in_fd,
                             int64_t in_offset,
                             size_t length,
                             uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_access(uv_loop_t* loop,
                           uv_fs_t* req,
                           const char* path,
                           int mode,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_chmod(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          int mode,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_utime(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          double atime,
                          double mtime,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_futime(uv_loop_t* loop,
                           uv_fs_t* req,
                           uv_file file,
                           double atime,
                           double mtime,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_lstat(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_link(uv_loop_t* loop,
                         uv_fs_t* req,
                         const char* path,
                         const char* new_path,
                         uv_fs_cb cb);
# 1457 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
__attribute__((visibility("default"))) int uv_fs_symlink(uv_loop_t* loop,
                            uv_fs_t* req,
                            const char* path,
                            const char* new_path,
                            int flags,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_readlink(uv_loop_t* loop,
                             uv_fs_t* req,
                             const char* path,
                             uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_realpath(uv_loop_t* loop,
                             uv_fs_t* req,
                             const char* path,
                             uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fchmod(uv_loop_t* loop,
                           uv_fs_t* req,
                           uv_file file,
                           int mode,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_chown(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          uv_uid_t uid,
                          uv_gid_t gid,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fchown(uv_loop_t* loop,
                           uv_fs_t* req,
                           uv_file file,
                           uv_uid_t uid,
                           uv_gid_t gid,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_lchown(uv_loop_t* loop,
                           uv_fs_t* req,
                           const char* path,
                           uv_uid_t uid,
                           uv_gid_t gid,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_statfs(uv_loop_t* loop,
                           uv_fs_t* req,
                           const char* path,
                           uv_fs_cb cb);


enum uv_fs_event {
  UV_RENAME = 1,
  UV_CHANGE = 2
};


struct uv_fs_event_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;

  char* path;
  uv_fs_event_cb cb; void* watchers[2]; int wd;
};





struct uv_fs_poll_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;

  void* poll_ctx;
};

__attribute__((visibility("default"))) int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle);
__attribute__((visibility("default"))) int uv_fs_poll_start(uv_fs_poll_t* handle,
                               uv_fs_poll_cb poll_cb,
                               const char* path,
                               unsigned int interval);
__attribute__((visibility("default"))) int uv_fs_poll_stop(uv_fs_poll_t* handle);
__attribute__((visibility("default"))) int uv_fs_poll_getpath(uv_fs_poll_t* handle,
                                 char* buffer,
                                 size_t* size);


struct uv_signal_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_signal_cb signal_cb;
  int signum;
  struct { struct uv_signal_s* rbe_left; struct uv_signal_s* rbe_right; struct uv_signal_s* rbe_parent; int rbe_color; } tree_entry; unsigned int caught_signals; unsigned int dispatched_signals;
};

__attribute__((visibility("default"))) int uv_signal_init(uv_loop_t* loop, uv_signal_t* handle);
__attribute__((visibility("default"))) int uv_signal_start(uv_signal_t* handle,
                              uv_signal_cb signal_cb,
                              int signum);
__attribute__((visibility("default"))) int uv_signal_start_oneshot(uv_signal_t* handle,
                                      uv_signal_cb signal_cb,
                                      int signum);
__attribute__((visibility("default"))) int uv_signal_stop(uv_signal_t* handle);

__attribute__((visibility("default"))) void uv_loadavg(double avg[3]);





enum uv_fs_event_flags {







  UV_FS_EVENT_WATCH_ENTRY = 1,
# 1573 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
  UV_FS_EVENT_STAT = 2,






  UV_FS_EVENT_RECURSIVE = 4
};


__attribute__((visibility("default"))) int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle);
__attribute__((visibility("default"))) int uv_fs_event_start(uv_fs_event_t* handle,
                                uv_fs_event_cb cb,
                                const char* path,
                                unsigned int flags);
__attribute__((visibility("default"))) int uv_fs_event_stop(uv_fs_event_t* handle);
__attribute__((visibility("default"))) int uv_fs_event_getpath(uv_fs_event_t* handle,
                                  char* buffer,
                                  size_t* size);

__attribute__((visibility("default"))) int uv_ip4_addr(const char* ip, int port, struct sockaddr_in* addr);
__attribute__((visibility("default"))) int uv_ip6_addr(const char* ip, int port, struct sockaddr_in6* addr);

__attribute__((visibility("default"))) int uv_ip4_name(const struct sockaddr_in* src, char* dst, size_t size);
__attribute__((visibility("default"))) int uv_ip6_name(const struct sockaddr_in6* src, char* dst, size_t size);

__attribute__((visibility("default"))) int uv_inet_ntop(int af, const void* src, char* dst, size_t size);
__attribute__((visibility("default"))) int uv_inet_pton(int af, const char* src, void* dst);


struct uv_random_s {
  void* data; uv_req_type type; void* reserved[6];

  uv_loop_t* loop;

  int status;
  void* buf;
  size_t buflen;
  uv_random_cb cb;
  struct uv__work work_req;
};

__attribute__((visibility("default"))) int uv_random(uv_loop_t* loop,
                        uv_random_t* req,
                        void *buf,
                        size_t buflen,
                        unsigned flags,
                        uv_random_cb cb);
# 1631 "/home/toto/.env/encours/neovim/.deps/usr/include/uv.h"
__attribute__((visibility("default"))) int uv_if_indextoname(unsigned int ifindex,
                                char* buffer,
                                size_t* size);
__attribute__((visibility("default"))) int uv_if_indextoiid(unsigned int ifindex,
                               char* buffer,
                               size_t* size);

__attribute__((visibility("default"))) int uv_exepath(char* buffer, size_t* size);

__attribute__((visibility("default"))) int uv_cwd(char* buffer, size_t* size);

__attribute__((visibility("default"))) int uv_chdir(const char* dir);

__attribute__((visibility("default"))) uint64_t uv_get_free_memory(void);
__attribute__((visibility("default"))) uint64_t uv_get_total_memory(void);
__attribute__((visibility("default"))) uint64_t uv_get_constrained_memory(void);

__attribute__((visibility("default"))) uint64_t uv_hrtime(void);
__attribute__((visibility("default"))) void uv_sleep(unsigned int msec);

__attribute__((visibility("default"))) void uv_disable_stdio_inheritance(void);

__attribute__((visibility("default"))) int uv_dlopen(const char* filename, uv_lib_t* lib);
__attribute__((visibility("default"))) void uv_dlclose(uv_lib_t* lib);
__attribute__((visibility("default"))) int uv_dlsym(uv_lib_t* lib, const char* name, void** ptr);
__attribute__((visibility("default"))) const char* uv_dlerror(const uv_lib_t* lib);

__attribute__((visibility("default"))) int uv_mutex_init(uv_mutex_t* handle);
__attribute__((visibility("default"))) int uv_mutex_init_recursive(uv_mutex_t* handle);
__attribute__((visibility("default"))) void uv_mutex_destroy(uv_mutex_t* handle);
__attribute__((visibility("default"))) void uv_mutex_lock(uv_mutex_t* handle);
__attribute__((visibility("default"))) int uv_mutex_trylock(uv_mutex_t* handle);
__attribute__((visibility("default"))) void uv_mutex_unlock(uv_mutex_t* handle);

__attribute__((visibility("default"))) int uv_rwlock_init(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_destroy(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_rdlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) int uv_rwlock_tryrdlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_rdunlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_wrlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) int uv_rwlock_trywrlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_wrunlock(uv_rwlock_t* rwlock);

__attribute__((visibility("default"))) int uv_sem_init(uv_sem_t* sem, unsigned int value);
__attribute__((visibility("default"))) void uv_sem_destroy(uv_sem_t* sem);
__attribute__((visibility("default"))) void uv_sem_post(uv_sem_t* sem);
__attribute__((visibility("default"))) void uv_sem_wait(uv_sem_t* sem);
__attribute__((visibility("default"))) int uv_sem_trywait(uv_sem_t* sem);

__attribute__((visibility("default"))) int uv_cond_init(uv_cond_t* cond);
__attribute__((visibility("default"))) void uv_cond_destroy(uv_cond_t* cond);
__attribute__((visibility("default"))) void uv_cond_signal(uv_cond_t* cond);
__attribute__((visibility("default"))) void uv_cond_broadcast(uv_cond_t* cond);

__attribute__((visibility("default"))) int uv_barrier_init(uv_barrier_t* barrier, unsigned int count);
__attribute__((visibility("default"))) void uv_barrier_destroy(uv_barrier_t* barrier);
__attribute__((visibility("default"))) int uv_barrier_wait(uv_barrier_t* barrier);

__attribute__((visibility("default"))) void uv_cond_wait(uv_cond_t* cond, uv_mutex_t* mutex);
__attribute__((visibility("default"))) int uv_cond_timedwait(uv_cond_t* cond,
                                uv_mutex_t* mutex,
                                uint64_t timeout);

__attribute__((visibility("default"))) void uv_once(uv_once_t* guard, void (*callback)(void));

__attribute__((visibility("default"))) int uv_key_create(uv_key_t* key);
__attribute__((visibility("default"))) void uv_key_delete(uv_key_t* key);
__attribute__((visibility("default"))) void* uv_key_get(uv_key_t* key);
__attribute__((visibility("default"))) void uv_key_set(uv_key_t* key, void* value);

__attribute__((visibility("default"))) int uv_gettimeofday(uv_timeval64_t* tv);

typedef void (*uv_thread_cb)(void* arg);

__attribute__((visibility("default"))) int uv_thread_create(uv_thread_t* tid, uv_thread_cb entry, void* arg);

typedef enum {
  UV_THREAD_NO_FLAGS = 0x00,
  UV_THREAD_HAS_STACK_SIZE = 0x01
} uv_thread_create_flags;

struct uv_thread_options_s {
  unsigned int flags;
  size_t stack_size;

};

typedef struct uv_thread_options_s uv_thread_options_t;

__attribute__((visibility("default"))) int uv_thread_create_ex(uv_thread_t* tid,
                                  const uv_thread_options_t* params,
                                  uv_thread_cb entry,
                                  void* arg);
__attribute__((visibility("default"))) uv_thread_t uv_thread_self(void);
__attribute__((visibility("default"))) int uv_thread_join(uv_thread_t *tid);
__attribute__((visibility("default"))) int uv_thread_equal(const uv_thread_t* t1, const uv_thread_t* t2);



union uv_any_handle {
  uv_async_t async; uv_check_t check; uv_fs_event_t fs_event; uv_fs_poll_t fs_poll; uv_handle_t handle; uv_idle_t idle; uv_pipe_t pipe; uv_poll_t poll; uv_prepare_t prepare; uv_process_t process; uv_stream_t stream; uv_tcp_t tcp; uv_timer_t timer; uv_tty_t tty; uv_udp_t udp; uv_signal_t signal;
};

union uv_any_req {
  uv_req_t req; uv_connect_t connect; uv_write_t write; uv_shutdown_t shutdown; uv_udp_send_t udp_send; uv_fs_t fs; uv_work_t work; uv_getaddrinfo_t getaddrinfo; uv_getnameinfo_t getnameinfo; uv_random_t random;
};



struct uv_loop_s {

  void* data;

  unsigned int active_handles;
  void* handle_queue[2];
  union {
    void* unused[2];
    unsigned int count;
  } active_reqs;

  unsigned int stop_flag;
  unsigned long flags; int backend_fd; void* pending_queue[2]; void* watcher_queue[2]; uv__io_t** watchers; unsigned int nwatchers; unsigned int nfds; void* wq[2]; uv_mutex_t wq_mutex; uv_async_t wq_async; uv_rwlock_t cloexec_lock; uv_handle_t* closing_handles; void* process_handles[2]; void* prepare_handles[2]; void* check_handles[2]; void* idle_handles[2]; void* async_handles[2]; void (*async_unused)(void); uv__io_t async_io_watcher; int async_wfd; struct { void* min; unsigned int nelts; } timer_heap; uint64_t timer_counter; uint64_t time; int signal_pipefd[2]; uv__io_t signal_io_watcher; uv_signal_t child_watcher; int emfile_fd; uv__io_t inotify_read_watcher; void* inotify_watchers; int inotify_fd;
};

__attribute__((visibility("default"))) void* uv_loop_get_data(const uv_loop_t*);
__attribute__((visibility("default"))) void uv_loop_set_data(uv_loop_t*, void* data);
# 5 "/home/toto/.env/encours/neovim/src/nvim/os/fs_defs.h" 2


typedef struct {
  uv_stat_t stat;
} FileInfo;


typedef struct {
  uint64_t inode;
  uint64_t device_id;
} FileID;



typedef struct {
  uv_fs_t request;
  uv_dirent_t ent;
} Directory;
# 116 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/terminal.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 5 "/home/toto/.env/encours/neovim/src/nvim/terminal.h" 2



typedef struct terminal Terminal;
typedef void (*terminal_write_cb)(char *buffer, size_t size, void *data);
typedef void (*terminal_resize_cb)(uint16_t width, uint16_t height, void *data);
typedef void (*terminal_close_cb)(void *data);



typedef struct {
  void *data;
  uint16_t width, height;
  terminal_write_cb write_cb;
  terminal_resize_cb resize_cb;
  terminal_close_cb close_cb;
} TerminalOptions;
# 117 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 2




typedef struct taggy {
  char_u *tagname;
  fmark_T fmark;
  int cur_match;
  int cur_fnum;
  char_u *user_data;
} taggy_T;

typedef struct buffblock buffblock_T;
typedef struct buffheader buffheader_T;




struct buffblock {
  buffblock_T *b_next;
  char_u b_str[1];
};




struct buffheader {
  buffblock_T bh_first;
  buffblock_T *bh_curr;
  size_t bh_index;
  size_t bh_space;
};

typedef struct
{
  buffheader_T sr_redobuff;
  buffheader_T sr_old_redobuff;
} save_redo_T;






typedef struct {
  int wo_arab;

  int wo_bri;

  char_u *wo_briopt;

  int wo_diff;

  char_u *wo_fdc;

  char_u *wo_fdc_save;

  int wo_fen;

  int wo_fen_save;


  char_u *wo_fdi;

  long wo_fdl;

  int wo_fdl_save;


  char_u *wo_fdm;

  char_u *wo_fdm_save;

  long wo_fml;

  long wo_fdn;

  char_u *wo_fde;

  char_u *wo_fdt;

  char_u *wo_fmr;

  int wo_lbr;

  int wo_list;

  int wo_nu;

  int wo_rnu;

  long wo_nuw;

  int wo_wfh;

  int wo_wfw;

  int wo_pvw;

  int wo_rl;

  char_u *wo_rlc;

  long wo_scr;

  int wo_spell;

  int wo_cuc;

  int wo_cul;

  char_u *wo_cc;

  char_u *wo_stl;

  int wo_scb;

  int wo_diff_saved;

  int wo_scb_save;

  int wo_wrap;

  int wo_wrap_save;

  char_u *wo_cocu;

  long wo_cole;

  int wo_crb;

  int wo_crb_save;

  char_u *wo_scl;

  char_u *wo_winhl;

  char_u *wo_fcs;

  char_u *wo_lcs;

  long wo_winbl;


  LastSet wo_script_ctx[WV_COUNT];

} winopt_T;
# 275 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
struct wininfo_S {
  wininfo_T *wi_next;
  wininfo_T *wi_prev;
  win_T *wi_win;
  pos_T wi_fpos;
  
# 280 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 280 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      wi_optset;
  winopt_T wi_opt;
  
# 282 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 282 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      wi_fold_manual;
  garray_T wi_folds;
};







typedef struct arglist {
  garray_T al_ga;
  int al_refcount;
  int id;
} alist_T;
# 305 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct argentry {
  char_u *ae_fname;
  int ae_fnum;
} aentry_T;
# 322 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct {
  char_u *tb_buf;
  char_u *tb_noremap;
  int tb_buflen;
  int tb_off;
  int tb_len;
  int tb_maplen;
  int tb_silent;
  int tb_no_abbr_cnt;
  int tb_change_cnt;
} typebuf_T;


typedef struct {
  typebuf_T save_typebuf;
  
# 337 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 337 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      typebuf_valid;
  int old_char;
  int old_mod_mask;
  buffheader_T save_readbuf1;
  buffheader_T save_readbuf2;
  String save_inputbuf;
} tasave_T;




typedef struct mapblock mapblock_T;
struct mapblock {
  mapblock_T *m_next;
  char_u *m_keys;
  char_u *m_str;
  char_u *m_orig_str;
  int m_keylen;
  int m_mode;
  int m_noremap;
  char m_silent;
  char m_nowait;
  char m_expr;
  sctx_T m_script_ctx;
};




struct stl_hlrec {
  char_u *start;
  int userhl;
};
# 379 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct qf_info_S qf_info_T;




typedef struct {
  proftime_T total;
  proftime_T slowest;
  long count;
  long match;
} syn_time_T;





typedef struct {
  hashtab_T b_keywtab;
  hashtab_T b_keywtab_ic;
  int b_syn_error;
  
# 399 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 399 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_syn_slow;
  int b_syn_ic;
  int b_syn_spell;
  garray_T b_syn_patterns;
  garray_T b_syn_clusters;
  int b_spell_cluster_id;
  int b_nospell_cluster_id;
  int b_syn_containedin;

  int b_syn_sync_flags;
  int16_t b_syn_sync_id;
  long b_syn_sync_minlines;
  long b_syn_sync_maxlines;
  long b_syn_sync_linebreaks;
  char_u *b_syn_linecont_pat;
  regprog_T *b_syn_linecont_prog;
  syn_time_T b_syn_linecont_time;
  int b_syn_linecont_ic;
  int b_syn_topgrp;
  int b_syn_conceal;
  int b_syn_folditems;
# 433 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
  synstate_T *b_sst_array;
  int b_sst_len;
  synstate_T *b_sst_first;
  synstate_T *b_sst_firstfree;
  int b_sst_freecount;
  linenr_T b_sst_check_lnum;
  disptick_T b_sst_lasttick;


  garray_T b_langp;
  
# 443 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 443 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_spell_ismw[256];
  char_u *b_spell_ismw_mb;
  char_u *b_p_spc;
  regprog_T *b_cap_prog;
  char_u *b_p_spf;
  char_u *b_p_spl;
  int b_cjk;
  char_u b_syn_chartab[32];
  char_u *b_syn_isk;
} synblock_T;




typedef struct { typval_T di_tv; uint8_t di_flags; char_u di_key[sizeof("changedtick")]; } ChangedtickDictItem;

typedef struct {
  LuaRef on_lines;
  LuaRef on_bytes;
  LuaRef on_changedtick;
  LuaRef on_detach;
  
# 464 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 464 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      utf_sizes;
} BufUpdateCallbacks;



extern int curbuf_splice_pending ;
# 485 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
struct file_buffer {
  handle_T handle;


  memline_T b_ml;

  buf_T *b_next;
  buf_T *b_prev;

  int b_nwindows;

  int b_flags;
  int b_locked;
# 506 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
  char_u *b_ffname;
  char_u *b_sfname;
  char_u *b_fname;

  
# 510 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 510 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      file_id_valid;
  FileID file_id;

  int b_changed;





  ChangedtickDictItem changedtick_di;

  varnumber_T b_last_changedtick;

  varnumber_T b_last_changedtick_pum;


  
# 526 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 526 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_saving;






  
# 533 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 533 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_mod_set;

  linenr_T b_mod_top;
  linenr_T b_mod_bot;

  long b_mod_xlines;

  wininfo_T *b_wininfo;

  long b_mtime;
  long b_mtime_read;
  uint64_t b_orig_size;
  int b_orig_mode;
  time_t b_last_used;


  fmark_T b_namedm[('z' - 'a' + 1)];


  visualinfo_T b_visual;
  int b_visual_mode_eval;

  fmark_T b_last_cursor;

  fmark_T b_last_insert;
  fmark_T b_last_change;




  fmark_T b_changelist[100];
  int b_changelistlen;
  
# 565 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 565 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_new_change;





  uint64_t b_chartab[4];


  mapblock_T *(b_maphash[256]);


  mapblock_T *b_first_abbr;

  garray_T b_ucmds;



  pos_T b_op_start;
  pos_T b_op_start_orig;
  pos_T b_op_end;

  
# 587 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 587 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_marks_read;




  u_header_T *b_u_oldhead;
  u_header_T *b_u_newhead;

  u_header_T *b_u_curhead;
  int b_u_numhead;
  
# 597 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 597 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_u_synced;
  long b_u_seq_last;
  long b_u_save_nr_last;
  long b_u_seq_cur;
  time_t b_u_time_cur;
  long b_u_save_nr_cur;




  char_u *b_u_line_ptr;
  linenr_T b_u_line_lnum;
  colnr_T b_u_line_colnr;

  
# 611 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 611 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_scanned;


  long b_p_iminsert;
  long b_p_imsearch;





  int16_t b_kmap_state;


  garray_T b_kmap_ga;






  
# 631 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 631 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_p_initialized;

  LastSet b_p_script_ctx[BV_COUNT];

  int b_p_ai;
  int b_p_ai_nopaste;
  char_u *b_p_bkc;
  unsigned int b_bkc_flags;
  int b_p_ci;
  int b_p_bin;
  int b_p_bomb;
  char_u *b_p_bh;
  char_u *b_p_bt;
  int b_has_qf_entry;
  int b_p_bl;
  long b_p_channel;
  int b_p_cin;
  char_u *b_p_cino;
  char_u *b_p_cink;
  char_u *b_p_cinw;
  char_u *b_p_com;
  char_u *b_p_cms;
  char_u *b_p_cpt;
  char_u *b_p_cfu;
  char_u *b_p_ofu;
  char_u *b_p_tfu;
  int b_p_eol;
  int b_p_fixeol;
  int b_p_et;
  int b_p_et_nobin;
  int b_p_et_nopaste;
  char_u *b_p_fenc;
  char_u *b_p_ff;
  char_u *b_p_ft;
  char_u *b_p_fo;
  char_u *b_p_flp;
  int b_p_inf;
  char_u *b_p_isk;
  char_u *b_p_def;
  char_u *b_p_inc;
  char_u *b_p_inex;
  uint32_t b_p_inex_flags;
  char_u *b_p_inde;
  uint32_t b_p_inde_flags;
  char_u *b_p_indk;
  char_u *b_p_fp;
  char_u *b_p_fex;
  uint32_t b_p_fex_flags;
  char_u *b_p_kp;
  int b_p_lisp;
  char_u *b_p_menc;
  char_u *b_p_mps;
  int b_p_ml;
  int b_p_ml_nobin;
  int b_p_ma;
  char_u *b_p_nf;
  int b_p_pi;
  char_u *b_p_qe;
  int b_p_ro;
  long b_p_sw;
  long b_p_scbk;
  int b_p_si;
  long b_p_sts;
  long b_p_sts_nopaste;
  char_u *b_p_sua;
  int b_p_swf;
  long b_p_smc;
  char_u *b_p_syn;
  long b_p_ts;
  long b_p_tw;
  long b_p_tw_nobin;
  long b_p_tw_nopaste;
  long b_p_wm;
  long b_p_wm_nobin;
  long b_p_wm_nopaste;
  char_u *b_p_keymap;


  char_u *b_p_gp;
  char_u *b_p_mp;
  char_u *b_p_efm;
  char_u *b_p_ep;
  char_u *b_p_path;
  int b_p_ar;
  char_u *b_p_tags;
  char_u *b_p_tc;
  unsigned b_tc_flags;
  char_u *b_p_dict;
  char_u *b_p_tsr;
  long b_p_ul;
  int b_p_udf;
  char_u *b_p_lw;




  int b_ind_level;
  int b_ind_open_imag;
  int b_ind_no_brace;
  int b_ind_first_open;
  int b_ind_open_extra;
  int b_ind_close_extra;
  int b_ind_open_left_imag;
  int b_ind_jump_label;
  int b_ind_case;
  int b_ind_case_code;
  int b_ind_case_break;
  int b_ind_param;
  int b_ind_func_type;
  int b_ind_comment;
  int b_ind_in_comment;
  int b_ind_in_comment2;
  int b_ind_cpp_baseclass;
  int b_ind_continuation;
  int b_ind_unclosed;
  int b_ind_unclosed2;
  int b_ind_unclosed_noignore;
  int b_ind_unclosed_wrapped;
  int b_ind_unclosed_whiteok;
  int b_ind_matching_paren;
  int b_ind_paren_prev;
  int b_ind_maxparen;
  int b_ind_maxcomment;
  int b_ind_scopedecl;
  int b_ind_scopedecl_code;
  int b_ind_java;
  int b_ind_js;
  int b_ind_keep_case_label;
  int b_ind_hash_comment;
  int b_ind_cpp_namespace;
  int b_ind_if_for_while;
  int b_ind_cpp_extern_c;

  linenr_T b_no_eol_lnum;


  int b_start_eol;
  int b_start_ffc;
  char_u *b_start_fenc;
  int b_bad_char;
  int b_start_bomb;

  ScopeDictDictItem b_bufvar;
  dict_T *b_vars;





  
# 780 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 780 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_may_swap;
  
# 781 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 781 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_did_warn;







  
# 789 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 789 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_help;

  
# 791 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 791 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_spell;



  char_u *b_prompt_text;
  Callback b_prompt_callback;
  Callback b_prompt_interrupt;
  int b_prompt_insert;


  synblock_T b_s;



  signlist_T *b_signlist;
  int b_signcols_max;
  int b_signcols;

  Terminal *terminal;

  dict_T *additional_data;

  int b_mapped_ctrl_c;

  MarkTree b_marktree[1];
  Map_uint64_t_ExtmarkItem *b_extmark_index;
  Map_uint64_t_ExtmarkNs *b_extmark_ns;



  struct { size_t size; size_t capacity; uint64_t *items; } update_channels;

  struct { size_t size; size_t capacity; BufUpdateCallbacks *items; } update_callbacks;


  
# 826 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 826 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      update_need_codepoints;





  size_t deleted_bytes;
  size_t deleted_codepoints;
  size_t deleted_codeunits;


  int flush_count;

  
# 839 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 839 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      b_luahl;
  LuaRef b_luahl_start;
  LuaRef b_luahl_window;
  LuaRef b_luahl_line;
  LuaRef b_luahl_end;

  int b_diff_failed;
};
# 867 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct diffblock_S diff_T;
struct diffblock_S {
  diff_T *df_next;
  linenr_T df_lnum[8];
  linenr_T df_count[8];
};
# 882 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct tabpage_S tabpage_T;
struct tabpage_S {
  handle_T handle;
  tabpage_T *tp_next;
  frame_T *tp_topframe;
  win_T *tp_curwin;
  win_T *tp_prevwin;
  win_T *tp_firstwin;
  win_T *tp_lastwin;
  long tp_old_Rows;
  long tp_old_Columns;
  long tp_ch_used;


  diff_T *tp_first_diff;
  buf_T *(tp_diffbuf[8]);
  int tp_diff_invalid;
  int tp_diff_update;
  frame_T *(tp_snapshot[2]);
  ScopeDictDictItem tp_winvar;
  dict_T *tp_vars;
  char_u *tp_localdir;
};
# 918 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct w_line {
  linenr_T wl_lnum;
  uint16_t wl_size;
  char wl_valid;
  char wl_folded;
  linenr_T wl_lastlnum;
} wline_T;





struct frame_S {
  char fr_layout;
  int fr_width;
  int fr_newwidth;
  int fr_height;
  int fr_newheight;
  frame_T *fr_parent;
  frame_T *fr_next;

  frame_T *fr_prev;


  frame_T *fr_child;
  win_T *fr_win;
};
# 956 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct {
  regmmatch_T rm;

  buf_T *buf;
  linenr_T lnum;
  int attr;
  int attr_cur;
  linenr_T first_lnum;
  colnr_T startcol;
  colnr_T endcol;
  
# 966 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 966 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      is_addpos;
  proftime_T tm;
} match_T;





typedef struct
{
    linenr_T lnum;
    colnr_T col;
    int len;
} llpos_T;



typedef struct posmatch posmatch_T;
struct posmatch
{
    llpos_T pos[8];
    int cur;
    linenr_T toplnum;
    linenr_T botlnum;
};





typedef struct matchitem matchitem_T;
struct matchitem {
  matchitem_T *next;
  int id;
  int priority;
  char_u *pattern;
  int hlg_id;
  regmmatch_T match;
  posmatch_T pos;
  match_T hl;
  int conceal_char;
};

typedef int FloatAnchor;

enum {
  kFloatAnchorEast = 1,
  kFloatAnchorSouth = 2,
};





extern const char *const float_anchor_str[] ;

typedef enum {
  kFloatRelativeEditor = 0,
  kFloatRelativeWindow = 1,
  kFloatRelativeCursor = 2,
} FloatRelative;

extern const char *const float_relative_str[]
                                                                  ;

typedef enum {
  kWinStyleUnused = 0,
  kWinStyleMinimal,
} WinStyle;

typedef struct {
  Window window;
  lpos_T bufpos;
  int height, width;
  double row, col;
  FloatAnchor anchor;
  FloatRelative relative;
  
# 1043 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1043 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      external;
  
# 1044 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1044 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      focusable;
  WinStyle style;
} FloatConfig;
# 1057 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
typedef struct
{
  int w_topline_save;
  int w_topline_corr;
  pos_T w_cursor_save;
  pos_T w_cursor_corr;
} pos_save_T;




enum {
  MENU_INDEX_INVALID = -1,
  MENU_INDEX_NORMAL = 0,
  MENU_INDEX_VISUAL = 1,
  MENU_INDEX_SELECT = 2,
  MENU_INDEX_OP_PENDING = 3,
  MENU_INDEX_INSERT = 4,
  MENU_INDEX_CMDLINE = 5,
  MENU_INDEX_TIP = 6,
  MENU_MODES = 7,
};

typedef struct VimMenu vimmenu_T;

struct VimMenu {
  int modes;
  int enabled;
  char_u *name;
  char_u *dname;
  char_u *en_name;

  char_u *en_dname;
  int mnemonic;
  char_u *actext;
  long priority;
  char_u *strings[MENU_MODES];
  int noremap[MENU_MODES];
  
# 1095 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1095 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      silent[MENU_MODES];
  vimmenu_T *children;
  vimmenu_T *parent;
  vimmenu_T *next;
};

typedef struct {
  int wb_startcol;
  int wb_endcol;
  vimmenu_T *wb_menu;
} winbar_item_T;




struct window_S {
  handle_T handle;

  buf_T *w_buffer;


  synblock_T *w_s;

  int w_hl_id_normal;
  int w_hl_attr_normal;

  int w_hl_ids[HLF_COUNT];
  int w_hl_attrs[HLF_COUNT];

  int w_hl_needs_update;

  win_T *w_prev;
  win_T *w_next;
  
# 1128 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1128 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_closing;


  frame_T *w_frame;

  pos_T w_cursor;

  colnr_T w_curswant;



  int w_set_curswant;



  linenr_T w_last_cursorline;
  pos_T w_last_cursormoved;


  char w_old_visual_mode;
  linenr_T w_old_cursor_lnum;
  colnr_T w_old_cursor_fcol;
  colnr_T w_old_cursor_lcol;
  linenr_T w_old_visual_lnum;
  colnr_T w_old_visual_col;
  colnr_T w_old_curswant;


  struct {
    int eol;
    int ext;
    int prec;
    int nbsp;
    int space;
    int tab1;
    int tab2;
    int tab3;
    int trail;
    int conceal;
  } w_p_lcs_chars;


  struct {
    int stl;
    int stlnc;
    int vert;
    int fold;
    int foldopen;
    int foldclosed;
    int foldsep;
    int diff;
    int msgsep;
    int eob;
  } w_p_fcs_chars;





  linenr_T w_topline;

  char w_topline_was_set;

  int w_topfill;
  int w_old_topfill;
  
# 1193 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1193 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_botfill;

  
# 1195 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1195 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_old_botfill;
  colnr_T w_leftcol;


  colnr_T w_skipcol;






  int w_winrow;
  int w_height;

  int w_status_height;
  int w_wincol;
  int w_width;
  int w_vsep_width;
  pos_save_T w_save_cursor;


  int w_height_inner;
  int w_width_inner;

  int w_height_request;
  int w_width_request;
# 1231 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
  int w_valid;
  pos_T w_valid_cursor;

  colnr_T w_valid_leftcol;

  
# 1236 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1236 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_viewport_invalid;





  int w_cline_height;
  
# 1243 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1243 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_cline_folded;

  int w_cline_row;

  colnr_T w_virtcol;
# 1259 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
  int w_wrow, w_wcol;

  linenr_T w_botline;

  int w_empty_rows;
  int w_filler_rows;
# 1277 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
  int w_lines_valid;
  wline_T *w_lines;

  garray_T w_folds;
  
# 1281 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1281 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_fold_manual;

  
# 1283 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1283 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_foldinvalid;

  int w_nrwidth;






  int w_redr_type;
  int w_upd_rows;

  linenr_T w_redraw_top;
  linenr_T w_redraw_bot;
  int w_redr_status;


  pos_T w_ru_cursor;
  colnr_T w_ru_virtcol;
  linenr_T w_ru_topline;
  linenr_T w_ru_line_count;
  int w_ru_topfill;
  char w_ru_empty;

  int w_alt_fnum;

  alist_T *w_alist;
  int w_arg_idx;

  int w_arg_idx_invalid;

  char_u *w_localdir;

  vimmenu_T *w_winbar;
  winbar_item_T *w_winbar_items;
  int w_winbar_height;






  winopt_T w_onebuf_opt;
  winopt_T w_allbuf_opt;


  uint32_t w_p_stl_flags;
  uint32_t w_p_fde_flags;
  uint32_t w_p_fdt_flags;
  int *w_p_cc_cols;
  long w_p_siso;
  long w_p_so;

  int w_briopt_min;
  int w_briopt_shift;
  
# 1338 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1338 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_briopt_sbr;




  long w_scbind_pos;

  ScopeDictDictItem w_winvar;
  dict_T *w_vars;






  pos_T w_pcmark;
  pos_T w_prev_pcmark;




  xfmark_T w_jumplist[100];
  int w_jumplistlen;
  int w_jumplistidx;

  int w_changelistidx;

  matchitem_T *w_match_head;
  int w_next_match_id;







  taggy_T w_tagstack[20];
  int w_tagstackidx;
  int w_tagstacklen;

  ScreenGrid w_grid;
  
# 1379 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1379 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_pos_changed;
  
# 1380 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h" 3 4
 _Bool 
# 1380 "/home/toto/.env/encours/neovim/src/nvim/buffer_defs.h"
      w_floating;
  FloatConfig w_float_config;







  int w_fraction;
  int w_prev_fraction_row;

  linenr_T w_nrwidth_line_count;

  int w_nrwidth_width;

  qf_info_T *w_llist;


  qf_info_T *w_llist_ref;
};

static inline int win_hl_attr(win_T *wp, int hlf)
{
  return wp->w_hl_attrs[hlf];
}
# 7 "/home/toto/.env/encours/neovim/src/nvim/normal.h" 2
# 17 "/home/toto/.env/encours/neovim/src/nvim/normal.h"
typedef enum {
  kMTCharWise = 0,
  kMTLineWise = 1,
  kMTBlockWise = 2,
  kMTUnknown = -1
} MotionType;




typedef struct oparg_S {
  int op_type;
  int regname;
  MotionType motion_type;
  int motion_force;
  
# 32 "/home/toto/.env/encours/neovim/src/nvim/normal.h" 3 4
 _Bool 
# 32 "/home/toto/.env/encours/neovim/src/nvim/normal.h"
      use_reg_one;

  
# 34 "/home/toto/.env/encours/neovim/src/nvim/normal.h" 3 4
 _Bool 
# 34 "/home/toto/.env/encours/neovim/src/nvim/normal.h"
      inclusive;

  
# 36 "/home/toto/.env/encours/neovim/src/nvim/normal.h" 3 4
 _Bool 
# 36 "/home/toto/.env/encours/neovim/src/nvim/normal.h"
      end_adjusted;

  pos_T start;
  pos_T end;
  pos_T cursor_start;

  long line_count;

  
# 44 "/home/toto/.env/encours/neovim/src/nvim/normal.h" 3 4
 _Bool 
# 44 "/home/toto/.env/encours/neovim/src/nvim/normal.h"
      empty;

  
# 46 "/home/toto/.env/encours/neovim/src/nvim/normal.h" 3 4
 _Bool 
# 46 "/home/toto/.env/encours/neovim/src/nvim/normal.h"
      is_VIsual;
  colnr_T start_vcol;
  colnr_T end_vcol;
  long prev_opcount;
  long prev_count0;
} oparg_T;




typedef struct cmdarg_S {
  oparg_T *oap;
  int prechar;
  int cmdchar;
  int nchar;
  int ncharC1;
  int ncharC2;
  int extra_char;
  long opcount;
  long count0;
  long count1;
  int arg;
  int retval;
  char_u *searchbuf;
} cmdarg_T;
# 9 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 2
# 81 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
typedef struct exarg exarg_T;






typedef void (*ex_func_T)(exarg_T *eap);

typedef char_u *(*LineGetter)(int, void *, int, 
# 90 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
                                               _Bool
# 90 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
                                                   );


typedef struct cmdname {
  char_u *cmd_name;
  ex_func_T cmd_func;
  uint32_t cmd_argt;
  int cmd_addr_type;
} CommandDefinition;




typedef struct eslist_elem eslist_T;
struct eslist_elem {
  int saved_emsg_silent;
  eslist_T *next;
};



enum {
  CSTACK_LEN = 50,
};

typedef struct {
  int cs_flags[CSTACK_LEN];
  char cs_pending[CSTACK_LEN];
  union {
    void *csp_rv[CSTACK_LEN];
    void *csp_ex[CSTACK_LEN];
  } cs_pend;
  void *cs_forinfo[CSTACK_LEN];
  int cs_line[CSTACK_LEN];
  int cs_idx;
  int cs_looplevel;
  int cs_trylevel;
  eslist_T *cs_emsg_silent_list;
  int cs_lflags;
} cstack_T;




enum {
  CSL_HAD_LOOP = 1,
  CSL_HAD_ENDLOOP = 2,
  CSL_HAD_CONT = 4,
  CSL_HAD_FINA = 8,
};


struct exarg {
  char_u *arg;
  char_u *nextcmd;
  char_u *cmd;
  char_u **cmdlinep;
  cmdidx_T cmdidx;
  uint32_t argt;
  int skip;
  int forceit;
  int addr_count;
  linenr_T line1;
  linenr_T line2;
  int addr_type;
  int flags;
  char_u *do_ecmd_cmd;
  linenr_T do_ecmd_lnum;
  int append;
  int usefilter;
  int amount;
  int regname;
  int force_bin;
  int read_edit;
  int force_ff;
  int force_enc;
  int bad_char;
  int useridx;
  char_u *errmsg;
  LineGetter getline;
  void *cookie;
  cstack_T *cstack;
};
# 183 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
struct expand {
  int xp_context;
  char_u *xp_pattern;
  size_t xp_pattern_len;
  char_u *xp_arg;
  sctx_T xp_script_ctx;
  int xp_backslash;

  int xp_shell;


  int xp_numfiles;
  char_u **xp_files;
  char_u *xp_line;
  int xp_col;
};
# 208 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
typedef struct {
  int split;
  int tab;
  
# 211 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 211 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      browse;
  
# 212 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 212 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      confirm;
  
# 213 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 213 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      hide;
  
# 214 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 214 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      keepalt;
  
# 215 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 215 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      keepjumps;
  
# 216 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 216 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      keepmarks;
  
# 217 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 217 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      keeppatterns;
  
# 218 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 218 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      lockmarks;
  
# 219 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 219 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      noswapfile;
  char_u *save_ei;
  regmatch_T filter_regmatch;
  
# 222 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h" 3 4
 _Bool 
# 222 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds_defs.h"
      filter_force;
} cmdmod_T;
# 6 "/home/toto/.env/encours/neovim/src/nvim/ex_eval.h" 2
# 42 "/home/toto/.env/encours/neovim/src/nvim/ex_eval.h"
struct msglist {
  char_u *msg;
  char_u *throw_msg;
  struct msglist *next;
};


typedef enum
{
  ET_USER,
  ET_ERROR,
  ET_INTERRUPT,
} except_type_T;





typedef struct vim_exception except_T;
struct vim_exception {
  except_type_T type;
  char_u *value;
  struct msglist *messages;
  char_u *throw_name;
  linenr_T throw_lnum;
  except_T *caught;
};






typedef struct cleanup_stuff cleanup_T;
struct cleanup_stuff {
  int pending;
  except_T *exception;
};
# 9 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 2


# 1 "/home/toto/.env/encours/neovim/src/nvim/menu.h" 1
# 12 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 2


# 1 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 1







# 1 "/home/toto/.env/encours/neovim/src/nvim/lib/klist.h" 1
# 30 "/home/toto/.env/encours/neovim/src/nvim/lib/klist.h"
# 1 "/usr/include/assert.h" 1 3 4
# 31 "/home/toto/.env/encours/neovim/src/nvim/lib/klist.h" 2


# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 34 "/home/toto/.env/encours/neovim/src/nvim/lib/klist.h" 2
# 9 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/event/multiqueue.h" 1





# 1 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 1



# 1 "/usr/include/assert.h" 1 3 4
# 5 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 2




typedef void (*argv_callback)(void **argv);
typedef struct message {
  argv_callback handler;
  void *argv[10];
} Event;
typedef void(*event_scheduler)(Event event, void *data);
# 30 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
static inline Event event_create(argv_callback cb, int argc, ...)
{
  
# 32 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 ((void) sizeof ((
# 32 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 argc <= 10
# 32 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 32 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 argc <= 10
# 32 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 ) ; else __assert_fail (
# 32 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 "argc <= EVENT_HANDLER_MAX_ARGC"
# 32 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/event/defs.h", 32, __extension__ __PRETTY_FUNCTION__); }))
# 32 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
                                       ;
  Event event;
  do { 
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 ((void) sizeof ((
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 argc <= 10
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 argc <= 10
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 ) ; else __assert_fail (
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 "argc <= EVENT_HANDLER_MAX_ARGC"
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/event/defs.h", 34, __extension__ __PRETTY_FUNCTION__); }))
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 ; (&event)->handler = cb; if (argc) { va_list args; 
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 __builtin_va_start(
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 args
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 ,
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 argc
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 )
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 ; for (int i = 0; i < argc; i++) { (&event)->argv[i] = 
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 __builtin_va_arg(
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 args
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 ,
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 void *
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 )
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 ; } 
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 __builtin_va_end(
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 args
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h" 3 4
 )
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/defs.h"
 ; } } while (0);
  return event;
}
# 7 "/home/toto/.env/encours/neovim/src/nvim/event/multiqueue.h" 2


typedef struct multiqueue MultiQueue;
typedef void (*put_callback)(MultiQueue *multiq, void *data);
# 11 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 2

typedef void * WatcherPtr;


struct __kl1_WatcherPtr { WatcherPtr data; struct __kl1_WatcherPtr *next; }; typedef struct __kl1_WatcherPtr kl1_WatcherPtr; typedef struct { size_t cnt, n, max; kl1_WatcherPtr **buf; } kmp_WatcherPtr_t; static inline kmp_WatcherPtr_t *kmp_init_WatcherPtr(void) { return xcalloc(1, sizeof(kmp_WatcherPtr_t)); } static inline void kmp_destroy_WatcherPtr(kmp_WatcherPtr_t *mp) __attribute__((unused)); static inline void kmp_destroy_WatcherPtr(kmp_WatcherPtr_t *mp) { size_t k; for (k = 0; k < mp->n; k++) { ; do { void **ptr_ = (void **)&(mp->buf[k]); xfree(*ptr_); *ptr_ = 
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 3 4
((void *)0)
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
; (void)(*ptr_); } while (0); } do { void **ptr_ = (void **)&(mp->buf); xfree(*ptr_); *ptr_ = 
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 3 4
((void *)0)
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
; (void)(*ptr_); } while (0); do { void **ptr_ = (void **)&(mp); xfree(*ptr_); *ptr_ = 
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 3 4
((void *)0)
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
; (void)(*ptr_); } while (0); } static inline kl1_WatcherPtr *kmp_alloc_WatcherPtr(kmp_WatcherPtr_t *mp) { mp->cnt++; if (mp->n == 0) { return xcalloc(1, sizeof(kl1_WatcherPtr)); } return mp->buf[--mp->n]; } static inline void kmp_free_WatcherPtr(kmp_WatcherPtr_t *mp, kl1_WatcherPtr *p) { mp->cnt--; if (mp->n == mp->max) { mp->max = mp->max ? (mp->max << 1) : 16; mp->buf = xrealloc(mp->buf, sizeof(kl1_WatcherPtr *) * mp->max); } mp->buf[mp->n++] = p; } typedef struct { kl1_WatcherPtr *head, *tail; kmp_WatcherPtr_t *mp; size_t size; } kl_WatcherPtr_t; static inline kl_WatcherPtr_t *kl_init_WatcherPtr(void) { kl_WatcherPtr_t *kl = xcalloc(1, sizeof(kl_WatcherPtr_t)); kl->mp = kmp_init_WatcherPtr(); kl->head = kl->tail = kmp_alloc_WatcherPtr(kl->mp); kl->head->next = 0; return kl; } static inline void kl_destroy_WatcherPtr(kl_WatcherPtr_t *kl) __attribute__((unused)); static inline void kl_destroy_WatcherPtr(kl_WatcherPtr_t *kl) { kl1_WatcherPtr *p; for (p = kl->head; p != kl->tail; p = p->next) { kmp_free_WatcherPtr(kl->mp, p); } kmp_free_WatcherPtr(kl->mp, p); kmp_destroy_WatcherPtr(kl->mp); do { void **ptr_ = (void **)&(kl); xfree(*ptr_); *ptr_ = 
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 3 4
((void *)0)
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
; (void)(*ptr_); } while (0); } static inline void kl_push_WatcherPtr(kl_WatcherPtr_t *kl, WatcherPtr d) { kl1_WatcherPtr *q, *p = kmp_alloc_WatcherPtr(kl->mp); q = kl->tail; p->next = 0; kl->tail->next = p; kl->tail = p; kl->size++; q->data = d; } static inline WatcherPtr kl_shift_at_WatcherPtr(kl_WatcherPtr_t *kl, kl1_WatcherPtr **n) { 
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 3 4
((void) sizeof ((
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
(*n)->next
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 3 4
) ? 1 : 0), __extension__ ({ if (
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
(*n)->next
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 3 4
) ; else __assert_fail (
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
"(*n)->next"
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h" 3 4
, "/home/toto/.env/encours/neovim/src/nvim/event/loop.h", 15, __extension__ __PRETTY_FUNCTION__); }))
# 15 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
; kl1_WatcherPtr *p; kl->size--; p = *n; *n = (*n)->next; if (p == kl->head) { kl->head = *n; } WatcherPtr d = p->data; kmp_free_WatcherPtr(kl->mp, p); return d; }

typedef struct loop {
  uv_loop_t uv;
  MultiQueue *events;
  MultiQueue *thread_events;
# 30 "/home/toto/.env/encours/neovim/src/nvim/event/loop.h"
  MultiQueue *fast_events;


  kl_WatcherPtr_t *children;
  uv_signal_t children_watcher;
  uv_timer_t children_kill_timer;


  uv_timer_t poll_timer;

  uv_async_t async;
  uv_mutex_t mutex;
  int recursive;
} Loop;
# 15 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 2
# 75 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern struct nvim_stats_s {
  int64_t fsync;
  int64_t redraw;
} g_stats ;
# 92 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern int Rows ;
extern int Columns ;
# 111 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
typedef off_t off_T;
# 125 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern int mod_mask ;


extern 
# 128 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 128 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           lua_attr_active ;
# 137 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern int cmdline_row;

extern int redraw_cmdline ;
extern int clear_cmdline ;
extern int mode_displayed ;
extern int cmdline_star ;
extern int redrawing_cmdline ;
extern int cmdline_was_last_drawn ;

extern int exec_from_reg ;





extern colnr_T dollar_vcol ;





extern int compl_length ;



extern int compl_interrupted ;



extern int compl_busy ;


extern int compl_cont_status ;
# 182 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern int cmdmsg_rl ;
extern int msg_col;
extern int msg_row;
extern int msg_scrolled;



extern 
# 189 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 189 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           msg_scrolled_ign ;


extern 
# 192 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 192 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           msg_did_scroll ;


extern char_u *keep_msg ;
extern int keep_msg_attr ;
extern int keep_msg_more ;
extern int need_fileinfo ;
extern int msg_scroll ;
extern int msg_didout ;
extern int msg_didany ;
extern int msg_nowait ;
extern int emsg_off ;

extern int info_message ;
extern int msg_hist_off ;
extern int need_clr_eos ;

extern int emsg_skip ;

extern int emsg_severe ;

extern int did_endif ;
extern dict_T vimvardict;
extern dict_T globvardict;
extern int did_emsg;

extern 
# 218 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 218 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           called_vim_beep;
extern int did_emsg_syntax;

extern int called_emsg;
extern int ex_exitval ;
extern 
# 223 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 223 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           emsg_on_display ;
extern int rc_did_emsg ;

extern int no_wait_return ;
extern int need_wait_return ;
extern int did_wait_return ;

extern int need_maketitle ;

extern int quit_more ;
extern int ex_keep_indent ;
extern int vgetc_busy ;

extern int didset_vim ;
extern int didset_vimruntime ;



extern int lines_left ;
extern int msg_no_more ;


extern char_u *sourcing_name ;
extern linenr_T sourcing_lnum ;

extern int ex_nesting_level ;
extern int debug_break_level ;
extern int debug_did_msg ;
extern int debug_tick ;
extern int debug_backtrace_level ;





extern int do_profiling ;




extern except_T *current_exception;



extern int need_rethrow ;



extern int check_cstack ;



extern int trylevel ;







extern int force_abort ;
# 293 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern struct msglist **msg_list ;





extern 
# 299 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 299 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           suppress_errthrow ;





extern except_T *caught_stack ;
# 316 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern 
# 316 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 316 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           may_garbage_collect ;
extern int want_garbage_collect ;
extern int garbage_collect_at_exit ;
# 332 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern sctx_T current_sctx ;

extern uint64_t current_channel_id ;

extern 
# 336 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 336 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           did_source_packages ;



extern struct caller_scope {
  sctx_T script_ctx;
  uint8_t *sourcing_name, *autocmd_fname, *autocmd_match;
  linenr_T sourcing_lnum;
  int autocmd_bufnr;
  void *funccalp;
} provider_caller_scope;
extern int provider_call_nesting ;


extern int t_colors ;





extern int highlight_match ;
extern linenr_T search_match_lines;
extern colnr_T search_match_endcol;

extern int no_smartcase ;

extern int need_check_timestamps ;

extern int did_check_timestamps ;

extern int no_check_timestamps ;

extern int autocmd_busy ;
extern int autocmd_no_enter ;
extern int autocmd_no_leave ;
extern int modified_was_set;
extern int did_filetype ;

extern int keep_filetype ;



extern bufref_T au_new_curbuf ;





extern buf_T *au_pending_free_buf ;
extern win_T *au_pending_free_win ;


extern int mouse_grid;
extern int mouse_row;
extern int mouse_col;
extern 
# 391 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 391 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           mouse_past_bottom ;
extern 
# 392 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 392 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           mouse_past_eol ;
extern int mouse_dragging ;



extern vimmenu_T *root_menu ;


extern int sys_menu ;



extern int updating_screen ;




extern win_T *firstwin;
extern win_T *lastwin;
extern win_T *prevwin ;
# 427 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern win_T *curwin;

extern win_T *aucmd_win;
extern int aucmd_win_used ;



extern frame_T *topframe;



extern tabpage_T *first_tabpage;
extern tabpage_T *lastused_tabpage;
extern tabpage_T *curtab;
extern int redraw_tabline ;






extern buf_T *firstbuf ;
extern buf_T *lastbuf ;
extern buf_T *curbuf ;
# 465 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern alist_T global_alist;
extern int max_alist_id ;
extern 
# 467 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 467 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           arg_had_last ;


extern int ru_col;
extern int ru_wid;
extern int sc_col;





extern int starting ;

extern 
# 480 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 480 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           exiting ;

extern int stdin_isatty ;

extern int stdout_isatty ;


extern volatile int full_screen ;


extern int restricted ;



extern int secure ;



extern int textlock ;


extern int curbuf_lock ;



extern int allbuf_lock ;



extern int sandbox ;


extern int silent_mode ;


extern pos_T VIsual;

extern int VIsual_active ;

extern int VIsual_select ;

extern int VIsual_reselect;

extern int VIsual_mode ;

extern int redo_VIsual_busy ;



extern pos_T where_paste_started;





extern 
# 535 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 535 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           did_ai ;



extern colnr_T ai_col ;





extern int end_comment_pending ;





extern int did_syncbind ;



extern 
# 555 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 555 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           did_si ;



extern 
# 559 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 559 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           can_si ;



extern 
# 563 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 563 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           can_si_back ;


extern pos_T saved_cursor ;


extern pos_T Insstart;





extern pos_T Insstart_orig;


extern int orig_line_count ;
extern int vr_lines_changed ;


extern int inhibit_delete_count ;
# 605 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern char_u *fenc_default ;
# 614 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern int State ;

extern 
# 616 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 616 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           debug_mode ;
extern 
# 617 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 617 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           finish_op ;
extern long opcount ;
extern int motion_force ;


extern int exmode_active ;
extern int ex_no_reprint ;

extern int reg_recording ;
extern int reg_executing ;

extern int no_mapping ;
extern int no_zero_mapping ;
extern int no_u_sync ;
extern int u_sync_once ;


extern 
# 634 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 634 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           force_restart_edit ;

extern int restart_edit ;
extern int arrow_used;



extern 
# 641 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 641 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           ins_at_eol ;

extern char_u *edit_submode ;
extern char_u *edit_submode_pre ;
extern char_u *edit_submode_extra ;
extern hlf_T edit_submode_highl;

extern int no_abbr ;

extern int mapped_ctrl_c ;

extern cmdmod_T cmdmod;

extern int msg_silent ;
extern int emsg_silent ;
extern 
# 656 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 656 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           emsg_noredir ;
extern 
# 657 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 657 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           cmd_silent ;







extern int swap_exists_action ;


extern int swap_exists_did_quit ;


extern char_u IObuff[(1024+1)];
extern char_u NameBuff[
# 672 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
                      4096
# 672 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
                              ];
extern char_u msg_buf[480];
extern char os_buf[


# 676 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
4096




# 680 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
];


extern int RedrawingDisabled ;

extern int readonlymode ;
extern int recoverymode ;


extern typebuf_T typebuf ;

extern int ex_normal_busy ;
extern int ex_normal_lock ;
extern int ignore_script ;
extern int stop_insert_mode;
extern 
# 695 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 695 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           KeyTyped;
extern int KeyStuffed;
extern int maptick ;

extern int must_redraw ;
extern 
# 700 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 700 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           skip_redraw ;
extern 
# 701 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 701 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           do_redraw ;
extern 
# 702 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 702 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           must_redraw_pum ;


extern int need_highlight_changed ;

extern FILE *scriptout ;


extern volatile int got_int ;

extern int bangredo ;
extern int searchcmdlen;
extern int reg_do_extmatch ;



extern reg_extmatch_T *re_extmatch_in ;

extern reg_extmatch_T *re_extmatch_out ;

extern int did_outofmem_msg ;

extern int did_swapwrite_msg ;

extern int global_busy ;
extern int listcmd_busy ;

extern int need_start_insertmode ;

extern char_u *last_cmdline ;
extern char_u *repeat_cmdline ;
extern char_u *new_last_cmdline ;
extern char_u *autocmd_fname ;
extern int autocmd_bufnr ;
extern char_u *autocmd_match ;
extern int did_cursorhold ;

extern int postponed_split ;
extern int postponed_split_flags ;
extern int postponed_split_tab ;
extern int g_do_tagpreview ;

extern int g_tag_at_cursor ;



extern int replace_offset ;

extern char_u *escape_chars ;


extern int keep_help_flag ;




extern char_u *empty_option ;

extern int redir_off ;
extern FILE *redir_fd ;
extern int redir_reg ;
extern int redir_vname ;
extern garray_T *capture_ga ;

extern char_u langmap_mapchar[256];

extern int save_p_ls ;
extern int save_p_wmh ;
extern int wild_menu_showing ;
enum {
  WM_SHOWN = 1,
  WM_SCROLLED = 2,
  WM_LIST = 3,
};





extern char *default_vim_dir;
extern char *default_vimruntime_dir;
extern char *default_lib_dir;
extern char_u *compiled_user;
extern char_u *compiled_sys;





extern char_u *globaldir ;


extern int km_stopsel ;
extern int km_startsel ;

extern int cedit_key ;
extern int cmdwin_type ;
extern int cmdwin_result ;
extern int cmdwin_level ;

extern char_u no_lines_msg[] ;




extern long sub_nsubs;
extern linenr_T sub_nlines;


extern char_u wim_flags[4];




extern int stl_syntax ;


extern 
# 819 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 819 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           no_hlsearch ;


extern linenr_T printer_page_num;


extern 
# 825 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 825 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           typebuf_was_filled ;
# 837 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
extern TriState virtual_op ;


extern disptick_T display_tick ;



extern linenr_T spell_redraw_lnum ;




extern char_u e_abort[] ;
extern char_u e_afterinit[]
                                                      ;
extern char_u e_api_spawn_failed[] ;
extern char_u e_argreq[] ;
extern char_u e_backslash[] ;
extern char_u e_cmdwin[]
                                                                            ;
extern char_u e_curdir[]
                                                                                 ;
extern char_u e_endif[] ;
extern char_u e_endtry[] ;
extern char_u e_endwhile[] ;
extern char_u e_endfor[] ;
extern char_u e_while[] ;
extern char_u e_for[] ;
extern char_u e_exists[] ;
extern char_u e_failed[] ;
extern char_u e_internal[] ;
extern char_u e_intern2[] ;
extern char_u e_interr[] ;
extern char_u e_invaddr[] ;
extern char_u e_invarg[] ;
extern char_u e_invarg2[] ;
extern char_u e_invargval[] ;
extern char_u e_invargNval[]
                                               ;
extern char_u e_duparg2[] ;
extern char_u e_invexpr2[] ;
extern char_u e_invrange[] ;
extern char_u e_invcmd[] ;
extern char_u e_isadir2[] ;
extern char_u e_invchan[] ;
extern char_u e_invchanjob[] ;
extern char_u e_jobtblfull[] ;
extern char_u e_jobspawn[]
                                                 ;
extern char_u e_channotpty[] ;
extern char_u e_stdiochan2[]
                                             ;
extern char_u e_invstream[] ;
extern char_u e_invstreamrpc[]
                                                       ;
extern char_u e_streamkey[]

            ;
extern char_u e_libcall[] ;
extern char e_fsync[] ;
extern char_u e_mkdir[] ;
extern char_u e_markinval[] ;
extern char_u e_marknotset[] ;
extern char_u e_modifiable[]
                                                         ;
extern char_u e_nesting[] ;
extern char_u e_noalt[] ;
extern char_u e_noabbr[] ;
extern char_u e_nobang[] ;
extern char_u e_nogroup[] ;
extern char_u e_noinstext[] ;
extern char_u e_nolastcmd[] ;
extern char_u e_nomap[] ;
extern char_u e_nomatch[] ;
extern char_u e_nomatch2[] ;
extern char_u e_noname[] ;
extern char_u e_nopresub[]
                                                          ;
extern char_u e_noprev[] ;
extern char_u e_noprevre[] ;
extern char_u e_norange[] ;
extern char_u e_noroom[] ;
extern char_u e_notmp[] ;
extern char_u e_notopen[] ;
extern char_u e_notopen_2[] ;
extern char_u e_notread[] ;
extern char_u e_null[] ;
extern char_u e_number_exp[] ;
extern char_u e_openerrf[] ;
extern char_u e_outofmem[] ;
extern char_u e_patnotf[] ;
extern char_u e_patnotf2[] ;
extern char_u e_positive[] ;
extern char_u e_prev_dir[]
                                                      ;

extern char_u e_quickfix[] ;
extern char_u e_loclist[] ;
extern char_u e_re_damg[] ;
extern char_u e_re_corr[] ;
extern char_u e_readonly[]
                                                         ;
extern char_u e_readonlyvar[]
                                                      ;
extern char_u e_dictreq[] ;
extern char_u e_toomanyarg[] ;
extern char_u e_dictkey[] ;
extern char_u e_listreq[] ;
extern char_u e_listdictarg[]
                                                         ;
extern char_u e_readerrf[] ;
extern char_u e_sandbox[] ;
extern char_u e_secure[] ;
extern char_u e_screenmode[]
                                                   ;
extern char_u e_scroll[] ;
extern char_u e_shellempty[] ;
extern char_u e_signdata[] ;
extern char_u e_swapclose[] ;
extern char_u e_tagstack[] ;
extern char_u e_toocompl[] ;
extern char_u e_longname[] ;
extern char_u e_toomsbra[] ;
extern char_u e_toomany[] ;
extern char_u e_trailing[] ;
extern char_u e_trailing2[] ;
extern char_u e_umark[] ;
extern char_u e_wildexpand[] ;
extern char_u e_winheight[]
                                                                   ;
extern char_u e_winwidth[]
                                                                 ;
extern char_u e_write[] ;
extern char_u e_zerocount[] ;
extern char_u e_usingsid[]
                                                ;
extern char_u e_maxmempat[]
                                                               ;
extern char_u e_emptybuf[] ;
extern char_u e_nobufnr[] ;

extern char_u e_invalpat[]
                                                     ;
extern char_u e_bufloaded[] ;
extern char_u e_notset[] ;
extern char_u e_invalidreg[] ;
extern char_u e_dirnotf[]
                                                 ;
extern char_u e_au_recursive[]
                                                   ;
extern char_u e_unsupportedoption[] ;
extern char_u e_fnametoolong[] ;
extern char_u e_float_as_string[] ;

extern char_u e_autocmd_err[]
                                                  ;
extern char_u e_cmdmap_err[]
                                               ;
extern char_u e_cmdmap_repeated[]
                                                                   ;
extern char_u e_cmdmap_key[]
                                                    ;

extern char_u e_api_error[]
                           ;

extern char e_luv_api_disabled[]
                                                           ;

extern char_u e_floatonly[]
                                                                     ;
extern char_u e_floatexchange[]
                                              ;


extern char top_bot_msg[] ;
extern char bot_top_msg[] ;

extern char line_msg[] ;


extern time_t starttime;

extern FILE *time_fd ;




extern int vim_ignored;


extern 
# 1028 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 1028 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           embedded_mode ;

extern 
# 1030 "/home/toto/.env/encours/neovim/src/nvim/globals.h" 3 4
      _Bool 
# 1030 "/home/toto/.env/encours/neovim/src/nvim/globals.h"
           headless_mode ;



typedef enum {
  kUnknown,
  kWorking,
  kBroken
} WorkingStatus;







typedef enum {
  kCdScopeInvalid = -1,
  kCdScopeWindow,
  kCdScopeTab,
  kCdScopeGlobal,
} CdScope;
# 301 "/home/toto/.env/encours/neovim/src/nvim/vim.h" 2
# 5 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/window.h" 1
# 6 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 2


# 1 "/home/toto/.env/encours/neovim/src/nvim/screen.h" 1
# 31 "/home/toto/.env/encours/neovim/src/nvim/screen.h"
extern ScreenGrid default_grid ;




typedef struct {
  enum {
    kStlClickDisabled = 0,
    kStlClickTabSwitch,
    kStlClickTabClose,
    kStlClickFuncRun,
  } type;
  int tabnr;
  char *func;
} StlClickDefinition;


typedef struct {
  StlClickDefinition def;
  const char *start;
} StlClickRecord;


extern StlClickDefinition *tab_page_click_defs;


extern long tab_page_click_defs_size;
# 9 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 10 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 1




# 1 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 1



# 1 "/home/toto/.env/encours/neovim/src/nvim/main.h" 1






extern Loop main_loop;
# 5 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/event/socket.h" 1






# 1 "/home/toto/.env/encours/neovim/src/nvim/event/rstream.h" 1




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 6 "/home/toto/.env/encours/neovim/src/nvim/event/rstream.h" 2




# 1 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h" 1




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 6 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h" 2




# 1 "/home/toto/.env/encours/neovim/src/nvim/rbuffer.h" 1
# 17 "/home/toto/.env/encours/neovim/src/nvim/rbuffer.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 18 "/home/toto/.env/encours/neovim/src/nvim/rbuffer.h" 2
# 71 "/home/toto/.env/encours/neovim/src/nvim/rbuffer.h"
typedef struct rbuffer RBuffer;



typedef void(*rbuffer_callback)(RBuffer *buf, void *data);

struct rbuffer {
  rbuffer_callback full_cb, nonfull_cb;
  void *data;
  size_t size;

  char *temp;
  char *end_ptr, *read_ptr, *write_ptr;
  char start_ptr[];
};
# 11 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h" 2

typedef struct stream Stream;







typedef void (*stream_read_cb)(Stream *stream, RBuffer *buf, size_t count,
    void *data, 
# 21 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h" 3 4
               _Bool 
# 21 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h"
                    eof);







typedef void (*stream_write_cb)(Stream *stream, void *data, int status);
typedef void (*stream_close_cb)(Stream *stream, void *data);

struct stream {
  
# 33 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h" 3 4
 _Bool 
# 33 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h"
      closed;
  
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h" 3 4
 _Bool 
# 34 "/home/toto/.env/encours/neovim/src/nvim/event/stream.h"
      did_eof;
  union {
    uv_pipe_t pipe;
    uv_tcp_t tcp;
    uv_idle_t idle;



  } uv;
  uv_stream_t *uvstream;
  uv_buf_t uvbuf;
  RBuffer *buffer;
  uv_file fd;
  stream_read_cb read_cb;
  stream_write_cb write_cb;
  void *cb_data;
  stream_close_cb close_cb, internal_close_cb;
  void *close_cb_data, *internal_data;
  size_t fpos;
  size_t curmem;
  size_t maxmem;
  size_t pending_reqs;
  size_t num_bytes;
  MultiQueue *events;
};
# 11 "/home/toto/.env/encours/neovim/src/nvim/event/rstream.h" 2
# 8 "/home/toto/.env/encours/neovim/src/nvim/event/socket.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/event/wstream.h" 1
# 12 "/home/toto/.env/encours/neovim/src/nvim/event/wstream.h"
typedef struct wbuffer WBuffer;
typedef void (*wbuffer_data_finalizer)(void *data);

struct wbuffer {
  size_t size, refcount;
  char *data;
  wbuffer_data_finalizer cb;
};
# 9 "/home/toto/.env/encours/neovim/src/nvim/event/socket.h" 2



typedef struct socket_watcher SocketWatcher;
typedef void (*socket_cb)(SocketWatcher *watcher, int result, void *data);
typedef void (*socket_close_cb)(SocketWatcher *watcher, void *data);

struct socket_watcher {

  char addr[256];

  union {
    struct {
      uv_tcp_t handle;
      struct addrinfo *addrinfo;
    } tcp;
    struct {
      uv_pipe_t handle;
    } pipe;
  } uv;
  uv_stream_t *stream;
  void *data;
  socket_cb cb;
  socket_close_cb close_cb;
  MultiQueue *events;
};
# 6 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 1







typedef enum {
  kProcessTypeUv,
  kProcessTypePty
} ProcessType;

typedef struct process Process;
typedef void (*process_exit_cb)(Process *proc, int status, void *data);
typedef void (*internal_process_cb)(Process *proc);

struct process {
  ProcessType type;
  Loop *loop;
  void *data;
  int pid, status, refcount;
  uint8_t exit_signal;
  uint64_t stopped_time;
  const char *cwd;
  char **argv;
  char **env;
  Stream in, out, err;
  process_exit_cb cb;
  internal_process_cb internal_exit_cb, internal_close_cb;
  
# 30 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
 _Bool 
# 30 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
      closed, detach;
  MultiQueue *events;
};


static inline Process process_init(Loop *loop, ProcessType type, void *data)
{
  return (Process) {
    .type = type,
    .data = data,
    .loop = loop,
    .events = 
# 41 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
             ((void *)0)
# 41 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
                 ,
    .pid = 0,
    .status = -1,
    .refcount = 0,
    .stopped_time = 0,
    .cwd = 
# 46 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
          ((void *)0)
# 46 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
              ,
    .argv = 
# 47 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
           ((void *)0)
# 47 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
               ,
    .in = { .closed = 
# 48 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
                     0 
# 48 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
                           },
    .out = { .closed = 
# 49 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
                      0 
# 49 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
                            },
    .err = { .closed = 
# 50 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
                      0 
# 50 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
                            },
    .cb = 
# 51 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
         ((void *)0)
# 51 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
             ,
    .closed = 
# 52 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
             0
# 52 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
                  ,
    .internal_close_cb = 
# 53 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
                        ((void *)0)
# 53 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
                            ,
    .internal_exit_cb = 
# 54 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
                       ((void *)0)
# 54 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
                           ,
    .detach = 
# 55 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
             0
  
# 56 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
 };
}

static inline 
# 59 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
             _Bool 
# 59 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
                  process_is_stopped(Process *proc)
{
  
# 61 "/home/toto/.env/encours/neovim/src/nvim/event/process.h" 3 4
 _Bool 
# 61 "/home/toto/.env/encours/neovim/src/nvim/event/process.h"
      exited = (proc->status >= 0);
  return exited || (proc->stopped_time != 0);
}
# 7 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/os/pty_process.h" 1






# 1 "/home/toto/.env/encours/neovim/src/nvim/os/pty_process_unix.h" 1



# 1 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4




# 1 "/usr/include/linux/ioctl.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 2 3 4
# 6 "/usr/include/linux/ioctl.h" 2 3 4
# 6 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 2 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 2 3 4



# 27 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 3 4
struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 30 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4




extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__ , __leaf__));


# 5 "/home/toto/.env/encours/neovim/src/nvim/os/pty_process_unix.h" 2




# 8 "/home/toto/.env/encours/neovim/src/nvim/os/pty_process_unix.h"
typedef struct pty_process {
  Process process;
  char *term_name;
  uint16_t width, height;
  struct winsize winsize;
  int tty_fd;
} PtyProcess;

static inline PtyProcess pty_process_init(Loop *loop, void *data)
{
  PtyProcess rv;
  rv.process = process_init(loop, kProcessTypePty, data);
  rv.term_name = 
# 20 "/home/toto/.env/encours/neovim/src/nvim/os/pty_process_unix.h" 3 4
                ((void *)0)
# 20 "/home/toto/.env/encours/neovim/src/nvim/os/pty_process_unix.h"
                    ;
  rv.width = 80;
  rv.height = 24;
  rv.tty_fd = -1;
  return rv;
}
# 8 "/home/toto/.env/encours/neovim/src/nvim/os/pty_process.h" 2
# 8 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/event/libuv_process.h" 1







typedef struct libuv_process {
  Process process;
  uv_process_t uv;
  uv_process_options_t uvopts;
  uv_stdio_container_t uvstdio[3];
} LibuvProcess;

static inline LibuvProcess libuv_process_init(Loop *loop, void *data)
{
  LibuvProcess rv = {
    .process = process_init(loop, kProcessTypeUv, data)
  };
  return rv;
}
# 9 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/msgpack_rpc/channel_defs.h" 1





# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 1
# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/util.h" 1
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sysdep.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sysdep.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdc.h" 1
# 11 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/version_number.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdc.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1






# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/detail/test.h" 1
# 8 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 2
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdc.h" 2
# 53 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdc.h"

# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdcpp.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdcpp.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdcpp.h" 2
# 115 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/stdcpp.h"







# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/objc.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/objc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/objc.h" 2
# 42 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language/objc.h"

# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/language.h" 2
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/alpha.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/alpha.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/alpha.h" 2
# 59 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/alpha.h"

# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/arm.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/arm.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/arm.h" 2
# 70 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/arm.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/blackfin.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/blackfin.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/blackfin.h" 2
# 46 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/blackfin.h"

# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/convex.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/convex.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/convex.h" 2
# 65 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/convex.h"

# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/ia64.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/ia64.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/ia64.h" 2
# 49 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/ia64.h"

# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/m68k.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/m68k.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/m68k.h" 2
# 82 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/m68k.h"

# 19 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/mips.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/mips.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/mips.h" 2
# 73 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/mips.h"

# 20 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/parisc.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/parisc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/parisc.h" 2
# 64 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/parisc.h"

# 21 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/ppc.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/ppc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/ppc.h" 2
# 72 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/ppc.h"

# 22 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/pyramid.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/pyramid.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/pyramid.h" 2
# 42 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/pyramid.h"

# 23 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/rs6k.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/rs6k.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/rs6k.h" 2
# 56 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/rs6k.h"

# 24 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sparc.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sparc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sparc.h" 2
# 54 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sparc.h"

# 25 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/superh.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/superh.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/superh.h" 2
# 67 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/superh.h"

# 26 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sys370.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sys370.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sys370.h" 2
# 43 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sys370.h"

# 27 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sys390.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sys390.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sys390.h" 2
# 43 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/sys390.h"

# 28 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 1







# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 2
# 82 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 1







# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 1
# 87 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h"

# 9 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 2
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 1







# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 1
# 87 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h"

# 9 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h"

# 10 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 38 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h"

# 46 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 2





# 10 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 38 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h"

# 83 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 2





# 9 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86/64.h"

# 10 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 38 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/x86.h"

# 29 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/z.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/z.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/z.h" 2
# 42 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture/z.h"

# 30 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/architecture.h" 2
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/borland.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/borland.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/borland.h" 2
# 58 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/borland.h"

# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/comeau.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/comeau.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/comeau.h" 2
# 56 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/comeau.h"

# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/compaq.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/compaq.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/compaq.h" 2
# 61 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/compaq.h"

# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/diab.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/diab.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/diab.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/diab.h"

# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/digitalmars.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/digitalmars.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/digitalmars.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/digitalmars.h"

# 19 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/dignus.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/dignus.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/dignus.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/dignus.h"

# 20 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/edg.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/edg.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/edg.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/edg.h"

# 21 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/ekopath.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/ekopath.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/ekopath.h" 2
# 52 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/ekopath.h"

# 22 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc_xml.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc_xml.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc_xml.h" 2
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc_xml.h"

# 23 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h" 1
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h"

# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc.h" 2
# 55 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/detail/comp_detected.h" 1
# 56 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/gcc.h" 2








# 24 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/greenhills.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/greenhills.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/greenhills.h" 2
# 61 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/greenhills.h"

# 25 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/hp_acc.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/hp_acc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/hp_acc.h" 2
# 56 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/hp_acc.h"

# 26 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/iar.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/iar.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/iar.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/iar.h"

# 27 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/ibm.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/ibm.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/ibm.h" 2
# 67 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/ibm.h"

# 28 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/intel.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/intel.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/intel.h" 2
# 60 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/intel.h"

# 29 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/kai.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/kai.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/kai.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/kai.h"

# 30 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/llvm.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/llvm.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h" 1
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h"

# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/llvm.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/llvm.h" 2
# 52 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/llvm.h"

# 31 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/metaware.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/metaware.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/metaware.h" 2
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/metaware.h"

# 32 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/metrowerks.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/metrowerks.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/metrowerks.h" 2
# 72 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/metrowerks.h"

# 33 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/microtec.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/microtec.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/microtec.h" 2
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/microtec.h"

# 34 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/mpw.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/mpw.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/mpw.h" 2
# 58 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/mpw.h"

# 35 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/palm.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/palm.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/palm.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/palm.h"

# 36 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/pgi.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/pgi.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/pgi.h" 2
# 55 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/pgi.h"

# 37 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/sgi_mipspro.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/sgi_mipspro.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/sgi_mipspro.h" 2
# 61 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/sgi_mipspro.h"

# 38 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/sunpro.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/sunpro.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/sunpro.h" 2
# 71 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/sunpro.h"

# 39 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/tendra.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/tendra.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/tendra.h" 2
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/tendra.h"

# 40 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/visualc.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/visualc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h" 1
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/clang.h"

# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/visualc.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/visualc.h" 2
# 86 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/visualc.h"

# 41 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/watcom.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/watcom.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/watcom.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler/watcom.h"

# 42 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/compiler.h" 2
# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/_prefix.h" 1
# 11 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/_prefix.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/detail/_cassert.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/detail/_cassert.h"
# 1 "/usr/include/assert.h" 1 3 4
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/detail/_cassert.h" 2
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/_prefix.h" 2
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c.h" 2

# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/gnu.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/gnu.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/gnu.h" 2




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/gnu.h" 2
# 61 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/gnu.h"

# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/uc.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/uc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/uc.h" 2
# 47 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/uc.h"

# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/vms.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/vms.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/vms.h" 2
# 47 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/vms.h"

# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/zos.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/zos.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/zos.h" 2
# 56 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/zos.h"

# 19 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c.h" 2
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/_prefix.h" 1
# 21 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/_prefix.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/detail/_exception.h" 1
# 22 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/_prefix.h" 2
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2

# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/cxx.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/cxx.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/cxx.h" 2
# 46 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/cxx.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/dinkumware.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/dinkumware.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/dinkumware.h" 2
# 52 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/dinkumware.h"

# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/libcomo.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/libcomo.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/libcomo.h" 2
# 47 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/libcomo.h"

# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/modena.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/modena.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/modena.h" 2
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/modena.h"

# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/msl.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/msl.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/msl.h" 2
# 53 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/msl.h"

# 19 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/roguewave.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/roguewave.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/roguewave.h" 2
# 56 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/roguewave.h"

# 20 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/sgi.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/sgi.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/sgi.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/sgi.h"

# 21 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/stdcpp3.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/stdcpp3.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/stdcpp3.h" 2
# 53 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/stdcpp3.h"

# 22 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/stlport.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/stlport.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/stlport.h" 2
# 59 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/stlport.h"

# 23 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/vacpp.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/vacpp.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/vacpp.h" 2
# 44 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std/vacpp.h"

# 24 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/std.h" 2
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library.h" 2
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/aix.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/aix.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/aix.h" 2
# 66 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/aix.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/amigaos.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/amigaos.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/amigaos.h" 2
# 46 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/amigaos.h"

# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/android.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/android.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/android.h" 2
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/android.h"

# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/beos.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/beos.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/beos.h" 2
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/beos.h"

# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h" 1
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/ios.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/ios.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/ios.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/ios.h"

# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 21 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h" 2
# 65 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h"

# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 20 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 52 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 11 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"

# 95 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 11 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"

# 95 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"

# 96 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 11 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"

# 95 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"

# 96 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 60 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h"

# 97 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 11 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"

# 95 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"

# 96 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 60 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h"

# 97 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 171 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h"

# 98 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 11 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"

# 95 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"

# 96 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 60 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h"

# 97 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 171 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h"

# 98 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 84 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h"

# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2





# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h" 2
# 84 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h"

# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2





# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h" 2
# 171 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h"

# 98 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 84 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h"

# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2





# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h" 2
# 60 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h"

# 97 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 171 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h"

# 98 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 84 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h"

# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2





# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 2
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"

# 96 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 60 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h"

# 97 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 171 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h"

# 98 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 84 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h"

# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2





# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 2
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"

# 53 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"

# 54 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 60 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h"

# 55 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 171 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h"

# 56 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 84 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h"

# 57 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 103 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"

# 19 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/cygwin.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/cygwin.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/cygwin.h" 2
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/cygwin.h"

# 20 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/haiku.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/haiku.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/haiku.h" 2
# 46 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/haiku.h"

# 21 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/hpux.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/hpux.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/hpux.h" 2
# 47 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/hpux.h"

# 22 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/irix.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/irix.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/irix.h" 2
# 46 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/irix.h"

# 23 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/ios.h" 1
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/ios.h"

# 24 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/linux.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/linux.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/linux.h" 2
# 38 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/linux.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/detail/os_detected.h" 1
# 39 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/linux.h" 2








# 25 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h" 1
# 65 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h"

# 26 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/os400.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/os400.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/os400.h" 2
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/os400.h"

# 27 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/qnxnto.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/qnxnto.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/qnxnto.h" 2
# 59 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/qnxnto.h"

# 28 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/solaris.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/solaris.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/solaris.h" 2
# 46 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/solaris.h"

# 29 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/unix.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/unix.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/unix.h" 2
# 75 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/unix.h"


# 30 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/vms.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/vms.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/vms.h" 2
# 52 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/vms.h"

# 31 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h"

# 32 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os.h" 2
# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other/endian.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other/endian.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/gnu.h" 1
# 61 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/library/c/gnu.h"

# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h" 1
# 65 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/macos.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 48 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"

# 95 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"

# 96 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 60 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/free.h"

# 97 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 171 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/open.h"

# 98 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 84 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd/net.h"

# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/bsd.h" 2





# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/android.h" 1
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/android.h"

# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 195 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other/endian.h"










# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/other.h" 2
# 19 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/mingw.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/mingw.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/mingw.h" 2
# 64 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/mingw.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_desktop.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_desktop.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_desktop.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_desktop.h" 2
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_desktop.h"

# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_store.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_store.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_store.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_store.h" 2
# 43 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_store.h"

# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_phone.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_phone.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_phone.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_phone.h" 2
# 43 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_phone.h"

# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_runtime.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_runtime.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_runtime.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/os/windows.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_runtime.h" 2
# 45 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform/windows_runtime.h"

# 19 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/platform.h" 2
# 20 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd.h" 1
# 9 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86/versions.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86.h" 2
# 123 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86.h"

# 10 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd/versions.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd.h" 2
# 87 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd.h"

# 11 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/arm.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/arm.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/arm/versions.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/arm.h" 2
# 57 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/arm.h"

# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/ppc.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/ppc.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/ppc/versions.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/ppc.h" 2
# 69 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd/ppc.h"

# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd.h" 2
# 119 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware/simd.h"

# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/hardware.h" 2
# 21 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2

# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef/version.h" 1
# 23 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/predef.h" 2
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sysdep.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sysdep.h" 2
# 63 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sysdep.h"
    typedef unsigned int _msgpack_atomic_counter_t;
# 84 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sysdep.h"
# 1 "/usr/include/byteswap.h" 1 3 4
# 24 "/usr/include/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 25 "/usr/include/byteswap.h" 2 3 4
# 85 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sysdep.h" 2
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 2
# 26 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
typedef struct msgpack_zone_finalizer {
    void (*func)(void* data);
    void* data;
} msgpack_zone_finalizer;

typedef struct msgpack_zone_finalizer_array {
    msgpack_zone_finalizer* tail;
    msgpack_zone_finalizer* end;
    msgpack_zone_finalizer* array;
} msgpack_zone_finalizer_array;

struct msgpack_zone_chunk;
typedef struct msgpack_zone_chunk msgpack_zone_chunk;

typedef struct msgpack_zone_chunk_list {
    size_t free;
    char* ptr;
    msgpack_zone_chunk* head;
} msgpack_zone_chunk_list;

typedef struct msgpack_zone {
    msgpack_zone_chunk_list chunk_list;
    msgpack_zone_finalizer_array finalizer_array;
    size_t chunk_size;
} msgpack_zone;







# 57 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 3 4
_Bool 
# 57 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
    msgpack_zone_init(msgpack_zone* zone, size_t chunk_size);

void msgpack_zone_destroy(msgpack_zone* zone);


msgpack_zone* msgpack_zone_new(size_t chunk_size);

void msgpack_zone_free(msgpack_zone* zone);

static inline void* msgpack_zone_malloc(msgpack_zone* zone, size_t size);
static inline void* msgpack_zone_malloc_no_align(msgpack_zone* zone, size_t size);

static inline 
# 69 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 3 4
             _Bool 
# 69 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
                  msgpack_zone_push_finalizer(msgpack_zone* zone,
        void (*func)(void* data), void* data);

static inline void msgpack_zone_swap(msgpack_zone* a, msgpack_zone* b);



# 75 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 3 4
_Bool 
# 75 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
    msgpack_zone_is_empty(msgpack_zone* zone);


void msgpack_zone_clear(msgpack_zone* zone);
# 87 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"

void* msgpack_zone_malloc_expand(msgpack_zone* zone, size_t size);

static inline void* msgpack_zone_malloc_no_align(msgpack_zone* zone, size_t size)
{
    char* ptr;
    msgpack_zone_chunk_list* cl = &zone->chunk_list;

    if(zone->chunk_list.free < size) {
        return msgpack_zone_malloc_expand(zone, size);
    }

    ptr = cl->ptr;
    cl->free -= size;
    cl->ptr += size;

    return ptr;
}

static inline void* msgpack_zone_malloc(msgpack_zone* zone, size_t size)
{
    char* aligned =
        (char*)(
            (size_t)(
                zone->chunk_list.ptr + (sizeof(void*) - 1)
            ) / sizeof(void*) * sizeof(void*)
        );
    size_t adjusted_size = size + (aligned - zone->chunk_list.ptr);
    if(zone->chunk_list.free >= adjusted_size) {
        zone->chunk_list.free -= adjusted_size;
        zone->chunk_list.ptr += adjusted_size;
        return aligned;
    }
    {
        void* ptr = msgpack_zone_malloc_expand(zone, size + (sizeof(void*) - 1));
        if (ptr) {
            return (char*)((size_t)(ptr) / sizeof(void*) * sizeof(void*));
        }
    }
    return 
# 126 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 3 4
          ((void *)0)
# 126 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
              ;
}



# 130 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 3 4
_Bool 
# 130 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
    msgpack_zone_push_finalizer_expand(msgpack_zone* zone,
        void (*func)(void* data), void* data);

static inline 
# 133 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 3 4
             _Bool 
# 133 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
                  msgpack_zone_push_finalizer(msgpack_zone* zone,
        void (*func)(void* data), void* data)
{
    msgpack_zone_finalizer_array* const fa = &zone->finalizer_array;
    msgpack_zone_finalizer* fin = fa->tail;

    if(fin == fa->end) {
        return msgpack_zone_push_finalizer_expand(zone, func, data);
    }

    fin->func = func;
    fin->data = data;

    ++fa->tail;

    return 
# 148 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 3 4
          1
# 148 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h"
              ;
}

static inline void msgpack_zone_swap(msgpack_zone* a, msgpack_zone* b)
{
    msgpack_zone tmp = *a;
    *a = *b;
    *b = tmp;
}
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h" 2
# 27 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h"
typedef enum {
    MSGPACK_OBJECT_NIL = 0x00,
    MSGPACK_OBJECT_BOOLEAN = 0x01,
    MSGPACK_OBJECT_POSITIVE_INTEGER = 0x02,
    MSGPACK_OBJECT_NEGATIVE_INTEGER = 0x03,
    MSGPACK_OBJECT_FLOAT32 = 0x0a,
    MSGPACK_OBJECT_FLOAT64 = 0x04,
    MSGPACK_OBJECT_FLOAT = 0x04,



    MSGPACK_OBJECT_STR = 0x05,
    MSGPACK_OBJECT_ARRAY = 0x06,
    MSGPACK_OBJECT_MAP = 0x07,
    MSGPACK_OBJECT_BIN = 0x08,
    MSGPACK_OBJECT_EXT = 0x09
} msgpack_object_type;


struct msgpack_object;
struct msgpack_object_kv;

typedef struct {
    uint32_t size;
    struct msgpack_object* ptr;
} msgpack_object_array;

typedef struct {
    uint32_t size;
    struct msgpack_object_kv* ptr;
} msgpack_object_map;

typedef struct {
    uint32_t size;
    const char* ptr;
} msgpack_object_str;

typedef struct {
    uint32_t size;
    const char* ptr;
} msgpack_object_bin;

typedef struct {
    int8_t type;
    uint32_t size;
    const char* ptr;
} msgpack_object_ext;

typedef union {
    
# 76 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h" 3 4
   _Bool 
# 76 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h"
        boolean;
    uint64_t u64;
    int64_t i64;



    double f64;
    msgpack_object_array array;
    msgpack_object_map map;
    msgpack_object_str str;
    msgpack_object_bin bin;
    msgpack_object_ext ext;
} msgpack_object_union;

typedef struct msgpack_object {
    msgpack_object_type type;
    msgpack_object_union via;
} msgpack_object;

typedef struct msgpack_object_kv {
    msgpack_object key;
    msgpack_object val;
} msgpack_object_kv;


void msgpack_object_print(FILE* out, msgpack_object o);


int msgpack_object_print_buffer(char *buffer, size_t buffer_size, msgpack_object o);



# 107 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h" 3 4
_Bool 
# 107 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h"
    msgpack_object_equal(const msgpack_object x, const msgpack_object y);
# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/zone.h" 1
# 19 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_define.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_define.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sysdep.h" 1
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_define.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_define.h" 2
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/object.h" 1
# 15 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h" 2
# 35 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h"
typedef int (*msgpack_packer_write)(void* data, const char* buf, size_t len);

typedef struct msgpack_packer {
    void* data;
    msgpack_packer_write callback;
} msgpack_packer;

static void msgpack_packer_init(msgpack_packer* pk, void* data, msgpack_packer_write callback);

static msgpack_packer* msgpack_packer_new(void* data, msgpack_packer_write callback);
static void msgpack_packer_free(msgpack_packer* pk);

static int msgpack_pack_char(msgpack_packer* pk, char d);

static int msgpack_pack_signed_char(msgpack_packer* pk, signed char d);
static int msgpack_pack_short(msgpack_packer* pk, short d);
static int msgpack_pack_int(msgpack_packer* pk, int d);
static int msgpack_pack_long(msgpack_packer* pk, long d);
static int msgpack_pack_long_long(msgpack_packer* pk, long long d);
static int msgpack_pack_unsigned_char(msgpack_packer* pk, unsigned char d);
static int msgpack_pack_unsigned_short(msgpack_packer* pk, unsigned short d);
static int msgpack_pack_unsigned_int(msgpack_packer* pk, unsigned int d);
static int msgpack_pack_unsigned_long(msgpack_packer* pk, unsigned long d);
static int msgpack_pack_unsigned_long_long(msgpack_packer* pk, unsigned long long d);

static int msgpack_pack_uint8(msgpack_packer* pk, uint8_t d);
static int msgpack_pack_uint16(msgpack_packer* pk, uint16_t d);
static int msgpack_pack_uint32(msgpack_packer* pk, uint32_t d);
static int msgpack_pack_uint64(msgpack_packer* pk, uint64_t d);
static int msgpack_pack_int8(msgpack_packer* pk, int8_t d);
static int msgpack_pack_int16(msgpack_packer* pk, int16_t d);
static int msgpack_pack_int32(msgpack_packer* pk, int32_t d);
static int msgpack_pack_int64(msgpack_packer* pk, int64_t d);

static int msgpack_pack_fix_uint8(msgpack_packer* pk, uint8_t d);
static int msgpack_pack_fix_uint16(msgpack_packer* pk, uint16_t d);
static int msgpack_pack_fix_uint32(msgpack_packer* pk, uint32_t d);
static int msgpack_pack_fix_uint64(msgpack_packer* pk, uint64_t d);
static int msgpack_pack_fix_int8(msgpack_packer* pk, int8_t d);
static int msgpack_pack_fix_int16(msgpack_packer* pk, int16_t d);
static int msgpack_pack_fix_int32(msgpack_packer* pk, int32_t d);
static int msgpack_pack_fix_int64(msgpack_packer* pk, int64_t d);

static int msgpack_pack_float(msgpack_packer* pk, float d);
static int msgpack_pack_double(msgpack_packer* pk, double d);

static int msgpack_pack_nil(msgpack_packer* pk);
static int msgpack_pack_true(msgpack_packer* pk);
static int msgpack_pack_false(msgpack_packer* pk);

static int msgpack_pack_array(msgpack_packer* pk, size_t n);

static int msgpack_pack_map(msgpack_packer* pk, size_t n);

static int msgpack_pack_str(msgpack_packer* pk, size_t l);
static int msgpack_pack_str_body(msgpack_packer* pk, const void* b, size_t l);

static int msgpack_pack_v4raw(msgpack_packer* pk, size_t l);
static int msgpack_pack_v4raw_body(msgpack_packer* pk, const void* b, size_t l);

static int msgpack_pack_bin(msgpack_packer* pk, size_t l);
static int msgpack_pack_bin_body(msgpack_packer* pk, const void* b, size_t l);

static int msgpack_pack_ext(msgpack_packer* pk, size_t l, int8_t type);
static int msgpack_pack_ext_body(msgpack_packer* pk, const void* b, size_t l);


int msgpack_pack_object(msgpack_packer* pk, msgpack_object d);
# 122 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h"
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 1
# 271 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
inline int msgpack_pack_fix_uint8(msgpack_packer* x, uint8_t d)
{
    unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]};
    return (*(x)->callback)((x)->data, (const char*)buf, 2);
}

inline int msgpack_pack_fix_uint16(msgpack_packer* x, uint16_t d)
{
    unsigned char buf[3];
    buf[0] = 0xcd; do { uint16_t val = ntohs(d); memcpy(&buf[1], &val, 2); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 3);
}

inline int msgpack_pack_fix_uint32(msgpack_packer* x, uint32_t d)
{
    unsigned char buf[5];
    buf[0] = 0xce; do { uint32_t val = ntohl(d); memcpy(&buf[1], &val, 4); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 5);
}

inline int msgpack_pack_fix_uint64(msgpack_packer* x, uint64_t d)
{
    unsigned char buf[9];
    buf[0] = 0xcf; do { uint64_t val = 
# 294 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
                  __bswap_64 (
# 294 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
                  d
# 294 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
                  )
# 294 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
                  ; memcpy(&buf[1], &val, 8); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 9);
}

inline int msgpack_pack_fix_int8(msgpack_packer* x, int8_t d)
{
    unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]};
    return (*(x)->callback)((x)->data, (const char*)buf, 2);
}

inline int msgpack_pack_fix_int16(msgpack_packer* x, int16_t d)
{
    unsigned char buf[3];
    buf[0] = 0xd1; do { uint16_t val = ntohs(d); memcpy(&buf[1], &val, 2); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 3);
}

inline int msgpack_pack_fix_int32(msgpack_packer* x, int32_t d)
{
    unsigned char buf[5];
    buf[0] = 0xd2; do { uint32_t val = ntohl(d); memcpy(&buf[1], &val, 4); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 5);
}

inline int msgpack_pack_fix_int64(msgpack_packer* x, int64_t d)
{
    unsigned char buf[9];
    buf[0] = 0xd3; do { uint64_t val = 
# 321 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
                  __bswap_64 (
# 321 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
                  d
# 321 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
                  )
# 321 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
                  ; memcpy(&buf[1], &val, 8); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 9);
}





inline int msgpack_pack_uint8(msgpack_packer* x, uint8_t d)
{
    do { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } while(0);
}

inline int msgpack_pack_uint16(msgpack_packer* x, uint16_t d)
{
    do { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } while(0);
}

inline int msgpack_pack_uint32(msgpack_packer* x, uint32_t d)
{
    do { if(d < (1<<8)) { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } } while(0);
}

inline int msgpack_pack_uint64(msgpack_packer* x, uint64_t d)
{
    do { if(d < (1ULL<<8)) { if(d < (1ULL<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1ULL<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else if(d < (1ULL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = 
# 346 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 346 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 346 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 346 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } while(0);
}

inline int msgpack_pack_int8(msgpack_packer* x, int8_t d)
{
    do { if(d < -(1<<5)) { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } } while(0);
}

inline int msgpack_pack_int16(msgpack_packer* x, int16_t d)
{
    do { if(d < -(1<<5)) { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ntohs((int16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } } while(0);
}

inline int msgpack_pack_int32(msgpack_packer* x, int32_t d)
{
    do { if(d < -(1<<5)) { if(d < -(1<<15)) { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = ntohl((int32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ntohs((int16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else if(d < (1<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } } while(0);
}

inline int msgpack_pack_int64(msgpack_packer* x, int64_t d)
{
    do { if(d < -(1LL<<5)) { if(d < -(1LL<<15)) { if(d < -(1LL<<31)) { unsigned char buf[9]; buf[0] = 0xd3; do { uint64_t val = 
# 366 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 366 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 366 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 366 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } else { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = ntohl((int32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } else { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ntohs((int16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1LL<<16)) { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } else { if(d < (1LL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = 
# 366 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 366 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 366 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 366 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } } while(0);
}

inline int msgpack_pack_char(msgpack_packer* x, char d)
{


        do { if(d < -(1<<5)) { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } } while(0);






}

inline int msgpack_pack_signed_char(msgpack_packer* x, signed char d)
{
    do { if(d < -(1<<5)) { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } } while(0);
}

inline int msgpack_pack_unsigned_char(msgpack_packer* x, unsigned char d)
{
    do { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } while(0);
}



inline int msgpack_pack_short(msgpack_packer* x, short d)
{
# 407 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < -(1<<5)) { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ntohs((int16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } } while(0);
# 423 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_int(msgpack_packer* x, int d)
{




    do { if(d < -(1<<5)) { if(d < -(1<<15)) { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = ntohl((int32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ntohs((int16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else if(d < (1<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } } while(0);
# 454 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_long(msgpack_packer* x, long d)
{






    do { if(d < -(1LL<<5)) { if(d < -(1LL<<15)) { if(d < -(1LL<<31)) { unsigned char buf[9]; buf[0] = 0xd3; do { uint64_t val = 
# 464 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 464 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 464 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 464 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } else { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = ntohl((int32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } else { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ntohs((int16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1LL<<16)) { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } else { if(d < (1LL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = 
# 464 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 464 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 464 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 464 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } } while(0);
# 485 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_long_long(msgpack_packer* x, long long d)
{
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < -(1LL<<5)) { if(d < -(1LL<<15)) { if(d < -(1LL<<31)) { unsigned char buf[9]; buf[0] = 0xd3; do { uint64_t val = 
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } else { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = ntohl((int32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } else { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ntohs((int16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1LL<<16)) { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } else { if(d < (1LL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = 
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 504 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } } while(0);
# 516 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_unsigned_short(msgpack_packer* x, unsigned short d)
{
# 531 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } while(0);
# 547 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_unsigned_int(msgpack_packer* x, unsigned int d)
{




    do { if(d < (1<<8)) { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } } while(0);
# 578 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_unsigned_long(msgpack_packer* x, unsigned long d)
{






    do { if(d < (1ULL<<8)) { if(d < (1ULL<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1ULL<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else if(d < (1ULL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = 
# 588 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 588 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 588 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 588 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } while(0);
# 609 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_unsigned_long_long(msgpack_packer* x, unsigned long long d)
{
# 628 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < (1ULL<<8)) { if(d < (1ULL<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1ULL<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ntohs((uint16_t)d); memcpy(&buf[1], &val, 2); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else if(d < (1ULL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = ntohl((uint32_t)d); memcpy(&buf[1], &val, 4); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = 
# 628 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 628 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   d
# 628 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 628 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } while(0);
# 640 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
}
# 651 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
inline int msgpack_pack_float(msgpack_packer* x, float d)
{
    unsigned char buf[5];
    union { float f; uint32_t i; } mem;
    mem.f = d;
    buf[0] = 0xca; do { uint32_t val = ntohl(mem.i); memcpy(&buf[1], &val, 4); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 5);
}

inline int msgpack_pack_double(msgpack_packer* x, double d)
{
    unsigned char buf[9];
    union { double f; uint64_t i; } mem;
    mem.f = d;
    buf[0] = 0xcb;






    do { uint64_t val = 
# 672 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   __bswap_64 (
# 672 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   mem.i
# 672 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h" 3 4
   )
# 672 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack_template.h"
   ; memcpy(&buf[1], &val, 8); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 9);
}






inline int msgpack_pack_nil(msgpack_packer* x)
{
    static const unsigned char d = 0xc0;
    return (*(x)->callback)((x)->data, (const char*)&d, 1);
}






inline int msgpack_pack_true(msgpack_packer* x)
{
    static const unsigned char d = 0xc3;
    return (*(x)->callback)((x)->data, (const char*)&d, 1);
}

inline int msgpack_pack_false(msgpack_packer* x)
{
    static const unsigned char d = 0xc2;
    return (*(x)->callback)((x)->data, (const char*)&d, 1);
}






inline int msgpack_pack_array(msgpack_packer* x, size_t n)
{
    if(n < 16) {
        unsigned char d = 0x90 | (uint8_t)n;
        return (*(x)->callback)((x)->data, (const char*)&d, 1);
    } else if(n < 65536) {
        unsigned char buf[3];
        buf[0] = 0xdc; do { uint16_t val = ntohs((uint16_t)n); memcpy(&buf[1], &val, 2); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xdd; do { uint32_t val = ntohl((uint32_t)n); memcpy(&buf[1], &val, 4); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}






inline int msgpack_pack_map(msgpack_packer* x, size_t n)
{
    if(n < 16) {
        unsigned char d = 0x80 | (uint8_t)n;
        return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1);
    } else if(n < 65536) {
        unsigned char buf[3];
        buf[0] = 0xde; do { uint16_t val = ntohs((uint16_t)n); memcpy(&buf[1], &val, 2); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xdf; do { uint32_t val = ntohl((uint32_t)n); memcpy(&buf[1], &val, 4); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}






inline int msgpack_pack_str(msgpack_packer* x, size_t l)
{
    if(l < 32) {
        unsigned char d = 0xa0 | (uint8_t)l;
        return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1);
    } else if(l < 256) {
        unsigned char buf[2];
        buf[0] = 0xd9; buf[1] = (uint8_t)l;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } else if(l < 65536) {
        unsigned char buf[3];
        buf[0] = 0xda; do { uint16_t val = ntohs((uint16_t)l); memcpy(&buf[1], &val, 2); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xdb; do { uint32_t val = ntohl((uint32_t)l); memcpy(&buf[1], &val, 4); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}

inline int msgpack_pack_str_body(msgpack_packer* x, const void* b, size_t l)
{
    return (*(x)->callback)((x)->data, (const char*)(const unsigned char*)b, l);
}





inline int msgpack_pack_v4raw(msgpack_packer* x, size_t l)
{
    if(l < 32) {
        unsigned char d = 0xa0 | (uint8_t)l;
        return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1);
    } else if(l < 65536) {
        unsigned char buf[3];
        buf[0] = 0xda; do { uint16_t val = ntohs((uint16_t)l); memcpy(&buf[1], &val, 2); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xdb; do { uint32_t val = ntohl((uint32_t)l); memcpy(&buf[1], &val, 4); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}

inline int msgpack_pack_v4raw_body(msgpack_packer* x, const void* b, size_t l)
{
    return (*(x)->callback)((x)->data, (const char*)(const unsigned char*)b, l);
}





inline int msgpack_pack_bin(msgpack_packer* x, size_t l)
{
    if(l < 256) {
        unsigned char buf[2];
        buf[0] = 0xc4; buf[1] = (uint8_t)l;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } else if(l < 65536) {
        unsigned char buf[3];
        buf[0] = 0xc5; do { uint16_t val = ntohs((uint16_t)l); memcpy(&buf[1], &val, 2); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xc6; do { uint32_t val = ntohl((uint32_t)l); memcpy(&buf[1], &val, 4); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}

inline int msgpack_pack_bin_body(msgpack_packer* x, const void* b, size_t l)
{
    return (*(x)->callback)((x)->data, (const char*)(const unsigned char*)b, l);
}





inline int msgpack_pack_ext(msgpack_packer* x, size_t l, int8_t type)
{
    switch(l) {
    case 1: {
        unsigned char buf[2];
        buf[0] = 0xd4;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    case 2: {
        unsigned char buf[2];
        buf[0] = 0xd5;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    case 4: {
        unsigned char buf[2];
        buf[0] = 0xd6;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    case 8: {
        unsigned char buf[2];
        buf[0] = 0xd7;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    case 16: {
        unsigned char buf[2];
        buf[0] = 0xd8;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    default:
        if(l < 256) {
            unsigned char buf[3];
            buf[0] = 0xc7;
            buf[1] = (unsigned char)l;
            buf[2] = type;
            return (*(x)->callback)((x)->data, (const char*)buf, 3);
        } else if(l < 65536) {
            unsigned char buf[4];
            buf[0] = 0xc8;
            do { uint16_t val = ntohs(l); memcpy(&buf[1], &val, 2); } while(0);
            buf[3] = type;
            return (*(x)->callback)((x)->data, (const char*)buf, 4);
        } else {
            unsigned char buf[6];
            buf[0] = 0xc9;
            do { uint32_t val = ntohl(l); memcpy(&buf[1], &val, 4); } while(0);
            buf[5] = type;
            return (*(x)->callback)((x)->data, (const char*)buf, 6);
        }
        break;
    }
}

inline int msgpack_pack_ext_body(msgpack_packer* x, const void* b, size_t l)
{
    return (*(x)->callback)((x)->data, (const char*)(const unsigned char*)b, l);
}
# 123 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h" 2

inline void msgpack_packer_init(msgpack_packer* pk, void* data, msgpack_packer_write callback)
{
    pk->data = data;
    pk->callback = callback;
}

inline msgpack_packer* msgpack_packer_new(void* data, msgpack_packer_write callback)
{
    msgpack_packer* pk = (msgpack_packer*)calloc(1, sizeof(msgpack_packer));
    if(!pk) { return 
# 133 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h" 3 4
                    ((void *)0)
# 133 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/pack.h"
                        ; }
    msgpack_packer_init(pk, data, callback);
    return pk;
}

inline void msgpack_packer_free(msgpack_packer* pk)
{
    free(pk);
}
# 20 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 1
# 28 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
typedef struct msgpack_unpacked {
    msgpack_zone* zone;
    msgpack_object data;
} msgpack_unpacked;

typedef enum {
    MSGPACK_UNPACK_SUCCESS = 2,
    MSGPACK_UNPACK_EXTRA_BYTES = 1,
    MSGPACK_UNPACK_CONTINUE = 0,
    MSGPACK_UNPACK_PARSE_ERROR = -1,
    MSGPACK_UNPACK_NOMEM_ERROR = -2
} msgpack_unpack_return;



msgpack_unpack_return
msgpack_unpack_next(msgpack_unpacked* result,
        const char* data, size_t len, size_t* off);
# 56 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
typedef struct msgpack_unpacker {
    char* buffer;
    size_t used;
    size_t free;
    size_t off;
    size_t parsed;
    msgpack_zone* z;
    size_t initial_buffer_size;
    void* ctx;
} msgpack_unpacker;
# 76 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"


# 77 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
_Bool 
# 77 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
    msgpack_unpacker_init(msgpack_unpacker* mpac, size_t initial_buffer_size);





void msgpack_unpacker_destroy(msgpack_unpacker* mpac);







msgpack_unpacker* msgpack_unpacker_new(size_t initial_buffer_size);





void msgpack_unpacker_free(msgpack_unpacker* mpac);
# 111 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
static inline 
# 111 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
             _Bool 
# 111 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
                    msgpack_unpacker_reserve_buffer(msgpack_unpacker* mpac, size_t size);
# 120 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
static inline char* msgpack_unpacker_buffer(msgpack_unpacker* mpac);
# 129 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
static inline size_t msgpack_unpacker_buffer_capacity(const msgpack_unpacker* mpac);
# 138 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
static inline void msgpack_unpacker_buffer_consumed(msgpack_unpacker* mpac, size_t size);








msgpack_unpack_return msgpack_unpacker_next(msgpack_unpacker* mpac, msgpack_unpacked* pac);
# 156 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"

msgpack_unpack_return msgpack_unpacker_next_with_size(msgpack_unpacker* mpac,
                                                      msgpack_unpacked* result,
                                                      size_t *p_bytes);







static inline void msgpack_unpacked_init(msgpack_unpacked* result);




static inline void msgpack_unpacked_destroy(msgpack_unpacked* result);





static inline msgpack_zone* msgpack_unpacked_release_zone(msgpack_unpacked* result);



int msgpack_unpacker_execute(msgpack_unpacker* mpac);


msgpack_object msgpack_unpacker_data(msgpack_unpacker* mpac);


msgpack_zone* msgpack_unpacker_release_zone(msgpack_unpacker* mpac);


void msgpack_unpacker_reset_zone(msgpack_unpacker* mpac);


void msgpack_unpacker_reset(msgpack_unpacker* mpac);

static inline size_t msgpack_unpacker_message_size(const msgpack_unpacker* mpac);







msgpack_unpack_return
msgpack_unpack(const char* data, size_t len, size_t* off,
        msgpack_zone* result_zone, msgpack_object* result);




static inline size_t msgpack_unpacker_parsed_size(const msgpack_unpacker* mpac);



# 214 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
_Bool 
# 214 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
    msgpack_unpacker_flush_zone(msgpack_unpacker* mpac);



# 217 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
_Bool 
# 217 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
    msgpack_unpacker_expand_buffer(msgpack_unpacker* mpac, size_t size);

static inline 
# 219 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
             _Bool 
# 219 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
                  msgpack_unpacker_reserve_buffer(msgpack_unpacker* mpac, size_t size)
{
    if(mpac->free >= size) { return 
# 221 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
                                   1
# 221 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
                                       ; }
    return msgpack_unpacker_expand_buffer(mpac, size);
}

static inline char* msgpack_unpacker_buffer(msgpack_unpacker* mpac)
{
    return mpac->buffer + mpac->used;
}

static inline size_t msgpack_unpacker_buffer_capacity(const msgpack_unpacker* mpac)
{
    return mpac->free;
}

static inline void msgpack_unpacker_buffer_consumed(msgpack_unpacker* mpac, size_t size)
{
    mpac->used += size;
    mpac->free -= size;
}

static inline size_t msgpack_unpacker_message_size(const msgpack_unpacker* mpac)
{
    return mpac->parsed - mpac->off + mpac->used;
}

static inline size_t msgpack_unpacker_parsed_size(const msgpack_unpacker* mpac)
{
    return mpac->parsed;
}


static inline void msgpack_unpacked_init(msgpack_unpacked* result)
{
    memset(result, 0, sizeof(msgpack_unpacked));
}

static inline void msgpack_unpacked_destroy(msgpack_unpacked* result)
{
    if(result->zone != 
# 259 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
                      ((void *)0)
# 259 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
                          ) {
        msgpack_zone_free(result->zone);
        result->zone = 
# 261 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
                      ((void *)0)
# 261 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
                          ;
        memset(&result->data, 0, sizeof(msgpack_object));
    }
}

static inline msgpack_zone* msgpack_unpacked_release_zone(msgpack_unpacked* result)
{
    if(result->zone != 
# 268 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
                      ((void *)0)
# 268 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
                          ) {
        msgpack_zone* z = result->zone;
        result->zone = 
# 270 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
                      ((void *)0)
# 270 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
                          ;
        return z;
    }
    return 
# 273 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h" 3 4
          ((void *)0)
# 273 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/unpack.h"
              ;
}
# 21 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sbuffer.h" 1
# 27 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sbuffer.h"
typedef struct msgpack_sbuffer {
    size_t size;
    char* data;
    size_t alloc;
} msgpack_sbuffer;

static inline void msgpack_sbuffer_init(msgpack_sbuffer* sbuf)
{
    memset(sbuf, 0, sizeof(msgpack_sbuffer));
}

static inline void msgpack_sbuffer_destroy(msgpack_sbuffer* sbuf)
{
    free(sbuf->data);
}

static inline msgpack_sbuffer* msgpack_sbuffer_new(void)
{
    return (msgpack_sbuffer*)calloc(1, sizeof(msgpack_sbuffer));
}

static inline void msgpack_sbuffer_free(msgpack_sbuffer* sbuf)
{
    if(sbuf == 
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sbuffer.h" 3 4
              ((void *)0)
# 50 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sbuffer.h"
                  ) { return; }
    msgpack_sbuffer_destroy(sbuf);
    free(sbuf);
}





static inline int msgpack_sbuffer_write(void* data, const char* buf, size_t len)
{
    msgpack_sbuffer* sbuf = (msgpack_sbuffer*)data;

    if(sbuf->alloc - sbuf->size < len) {
        void* tmp;
        size_t nsize = (sbuf->alloc) ?
                sbuf->alloc * 2 : 8192;

        while(nsize < sbuf->size + len) {
            size_t tmp_nsize = nsize * 2;
            if (tmp_nsize <= nsize) {
                nsize = sbuf->size + len;
                break;
            }
            nsize = tmp_nsize;
        }

        tmp = realloc(sbuf->data, nsize);
        if(!tmp) { return -1; }

        sbuf->data = (char*)tmp;
        sbuf->alloc = nsize;
    }

    memcpy(sbuf->data + sbuf->size, buf, len);
    sbuf->size += len;
    return 0;
}

static inline char* msgpack_sbuffer_release(msgpack_sbuffer* sbuf)
{
    char* tmp = sbuf->data;
    sbuf->size = 0;
    sbuf->data = 
# 93 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sbuffer.h" 3 4
                ((void *)0)
# 93 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/sbuffer.h"
                    ;
    sbuf->alloc = 0;
    return tmp;
}

static inline void msgpack_sbuffer_clear(msgpack_sbuffer* sbuf)
{
    sbuf->size = 0;
}
# 22 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h" 1
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/uio.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4

# 41 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4

# 41 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  ;
# 52 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  ;
# 67 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count,
         __off_t __offset) ;
# 79 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count,
   __off_t __offset) ;
# 106 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset) ;
# 118 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset) ;







extern ssize_t preadv2 (int __fp, const struct iovec *__iovec, int __count,
   __off_t __offset, int ___flags) ;


extern ssize_t pwritev2 (int __fd, const struct iovec *__iodev, int __count,
    __off_t __offset, int __flags) ;
# 152 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64v2 (int __fp, const struct iovec *__iovec,
      int __count, __off64_t __offset,
      int ___flags) ;


extern ssize_t pwritev64v2 (int __fd, const struct iovec *__iodev,
       int __count, __off64_t __offset,
       int __flags) ;








# 1 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 3 4



extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));


extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));








# 169 "/usr/include/x86_64-linux-gnu/sys/uio.h" 2 3 4
# 18 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h" 2
# 36 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"

# 36 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"
struct msgpack_vrefbuffer_chunk;
typedef struct msgpack_vrefbuffer_chunk msgpack_vrefbuffer_chunk;

typedef struct msgpack_vrefbuffer_inner_buffer {
    size_t free;
    char* ptr;
    msgpack_vrefbuffer_chunk* head;
} msgpack_vrefbuffer_inner_buffer;

typedef struct msgpack_vrefbuffer {
    struct iovec* tail;
    struct iovec* end;
    struct iovec* array;

    size_t chunk_size;
    size_t ref_size;

    msgpack_vrefbuffer_inner_buffer inner_buffer;
} msgpack_vrefbuffer;
# 65 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"


# 66 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h" 3 4
_Bool 
# 66 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"
    msgpack_vrefbuffer_init(msgpack_vrefbuffer* vbuf,
        size_t ref_size, size_t chunk_size);

void msgpack_vrefbuffer_destroy(msgpack_vrefbuffer* vbuf);

static inline msgpack_vrefbuffer* msgpack_vrefbuffer_new(size_t ref_size, size_t chunk_size);
static inline void msgpack_vrefbuffer_free(msgpack_vrefbuffer* vbuf);

static inline int msgpack_vrefbuffer_write(void* data, const char* buf, size_t len);

static inline const struct iovec* msgpack_vrefbuffer_vec(const msgpack_vrefbuffer* vref);
static inline size_t msgpack_vrefbuffer_veclen(const msgpack_vrefbuffer* vref);


int msgpack_vrefbuffer_append_copy(msgpack_vrefbuffer* vbuf,
        const char* buf, size_t len);


int msgpack_vrefbuffer_append_ref(msgpack_vrefbuffer* vbuf,
        const char* buf, size_t len);


int msgpack_vrefbuffer_migrate(msgpack_vrefbuffer* vbuf, msgpack_vrefbuffer* to);


void msgpack_vrefbuffer_clear(msgpack_vrefbuffer* vref);




static inline msgpack_vrefbuffer* msgpack_vrefbuffer_new(size_t ref_size, size_t chunk_size)
{
    msgpack_vrefbuffer* vbuf = (msgpack_vrefbuffer*)malloc(sizeof(msgpack_vrefbuffer));
    if (vbuf == 
# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h" 3 4
               ((void *)0)
# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"
                   ) return 
# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h" 3 4
                            ((void *)0)
# 99 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"
                                ;
    if(!msgpack_vrefbuffer_init(vbuf, ref_size, chunk_size)) {
        free(vbuf);
        return 
# 102 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h" 3 4
              ((void *)0)
# 102 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"
                  ;
    }
    return vbuf;
}

static inline void msgpack_vrefbuffer_free(msgpack_vrefbuffer* vbuf)
{
    if(vbuf == 
# 109 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h" 3 4
              ((void *)0)
# 109 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/vrefbuffer.h"
                  ) { return; }
    msgpack_vrefbuffer_destroy(vbuf);
    free(vbuf);
}

static inline int msgpack_vrefbuffer_write(void* data, const char* buf, size_t len)
{
    msgpack_vrefbuffer* vbuf = (msgpack_vrefbuffer*)data;

    if(len < vbuf->ref_size) {
        return msgpack_vrefbuffer_append_copy(vbuf, buf, len);
    } else {
        return msgpack_vrefbuffer_append_ref(vbuf, buf, len);
    }
}

static inline const struct iovec* msgpack_vrefbuffer_vec(const msgpack_vrefbuffer* vref)
{
    return vref->array;
}

static inline size_t msgpack_vrefbuffer_veclen(const msgpack_vrefbuffer* vref)
{
    return (size_t)(vref->tail - vref->array);
}
# 23 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/version.h" 1
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/version.h"

const char* msgpack_version(void);

int msgpack_version_major(void);

int msgpack_version_minor(void);

int msgpack_version_revision(void);

# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/version_master.h" 1
# 27 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack/version.h" 2
# 24 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 2
# 7 "/home/toto/.env/encours/neovim/src/nvim/msgpack_rpc/channel_defs.h" 2






typedef struct Channel Channel;

typedef struct {
  uint32_t request_id;
  
# 17 "/home/toto/.env/encours/neovim/src/nvim/msgpack_rpc/channel_defs.h" 3 4
 _Bool 
# 17 "/home/toto/.env/encours/neovim/src/nvim/msgpack_rpc/channel_defs.h"
      returned, errored;
  Object result;
} ChannelCallFrame;

typedef struct {
  MessageType type;
  Channel *channel;
  MsgpackRpcRequestHandler handler;
  Array args;
  uint32_t request_id;
} RequestEvent;

typedef struct {
  Map_cstr_t_ptr_t *subscribed_events;
  
# 31 "/home/toto/.env/encours/neovim/src/nvim/msgpack_rpc/channel_defs.h" 3 4
 _Bool 
# 31 "/home/toto/.env/encours/neovim/src/nvim/msgpack_rpc/channel_defs.h"
      closed;
  msgpack_unpacker *unpacker;
  uint32_t next_request_id;
  struct { size_t size; size_t capacity; ChannelCallFrame * *items; } call_stack;
  Dictionary info;
} RpcState;
# 11 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 2




typedef enum {
  kChannelStreamProc,
  kChannelStreamSocket,
  kChannelStreamStdio,
  kChannelStreamStderr,
  kChannelStreamInternal
} ChannelStreamType;

typedef enum {
  kChannelPartStdin,
  kChannelPartStdout,
  kChannelPartStderr,
  kChannelPartRpc,
  kChannelPartAll
} ChannelPart;


typedef struct {
  Stream in;
  Stream out;
} StdioPair;

typedef struct {
  
# 38 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 3 4
 _Bool 
# 38 "/home/toto/.env/encours/neovim/src/nvim/channel.h"
      closed;
} StderrState;

typedef struct {
  Callback cb;
  dict_T *self;
  garray_T buffer;
  
# 45 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 3 4
 _Bool 
# 45 "/home/toto/.env/encours/neovim/src/nvim/channel.h"
      eof;
  
# 46 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 3 4
 _Bool 
# 46 "/home/toto/.env/encours/neovim/src/nvim/channel.h"
      buffered;
  const char *type;
} CallbackReader;






static inline 
# 55 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 3 4
             _Bool 
# 55 "/home/toto/.env/encours/neovim/src/nvim/channel.h"
                  callback_reader_set(CallbackReader reader)
{
  return reader.cb.type != kCallbackNone || reader.self;
}

struct Channel {
  uint64_t id;
  size_t refcount;
  MultiQueue *events;

  ChannelStreamType streamtype;
  union {
    Process proc;
    LibuvProcess uv;
    PtyProcess pty;
    Stream socket;
    StdioPair stdio;
    StderrState err;
  } stream;

  
# 75 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 3 4
 _Bool 
# 75 "/home/toto/.env/encours/neovim/src/nvim/channel.h"
      is_rpc;
  RpcState rpc;
  Terminal *term;

  CallbackReader on_data;
  CallbackReader on_stderr;
  Callback on_exit;
  int exit_status;

  
# 84 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 3 4
 _Bool 
# 84 "/home/toto/.env/encours/neovim/src/nvim/channel.h"
      callback_busy;
  
# 85 "/home/toto/.env/encours/neovim/src/nvim/channel.h" 3 4
 _Bool 
# 85 "/home/toto/.env/encours/neovim/src/nvim/channel.h"
      callback_scheduled;
};

extern Map_uint64_t_ptr_t *channels ;






static inline Channel *find_channel(uint64_t id)
{
  return map_uint64_t_ptr_t_get(channels, id);
}

static inline Stream *channel_instream(Channel *chan)
  FUNC_ATTR_NONNULL_ALL
{
  switch (chan->streamtype) {
    case kChannelStreamProc:
      return &chan->stream.proc.in;

    case kChannelStreamSocket:
      return &chan->stream.socket;

    case kChannelStreamStdio:
      return &chan->stream.stdio.out;

    case kChannelStreamInternal:
    case kChannelStreamStderr:
      abort();
  }
  abort();
}

static inline Stream *channel_outstream(Channel *chan)
  FUNC_ATTR_NONNULL_ALL
{
  switch (chan->streamtype) {
    case kChannelStreamProc:
      return &chan->stream.proc.out;

    case kChannelStreamSocket:
      return &chan->stream.socket;

    case kChannelStreamStdio:
      return &chan->stream.stdio.in;

    case kChannelStreamInternal:
    case kChannelStreamStderr:
      abort();
  }
  abort();
}
# 6 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/eval/funcs.h" 1






typedef void (*FunPtr)(void);


typedef void (*VimLFunc)(typval_T *args, typval_T *rvar, FunPtr data);


typedef struct fst {
  char *name;
  uint8_t min_argc;
  uint8_t max_argc;
  VimLFunc func;
  FunPtr data;
} VimLFuncDef;
# 7 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/event/time.h" 1







typedef struct time_watcher TimeWatcher;
typedef void (*time_cb)(TimeWatcher *watcher, void *data);

struct time_watcher {
  uv_timer_t uv;
  void *data;
  time_cb cb, close_cb;
  MultiQueue *events;
  
# 16 "/home/toto/.env/encours/neovim/src/nvim/event/time.h" 3 4
 _Bool 
# 16 "/home/toto/.env/encours/neovim/src/nvim/event/time.h"
      blockable;
};
# 8 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h" 1




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 6 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 8 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h" 2



typedef struct {
  int fd;
  int _error;
  RBuffer *rv;
  
# 15 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h" 3 4
 _Bool 
# 15 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h"
      wr;
  
# 16 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h" 3 4
 _Bool 
# 16 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h"
      eof;
  
# 17 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h" 3 4
 _Bool 
# 17 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h"
      non_blocking;
} FileDescriptor;


typedef enum {
  kFileReadOnly = 1,
  kFileCreate = 2,

  kFileWriteOnly = 4,

  kFileNoSymlink = 8,
  kFileCreateOnly = 16,


  kFileTruncate = 32,


  kFileAppend = 64,

  kFileNonBlocking = 128,

} FileOpenFlags;

static inline 
# 40 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h" 3 4
             _Bool 
# 40 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h"
                  file_eof(const FileDescriptor *const fp)
  __attribute__ ((pure)) __attribute__((warn_unused_result)) __attribute__((nonnull));







static inline 
# 49 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h" 3 4
             _Bool 
# 49 "/home/toto/.env/encours/neovim/src/nvim/os/fileio.h"
                  file_eof(const FileDescriptor *const fp)
{
  return fp->eof && rbuffer_size(fp->rv) == 0;
}

static inline int file_fd(const FileDescriptor *const fp)
  __attribute__ ((pure)) __attribute__((warn_unused_result)) __attribute__((nonnull));






static inline int file_fd(const FileDescriptor *const fp)
{
  return fp->fd;
}

enum {



  kRWBufferSize = 1024
};
# 10 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/os/stdpaths_defs.h" 1




typedef enum {
  kXDGNone = -1,
  kXDGConfigHome,
  kXDGDataHome,
  kXDGCacheHome,
  kXDGRuntimeDir,
  kXDGConfigDirs,
  kXDGDataDirs,
} XDGVarType;
# 11 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 2





extern hashtab_T func_hashtab;


extern ufunc_T dumuf;
# 51 "/home/toto/.env/encours/neovim/src/nvim/eval.h"
typedef struct lval_S {
    const char *ll_name;
    size_t ll_name_len;
    char *ll_exp_name;
    typval_T *ll_tv;

    listitem_T *ll_li;
    list_T *ll_list;
    int ll_range;
    long ll_n1;
    long ll_n2;
    int ll_empty2;
    dict_T *ll_dict;
    dictitem_T *ll_di;
    char_u *ll_newkey;
} lval_T;


typedef enum {
  VAR_FLAVOUR_DEFAULT = 1,
  VAR_FLAVOUR_SESSION = 2,
  VAR_FLAVOUR_SHADA = 4
} var_flavour_T;


typedef enum {
    VV_COUNT,
    VV_COUNT1,
    VV_PREVCOUNT,
    VV_ERRMSG,
    VV_WARNINGMSG,
    VV_STATUSMSG,
    VV_SHELL_ERROR,
    VV_THIS_SESSION,
    VV_VERSION,
    VV_LNUM,
    VV_TERMRESPONSE,
    VV_FNAME,
    VV_LANG,
    VV_LC_TIME,
    VV_CTYPE,
    VV_CC_FROM,
    VV_CC_TO,
    VV_FNAME_IN,
    VV_FNAME_OUT,
    VV_FNAME_NEW,
    VV_FNAME_DIFF,
    VV_CMDARG,
    VV_FOLDSTART,
    VV_FOLDEND,
    VV_FOLDDASHES,
    VV_FOLDLEVEL,
    VV_PROGNAME,
    VV_SEND_SERVER,
    VV_DYING,
    VV_EXCEPTION,
    VV_THROWPOINT,
    VV_STDERR,
    VV_REG,
    VV_CMDBANG,
    VV_INSERTMODE,
    VV_VAL,
    VV_KEY,
    VV_PROFILING,
    VV_FCS_REASON,
    VV_FCS_CHOICE,
    VV_BEVAL_BUFNR,
    VV_BEVAL_WINNR,
    VV_BEVAL_WINID,
    VV_BEVAL_LNUM,
    VV_BEVAL_COL,
    VV_BEVAL_TEXT,
    VV_SCROLLSTART,
    VV_SWAPNAME,
    VV_SWAPCHOICE,
    VV_SWAPCOMMAND,
    VV_CHAR,
    VV_MOUSE_WIN,
    VV_MOUSE_WINID,
    VV_MOUSE_LNUM,
    VV_MOUSE_COL,
    VV_OP,
    VV_SEARCHFORWARD,
    VV_HLSEARCH,
    VV_OLDFILES,
    VV_WINDOWID,
    VV_PROGPATH,
    VV_COMPLETED_ITEM,
    VV_OPTION_NEW,
    VV_OPTION_OLD,
    VV_OPTION_TYPE,
    VV_ERRORS,
    VV_MSGPACK_TYPES,
    VV_EVENT,
    VV_FALSE,
    VV_TRUE,
    VV_NULL,
    VV__NULL_LIST,
    VV__NULL_DICT,
    VV_VIM_DID_ENTER,
    VV_TESTING,
    VV_TYPE_NUMBER,
    VV_TYPE_STRING,
    VV_TYPE_FUNC,
    VV_TYPE_LIST,
    VV_TYPE_DICT,
    VV_TYPE_FLOAT,
    VV_TYPE_BOOL,
    VV_ECHOSPACE,
    VV_EXITING,
    VV_LUA,
    VV_ARGV,
} VimVarIndex;


typedef enum {
  kMPNil,
  kMPBoolean,
  kMPInteger,
  kMPFloat,
  kMPString,
  kMPBinary,
  kMPArray,
  kMPMap,
  kMPExt,

} MessagePackType;


extern const list_T *eval_msgpack_type_lists[kMPExt + 1];




typedef enum {
  TFN_INT = 1,
  TFN_QUIET = 2,
  TFN_NO_AUTOLOAD = 4,
  TFN_NO_DEREF = 8,
  TFN_READ_ONLY = 16,
} TransFunctionNameFlags;


typedef enum {
  GLV_QUIET = TFN_QUIET,
  GLV_NO_AUTOLOAD = TFN_NO_AUTOLOAD,
  GLV_READ_ONLY = TFN_READ_ONLY,

} GetLvalFlags;






typedef struct {
  TimeWatcher tw;
  int timer_id;
  int repeat_count;
  int refcount;
  int emsg_count;
  long timeout;
  
# 213 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 3 4
 _Bool 
# 213 "/home/toto/.env/encours/neovim/src/nvim/eval.h"
      stopped;
  
# 214 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 3 4
 _Bool 
# 214 "/home/toto/.env/encours/neovim/src/nvim/eval.h"
      paused;
  Callback callback;
} timer_T;


typedef enum
{
  ASSERT_EQUAL,
  ASSERT_NOTEQUAL,
  ASSERT_MATCH,
  ASSERT_NOTMATCH,
  ASSERT_INRANGE,
  ASSERT_OTHER,
} assert_type_T;


typedef enum {
  kDictListKeys,
  kDictListValues,
  kDictListItems,
} DictListType;


extern 
# 237 "/home/toto/.env/encours/neovim/src/nvim/eval.h" 3 4
      _Bool 
# 237 "/home/toto/.env/encours/neovim/src/nvim/eval.h"
           *eval_lavars_used;
# 11 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 2



enum getf_values {
  GETF_SETMARK = 0x01,
  GETF_ALT = 0x02,
  GETF_SWITCH = 0x04,
};


enum getf_retvalues {
  GETFILE_ERROR = 1,
  GETFILE_NOT_WRITTEN = 2,
  GETFILE_SAME_FILE = 0,
  GETFILE_OPEN_OTHER = -1,
  GETFILE_UNUSED = 8
};


enum bln_values {
  BLN_CURBUF = 1,
  BLN_LISTED = 2,
  BLN_DUMMY = 4,
  BLN_NEW = 8,
  BLN_NOOPT = 16,
};


enum dobuf_action_values {
  DOBUF_GOTO = 0,
  DOBUF_SPLIT = 1,
  DOBUF_UNLOAD = 2,
  DOBUF_DEL = 3,
  DOBUF_WIPE = 4,
};


enum dobuf_start_values {
  DOBUF_CURRENT = 0,
  DOBUF_FIRST = 1,
  DOBUF_LAST = 2,
  DOBUF_MOD = 3,
};


enum bfa_values {
  BFA_DEL = 1,
  BFA_WIPE = 2,
  BFA_KEEP_UNDO = 4,
};





static inline void buf_set_changedtick(buf_T *const buf,
                                       const varnumber_T changedtick)
  __attribute__((nonnull)) __attribute__((always_inline));





static inline void buf_set_changedtick(buf_T *const buf,
                                       const varnumber_T changedtick)
{
  typval_T old_val = buf->changedtick_di.di_tv;


  dictitem_T *const changedtick_di = tv_dict_find(
      buf->b_vars, ("changedtick"), (sizeof("changedtick") - 1));
  
# 82 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ((void) sizeof ((
# 82 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di != 
# 82 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 82 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di != 
# 82 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ((void *)0)) ; else __assert_fail (
# 82 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 "changedtick_di != NULL"
# 82 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/buffer.h", 82, __extension__ __PRETTY_FUNCTION__); }))
# 82 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
                               ;
  
# 83 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ((void) sizeof ((
# 83 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di->di_tv.v_type == VAR_NUMBER
# 83 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 83 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di->di_tv.v_type == VAR_NUMBER
# 83 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ) ; else __assert_fail (
# 83 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 "changedtick_di->di_tv.v_type == VAR_NUMBER"
# 83 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/buffer.h", 83, __extension__ __PRETTY_FUNCTION__); }))
# 83 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
                                                   ;
  
# 84 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ((void) sizeof ((
# 84 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di->di_tv.v_lock == VAR_FIXED
# 84 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 84 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di->di_tv.v_lock == VAR_FIXED
# 84 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ) ; else __assert_fail (
# 84 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 "changedtick_di->di_tv.v_lock == VAR_FIXED"
# 84 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/buffer.h", 84, __extension__ __PRETTY_FUNCTION__); }))
# 84 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
                                                  ;


  
# 87 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ((void) sizeof ((
# 87 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di->di_flags == (DI_FLAGS_RO|DI_FLAGS_FIX)
# 87 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 87 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di->di_flags == (DI_FLAGS_RO|DI_FLAGS_FIX)
# 87 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ) ; else __assert_fail (
# 87 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 "changedtick_di->di_flags == (DI_FLAGS_RO|DI_FLAGS_FIX)"
# 87 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/buffer.h", 87, __extension__ __PRETTY_FUNCTION__); }))
# 87 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
                                                               ;

  
# 89 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ((void) sizeof ((
# 89 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di == (dictitem_T *)&buf->changedtick_di
# 89 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 89 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 changedtick_di == (dictitem_T *)&buf->changedtick_di
# 89 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 ) ; else __assert_fail (
# 89 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
 "changedtick_di == (dictitem_T *)&buf->changedtick_di"
# 89 "/home/toto/.env/encours/neovim/src/nvim/buffer.h" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/buffer.h", 89, __extension__ __PRETTY_FUNCTION__); }))
# 89 "/home/toto/.env/encours/neovim/src/nvim/buffer.h"
                                                             ;

  buf->changedtick_di.di_tv.vval.v_number = changedtick;

  if (tv_dict_is_watched(buf->b_vars)) {
    tv_dict_watcher_notify(buf->b_vars,
                           (char *)buf->changedtick_di.di_key,
                           &buf->changedtick_di.di_tv,
                           &old_val);
  }
}

static inline varnumber_T buf_get_changedtick(const buf_T *const buf)
  __attribute__((nonnull)) __attribute__((always_inline)) __attribute__ ((pure))
  __attribute__((warn_unused_result));






static inline varnumber_T buf_get_changedtick(const buf_T *const buf)
{
  return buf->changedtick_di.di_tv.vval.v_number;
}

static inline void buf_inc_changedtick(buf_T *const buf)
  __attribute__((nonnull)) __attribute__((always_inline));






static inline void buf_inc_changedtick(buf_T *const buf)
{
  buf_set_changedtick(buf, buf_get_changedtick(buf) + 1);
}
# 16 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/change.h" 1
# 17 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/charset.h" 1
# 21 "/home/toto/.env/encours/neovim/src/nvim/charset.h"
typedef enum {
  STR2NR_DEC = 0,
  STR2NR_BIN = (1 << 0),
  STR2NR_OCT = (1 << 1),
  STR2NR_HEX = (1 << 2),




  STR2NR_FORCE = (1 << 3),

  STR2NR_ALL = STR2NR_BIN | STR2NR_OCT | STR2NR_HEX,
} ChStr2NrFlags;





static inline 
# 39 "/home/toto/.env/encours/neovim/src/nvim/charset.h" 3 4
             _Bool 
# 39 "/home/toto/.env/encours/neovim/src/nvim/charset.h"
                  vim_isbreak(int c)
  __attribute__((const))
  __attribute__((always_inline));



static inline 
# 45 "/home/toto/.env/encours/neovim/src/nvim/charset.h" 3 4
             _Bool 
# 45 "/home/toto/.env/encours/neovim/src/nvim/charset.h"
                  vim_isbreak(int c)
{
  return breakat_flags[(char_u)c];
}
# 19 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/cursor.h" 1
# 20 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/edit.h" 1
# 16 "/home/toto/.env/encours/neovim/src/nvim/edit.h"
typedef enum {
  CP_ORIGINAL_TEXT = 1,
  CP_FREE_FNAME = 2,
  CP_CONT_S_IPOS = 4,
  CP_EQUAL = 8,
  CP_ICASE = 16,
} cp_flags_T;

typedef int (*IndentGetter)(void);
# 21 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/eval/userfunc.h" 1







typedef struct {
  dict_T *fd_dict;
  char_u *fd_newkey;
  dictitem_T *fd_di;
} funcdict_T;

typedef struct funccal_entry funccal_entry_T;
struct funccal_entry {
  void *top_funccal;
  funccal_entry_T *next;
};


typedef enum {
  ERROR_UNKNOWN = 0,
  ERROR_TOOMANY,
  ERROR_TOOFEW,
  ERROR_SCRIPT,
  ERROR_DICT,
  ERROR_NONE,
  ERROR_OTHER,
  ERROR_BOTH,
  ERROR_DELETED,
} FnameTransError;

typedef int (*ArgvFunc)(int current_argcount, typval_T *argv, int argskip,
                        int called_func_argcount);
# 22 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/eval/encode.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 5 "/home/toto/.env/encours/neovim/src/nvim/eval/encode.h" 2

# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/msgpack.h" 1
# 7 "/home/toto/.env/encours/neovim/src/nvim/eval/encode.h" 2
# 19 "/home/toto/.env/encours/neovim/src/nvim/eval/encode.h"
int encode_vim_to_msgpack(msgpack_packer *const packer,
                          typval_T *const tv,
                          const char *const objname);
# 30 "/home/toto/.env/encours/neovim/src/nvim/eval/encode.h"
int encode_vim_to_echo(garray_T *const packer,
                       typval_T *const tv,
                       const char *const objname);


typedef struct {
  const list_T *const list;
  const listitem_T *li;
  size_t offset;
  size_t li_length;
} ListReaderState;


static inline ListReaderState encode_init_lrstate(const list_T *const list)
  FUNC_ATTR_NONNULL_ALL
{
  return (ListReaderState) {
    .list = list,
    .li = tv_list_first(list),
    .offset = 0,
    .li_length = ((&(tv_list_first(list))->li_tv)->vval.v_string == 
# 50 "/home/toto/.env/encours/neovim/src/nvim/eval/encode.h" 3 4
                                                                        ((void *)0)
                  
# 51 "/home/toto/.env/encours/neovim/src/nvim/eval/encode.h"
                 ? 0
                  : strlen((char *)((&(tv_list_first(list))->li_tv)->vval.v_string))
                                                          ),
  };
}


extern const char *const encode_special_var_names[];
# 24 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/eval/executor.h" 1





extern char *e_listidx;
# 25 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/eval/gc.h" 1





extern dict_T *gc_first_dict;
extern list_T *gc_first_list;
# 26 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds2.h" 1





# 1 "/home/toto/.env/encours/neovim/src/nvim/ex_docmd.h" 1
# 25 "/home/toto/.env/encours/neovim/src/nvim/ex_docmd.h"
typedef struct {
  int save_msg_scroll;
  int save_restart_edit;
  int save_msg_didout;
  int save_State;
  int save_insertmode;
  
# 31 "/home/toto/.env/encours/neovim/src/nvim/ex_docmd.h" 3 4
 _Bool 
# 31 "/home/toto/.env/encours/neovim/src/nvim/ex_docmd.h"
      save_finish_op;
  long save_opcount;
  int save_reg_executing;
  tasave_T tabuf;
} save_state_T;
# 7 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds2.h" 2

typedef void (*DoInRuntimepathCB)(char_u *, void *);
# 28 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/ex_getln.h" 1




# 1 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds.h" 1
# 27 "/home/toto/.env/encours/neovim/src/nvim/ex_cmds.h"
typedef struct {
  char *sub;
  Timestamp timestamp;
  list_T *additional_elements;
} SubReplacementString;
# 6 "/home/toto/.env/encours/neovim/src/nvim/ex_getln.h" 2
# 37 "/home/toto/.env/encours/neovim/src/nvim/ex_getln.h"
typedef enum {
  HIST_DEFAULT = -2,
  HIST_INVALID = -1,
  HIST_CMD = 0,
  HIST_SEARCH,
  HIST_EXPR,
  HIST_INPUT,
  HIST_DEBUG,
} HistoryType;




typedef char_u *(*CompleteListItemGetter)(expand_T *, int);


typedef struct hist_entry {
  int hisnum;
  char_u *hisstr;
  Timestamp timestamp;
  list_T *additional_elements;
} histentry_T;
# 30 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/ex_session.h" 1
# 31 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/fileio.h" 1




# 1 "/home/toto/.env/encours/neovim/src/nvim/os/os.h" 1
# 6 "/home/toto/.env/encours/neovim/src/nvim/fileio.h" 2
# 22 "/home/toto/.env/encours/neovim/src/nvim/fileio.h"
typedef struct {
  buf_T *save_curbuf;
  int use_aucmd_win;
  win_T *save_curwin;
  win_T *save_prevwin;
  win_T *new_curwin;
  bufref_T new_curbuf;
  char_u *globaldir;
} aco_save_T;
# 32 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 1
# 13 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
enum RemapValues {
  REMAP_YES = 0,
  REMAP_NONE = -1,
  REMAP_SCRIPT = -2,
  REMAP_SKIP = -3,
};


typedef enum {
  FLUSH_MINIMAL,
  FLUSH_TYPEAHEAD,
  FLUSH_INPUT
} flush_buffers_T;
# 34 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
struct map_arguments {
  
# 35 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 3 4
 _Bool 
# 35 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
      buffer;
  
# 36 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 3 4
 _Bool 
# 36 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
      expr;
  
# 37 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 3 4
 _Bool 
# 37 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
      noremap;
  
# 38 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 3 4
 _Bool 
# 38 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
      nowait;
  
# 39 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 3 4
 _Bool 
# 39 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
      script;
  
# 40 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 3 4
 _Bool 
# 40 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
      silent;
  
# 41 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 3 4
 _Bool 
# 41 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
      unique;






  char_u lhs[50 + 1];
  size_t lhs_len;

  char_u *rhs;
  size_t rhs_len;
  
# 53 "/home/toto/.env/encours/neovim/src/nvim/getchar.h" 3 4
 _Bool 
# 53 "/home/toto/.env/encours/neovim/src/nvim/getchar.h"
      rhs_is_noop;

  char_u *orig_rhs;
  size_t orig_rhs_len;
};
typedef struct map_arguments MapArguments;





enum { NSCRIPT = 15 };


extern FileDescriptor *scriptin[NSCRIPT];
# 33 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/lua/executor.h" 1



# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h" 1
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/luaconf.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/luaconf.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/luaconf.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 14 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/luaconf.h" 2
# 17 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h" 2
# 51 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h"
typedef struct lua_State lua_State;

typedef int (*lua_CFunction) (lua_State *L);





typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);

typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);





typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);
# 100 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h"
typedef double lua_Number;



typedef ptrdiff_t lua_Integer;






extern lua_State *(lua_newstate) (lua_Alloc f, void *ud);
extern void (lua_close) (lua_State *L);
extern lua_State *(lua_newthread) (lua_State *L);

extern lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);





extern int (lua_gettop) (lua_State *L);
extern void (lua_settop) (lua_State *L, int idx);
extern void (lua_pushvalue) (lua_State *L, int idx);
extern void (lua_remove) (lua_State *L, int idx);
extern void (lua_insert) (lua_State *L, int idx);
extern void (lua_replace) (lua_State *L, int idx);
extern int (lua_checkstack) (lua_State *L, int sz);

extern void (lua_xmove) (lua_State *from, lua_State *to, int n);






extern int (lua_isnumber) (lua_State *L, int idx);
extern int (lua_isstring) (lua_State *L, int idx);
extern int (lua_iscfunction) (lua_State *L, int idx);
extern int (lua_isuserdata) (lua_State *L, int idx);
extern int (lua_type) (lua_State *L, int idx);
extern const char *(lua_typename) (lua_State *L, int tp);

extern int (lua_equal) (lua_State *L, int idx1, int idx2);
extern int (lua_rawequal) (lua_State *L, int idx1, int idx2);
extern int (lua_lessthan) (lua_State *L, int idx1, int idx2);

extern lua_Number (lua_tonumber) (lua_State *L, int idx);
extern lua_Integer (lua_tointeger) (lua_State *L, int idx);
extern int (lua_toboolean) (lua_State *L, int idx);
extern const char *(lua_tolstring) (lua_State *L, int idx, size_t *len);
extern size_t (lua_objlen) (lua_State *L, int idx);
extern lua_CFunction (lua_tocfunction) (lua_State *L, int idx);
extern void *(lua_touserdata) (lua_State *L, int idx);
extern lua_State *(lua_tothread) (lua_State *L, int idx);
extern const void *(lua_topointer) (lua_State *L, int idx);





extern void (lua_pushnil) (lua_State *L);
extern void (lua_pushnumber) (lua_State *L, lua_Number n);
extern void (lua_pushinteger) (lua_State *L, lua_Integer n);
extern void (lua_pushlstring) (lua_State *L, const char *s, size_t l);
extern void (lua_pushstring) (lua_State *L, const char *s);
extern const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
                                                      va_list argp);
extern const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
extern void (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
extern void (lua_pushboolean) (lua_State *L, int b);
extern void (lua_pushlightuserdata) (lua_State *L, void *p);
extern int (lua_pushthread) (lua_State *L);





extern void (lua_gettable) (lua_State *L, int idx);
extern void (lua_getfield) (lua_State *L, int idx, const char *k);
extern void (lua_rawget) (lua_State *L, int idx);
extern void (lua_rawgeti) (lua_State *L, int idx, int n);
extern void (lua_createtable) (lua_State *L, int narr, int nrec);
extern void *(lua_newuserdata) (lua_State *L, size_t sz);
extern int (lua_getmetatable) (lua_State *L, int objindex);
extern void (lua_getfenv) (lua_State *L, int idx);





extern void (lua_settable) (lua_State *L, int idx);
extern void (lua_setfield) (lua_State *L, int idx, const char *k);
extern void (lua_rawset) (lua_State *L, int idx);
extern void (lua_rawseti) (lua_State *L, int idx, int n);
extern int (lua_setmetatable) (lua_State *L, int objindex);
extern int (lua_setfenv) (lua_State *L, int idx);





extern void (lua_call) (lua_State *L, int nargs, int nresults);
extern int (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);
extern int (lua_cpcall) (lua_State *L, lua_CFunction func, void *ud);
extern int (lua_load) (lua_State *L, lua_Reader reader, void *dt,
                                        const char *chunkname);

extern int (lua_dump) (lua_State *L, lua_Writer writer, void *data);





extern int (lua_yield) (lua_State *L, int nresults);
extern int (lua_resume) (lua_State *L, int narg);
extern int (lua_status) (lua_State *L);
# 232 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h"
extern int (lua_gc) (lua_State *L, int what, int data);






extern int (lua_error) (lua_State *L);

extern int (lua_next) (lua_State *L, int idx);

extern void (lua_concat) (lua_State *L, int n);

extern lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
extern void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);
# 300 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h"
extern void lua_setlevel (lua_State *from, lua_State *to);
# 328 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h"
typedef struct lua_Debug lua_Debug;



typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);


extern int lua_getstack (lua_State *L, int level, lua_Debug *ar);
extern int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);
extern const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);
extern const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);
extern const char *lua_getupvalue (lua_State *L, int funcindex, int n);
extern const char *lua_setupvalue (lua_State *L, int funcindex, int n);
extern int lua_sethook (lua_State *L, lua_Hook func, int mask, int count);
extern lua_Hook lua_gethook (lua_State *L);
extern int lua_gethookmask (lua_State *L);
extern int lua_gethookcount (lua_State *L);


extern void *lua_upvalueid (lua_State *L, int idx, int n);
extern void lua_upvaluejoin (lua_State *L, int idx1, int n1, int idx2, int n2);
extern int lua_loadx (lua_State *L, lua_Reader reader, void *dt,
         const char *chunkname, const char *mode);
extern const lua_Number *lua_version (lua_State *L);
extern void lua_copy (lua_State *L, int fromidx, int toidx);
extern lua_Number lua_tonumberx (lua_State *L, int idx, int *isnum);
extern lua_Integer lua_tointegerx (lua_State *L, int idx, int *isnum);


extern int lua_isyieldable (lua_State *L);


struct lua_Debug {
  int event;
  const char *name;
  const char *namewhat;
  const char *what;
  const char *source;
  int currentline;
  int nups;
  int linedefined;
  int lastlinedefined;
  char short_src[60];

  int i_ci;
};
# 5 "/home/toto/.env/encours/neovim/src/nvim/lua/executor.h" 2
# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h" 1
# 12 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 13 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h" 2


# 1 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lua.h" 1
# 16 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h" 2





typedef struct luaL_Reg {
  const char *name;
  lua_CFunction func;
} luaL_Reg;

extern void (luaL_openlib) (lua_State *L, const char *libname,
                                const luaL_Reg *l, int nup);
extern void (luaL_register) (lua_State *L, const char *libname,
                                const luaL_Reg *l);
extern int (luaL_getmetafield) (lua_State *L, int obj, const char *e);
extern int (luaL_callmeta) (lua_State *L, int obj, const char *e);
extern int (luaL_typerror) (lua_State *L, int narg, const char *tname);
extern int (luaL_argerror) (lua_State *L, int numarg, const char *extramsg);
extern const char *(luaL_checklstring) (lua_State *L, int numArg,
                                                          size_t *l);
extern const char *(luaL_optlstring) (lua_State *L, int numArg,
                                          const char *def, size_t *l);
extern lua_Number (luaL_checknumber) (lua_State *L, int numArg);
extern lua_Number (luaL_optnumber) (lua_State *L, int nArg, lua_Number def);

extern lua_Integer (luaL_checkinteger) (lua_State *L, int numArg);
extern lua_Integer (luaL_optinteger) (lua_State *L, int nArg,
                                          lua_Integer def);

extern void (luaL_checkstack) (lua_State *L, int sz, const char *msg);
extern void (luaL_checktype) (lua_State *L, int narg, int t);
extern void (luaL_checkany) (lua_State *L, int narg);

extern int (luaL_newmetatable) (lua_State *L, const char *tname);
extern void *(luaL_checkudata) (lua_State *L, int ud, const char *tname);

extern void (luaL_where) (lua_State *L, int lvl);
extern int (luaL_error) (lua_State *L, const char *fmt, ...);

extern int (luaL_checkoption) (lua_State *L, int narg, const char *def,
                                   const char *const lst[]);





extern int (luaL_ref) (lua_State *L, int t);
extern void (luaL_unref) (lua_State *L, int t, int ref);

extern int (luaL_loadfile) (lua_State *L, const char *filename);
extern int (luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz,
                                  const char *name);
extern int (luaL_loadstring) (lua_State *L, const char *s);

extern lua_State *(luaL_newstate) (void);


extern const char *(luaL_gsub) (lua_State *L, const char *s, const char *p,
                                                  const char *r);

extern const char *(luaL_findtable) (lua_State *L, int idx,
                                         const char *fname, int szhint);


extern int luaL_fileresult(lua_State *L, int stat, const char *fname);
extern int luaL_execresult(lua_State *L, int stat);
extern int (luaL_loadfilex) (lua_State *L, const char *filename,
     const char *mode);
extern int (luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz,
       const char *name, const char *mode);
extern void luaL_traceback (lua_State *L, lua_State *L1, const char *msg,
    int level);
extern void (luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);
extern void (luaL_pushmodule) (lua_State *L, const char *modname,
       int sizehint);
extern void *(luaL_testudata) (lua_State *L, int ud, const char *tname);
extern void (luaL_setmetatable) (lua_State *L, const char *tname);
# 135 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h"
typedef struct luaL_Buffer {
  char *p;
  int lvl;
  lua_State *L;
  char buffer[(
# 139 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h" 3 4
             8192 
# 139 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h"
             > 16384 ? 8192 : 
# 139 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h" 3 4
             8192
# 139 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h"
             )];
} luaL_Buffer;
# 151 "/home/toto/.env/encours/neovim/.deps/usr/include/luajit-2.1/lauxlib.h"
extern void (luaL_buffinit) (lua_State *L, luaL_Buffer *B);
extern char *(luaL_prepbuffer) (luaL_Buffer *B);
extern void (luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);
extern void (luaL_addstring) (luaL_Buffer *B, const char *s);
extern void (luaL_addvalue) (luaL_Buffer *B);
extern void (luaL_pushresult) (luaL_Buffer *B);
# 6 "/home/toto/.env/encours/neovim/src/nvim/lua/executor.h" 2


# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 9 "/home/toto/.env/encours/neovim/src/nvim/lua/executor.h" 2




void nlua_add_api_functions(lua_State *lstate) __attribute__((nonnull));

extern LuaRef nlua_nil_ref ;
extern LuaRef nlua_empty_dict_ref ;
# 34 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/mark.h" 1






# 1 "/home/toto/.env/encours/neovim/src/nvim/func_attr.h" 1
# 8 "/home/toto/.env/encours/neovim/src/nvim/mark.h" 2
# 55 "/home/toto/.env/encours/neovim/src/nvim/mark.h"
static inline int mark_global_index(const char name)
  FUNC_ATTR_CONST
{
  return (((unsigned)(name) >= 'A' && (unsigned)(name) <= 'Z')
          ? (name - 'A')
          : (ascii_isdigit(name)
             ? (('z' - 'a' + 1) + (name - '0'))
             : -1));
}


static inline int mark_local_index(const char name)
  FUNC_ATTR_CONST
{
  return (((unsigned)(name) >= 'a' && (unsigned)(name) <= 'z')
          ? (name - 'a')
          : (name == '"'
             ? ('z' - 'a' + 1)
             : (name == '^'
                ? ('z' - 'a' + 1) + 1
                : (name == '.'
                   ? ('z' - 'a' + 1) + 2
                   : -1))));
}

static inline 
# 80 "/home/toto/.env/encours/neovim/src/nvim/mark.h" 3 4
             _Bool 
# 80 "/home/toto/.env/encours/neovim/src/nvim/mark.h"
                  lt(pos_T, pos_T) __attribute__((const)) __attribute__((always_inline));
static inline 
# 81 "/home/toto/.env/encours/neovim/src/nvim/mark.h" 3 4
             _Bool 
# 81 "/home/toto/.env/encours/neovim/src/nvim/mark.h"
                  equalpos(pos_T, pos_T)
  __attribute__((const)) __attribute__((always_inline));
static inline 
# 83 "/home/toto/.env/encours/neovim/src/nvim/mark.h" 3 4
             _Bool 
# 83 "/home/toto/.env/encours/neovim/src/nvim/mark.h"
                  ltoreq(pos_T, pos_T)
  __attribute__((const)) __attribute__((always_inline));
static inline void clearpos(pos_T *)
  __attribute__((always_inline));


static inline 
# 89 "/home/toto/.env/encours/neovim/src/nvim/mark.h" 3 4
             _Bool 
# 89 "/home/toto/.env/encours/neovim/src/nvim/mark.h"
                  lt(pos_T a, pos_T b)
{
  if (a.lnum != b.lnum) {
    return a.lnum < b.lnum;
  } else if (a.col != b.col) {
    return a.col < b.col;
  } else {
    return a.coladd < b.coladd;
  }
}


static inline 
# 101 "/home/toto/.env/encours/neovim/src/nvim/mark.h" 3 4
             _Bool 
# 101 "/home/toto/.env/encours/neovim/src/nvim/mark.h"
                  equalpos(pos_T a, pos_T b)
{
  return (a.lnum == b.lnum) && (a.col == b.col) && (a.coladd == b.coladd);
}


static inline 
# 107 "/home/toto/.env/encours/neovim/src/nvim/mark.h" 3 4
             _Bool 
# 107 "/home/toto/.env/encours/neovim/src/nvim/mark.h"
                  ltoreq(pos_T a, pos_T b)
{
  return lt(a, b) || equalpos(a, b);
}


static inline void clearpos(pos_T *a)
{
  a->lnum = 0;
  a->col = 0;
  a->coladd = 0;
}
# 35 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/memline.h" 1
# 36 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/misc1.h" 1




# 1 "/home/toto/.env/encours/neovim/src/nvim/os/shell.h" 1
# 9 "/home/toto/.env/encours/neovim/src/nvim/os/shell.h"
typedef enum {
  kShellOptFilter = 1,
  kShellOptExpand = 2,
  kShellOptDoOut = 4,
  kShellOptSilent = 8,
  kShellOptRead = 16,
  kShellOptWrite = 32,
  kShellOptHideMess = 64,
} ShellOpts;
# 6 "/home/toto/.env/encours/neovim/src/nvim/misc1.h" 2
# 37 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/move.h" 1
# 38 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/ops.h" 1
# 14 "/home/toto/.env/encours/neovim/src/nvim/ops.h"
typedef int (*Indenter)(void);
# 75 "/home/toto/.env/encours/neovim/src/nvim/ops.h"
enum GRegFlags {
  kGRegNoExpr = 1,
  kGRegExprSrc = 2,
  kGRegList = 4
};


typedef struct yankreg {
  char_u **y_array;
  size_t y_size;
  MotionType y_type;
  colnr_T y_width;
  Timestamp timestamp;
  dict_T *additional_data;
} yankreg_T;






static inline int op_reg_index(const int regname)
  FUNC_ATTR_CONST
{
  if (ascii_isdigit(regname)) {
    return regname - '0';
  } else if (((unsigned)(regname) >= 'a' && (unsigned)(regname) <= 'z')) {
    return ((uint8_t)(regname) - 'a') + 10;
  } else if (((unsigned)(regname) >= 'A' && (unsigned)(regname) <= 'Z')) {
    return ((uint8_t)(regname) - 'A') + 10;
  } else if (regname == '-') {
    return 36;
  } else if (regname == '*') {
    return 37;
  } else if (regname == '+') {
    return 38;
  } else {
    return -1;
  }
}
# 39 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/option.h" 1
# 15 "/home/toto/.env/encours/neovim/src/nvim/option.h"
typedef enum {
  OPT_FREE = 1,
  OPT_GLOBAL = 2,
  OPT_LOCAL = 4,
  OPT_MODELINE = 8,
  OPT_WINONLY = 16,
  OPT_NOWIN = 32,
} OptionFlags;
# 40 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/os/input.h" 1
# 41 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2



# 1 "/home/toto/.env/encours/neovim/src/nvim/quickfix.h" 1
# 45 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/regexp.h" 1
# 46 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2

# 1 "/home/toto/.env/encours/neovim/src/nvim/search.h" 1
# 56 "/home/toto/.env/encours/neovim/src/nvim/search.h"
typedef struct soffset {
  char dir;
  
# 58 "/home/toto/.env/encours/neovim/src/nvim/search.h" 3 4
 _Bool 
# 58 "/home/toto/.env/encours/neovim/src/nvim/search.h"
      line;
  
# 59 "/home/toto/.env/encours/neovim/src/nvim/search.h" 3 4
 _Bool 
# 59 "/home/toto/.env/encours/neovim/src/nvim/search.h"
      end;
  int64_t off;
} SearchOffset;


typedef struct spat {
  char_u *pat;
  
# 66 "/home/toto/.env/encours/neovim/src/nvim/search.h" 3 4
 _Bool 
# 66 "/home/toto/.env/encours/neovim/src/nvim/search.h"
      magic;
  
# 67 "/home/toto/.env/encours/neovim/src/nvim/search.h" 3 4
 _Bool 
# 67 "/home/toto/.env/encours/neovim/src/nvim/search.h"
      no_scs;
  Timestamp timestamp;
  SearchOffset off;
  dict_T *additional_data;
} SearchPattern;


typedef struct {
    linenr_T sa_stop_lnum;
    proftime_T *sa_tm;
    int sa_timed_out;
    int sa_wrapped;
} searchit_arg_T;
# 48 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/sign.h" 1
# 49 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/syntax.h" 1
# 30 "/home/toto/.env/encours/neovim/src/nvim/syntax.h"
typedef struct {
  char *name;
  RgbValue color;
} color_name_table_T;
extern color_name_table_T color_name_table[];


extern const char *const highlight_init_cmdline[];
# 50 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/ui.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 5 "/home/toto/.env/encours/neovim/src/nvim/ui.h" 2







typedef enum {
  kUICmdline = 0,
  kUIPopupmenu,
  kUITabline,
  kUIWildmenu,
  kUIMessages,

  kUILinegrid,
  kUIMultigrid,
  kUIHlState,
  kUITermColors,
  kUIFloatDebug,
  kUIExtCount,
} UIExtension;

extern const char *ui_ext_names[]
# 38 "/home/toto/.env/encours/neovim/src/nvim/ui.h"
  ;

typedef struct ui_t UI;

enum {
  kLineFlagWrap = 1,
  kLineFlagInvalid = 2,
};

typedef int LineFlags;

struct ui_t {
  
# 50 "/home/toto/.env/encours/neovim/src/nvim/ui.h" 3 4
 _Bool 
# 50 "/home/toto/.env/encours/neovim/src/nvim/ui.h"
      rgb;
  
# 51 "/home/toto/.env/encours/neovim/src/nvim/ui.h" 3 4
 _Bool 
# 51 "/home/toto/.env/encours/neovim/src/nvim/ui.h"
      override;
  
# 52 "/home/toto/.env/encours/neovim/src/nvim/ui.h" 3 4
 _Bool 
# 52 "/home/toto/.env/encours/neovim/src/nvim/ui.h"
      composed;
  
# 53 "/home/toto/.env/encours/neovim/src/nvim/ui.h" 3 4
 _Bool 
# 53 "/home/toto/.env/encours/neovim/src/nvim/ui.h"
      ui_ext[kUIExtCount];
  int width;
  int height;
  int pum_nlines;
  
# 57 "/home/toto/.env/encours/neovim/src/nvim/ui.h" 3 4
 _Bool 
# 57 "/home/toto/.env/encours/neovim/src/nvim/ui.h"
      pum_pos;
  double pum_row;
  double pum_col;
  double pum_height;
  double pum_width;
  void *data;





  void (*inspect)(UI *ui, Dictionary *info);
};







extern MultiQueue *resize_events;
# 51 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/undo.h" 1
# 52 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 1 "/home/toto/.env/encours/neovim/src/nvim/version.h" 1






extern char* Version;
extern char* longVersion;
# 53 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 2
# 61 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static char *e_letunexp = "E18: Unexpected characters in :let";
static char *e_missbrac = "E111: Missing ']'";
static char *e_dictrange = "E719: Cannot use [:] with a Dictionary";
static char *e_illvar = "E461: Illegal variable name: %s";
static char *e_cannot_mod = "E995: Cannot modify existing variable";
static char *e_invalwindow = "E957: Invalid window number";


static char *e_letwrong = "E734: Wrong variable type for %s=";

static char_u * const namespace_char = (char_u *)"abglstvw";


static ScopeDictDictItem globvars_var;
# 83 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static hashtab_T compat_hashtab;



# 86 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 86 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    *eval_lavars_used = 
# 86 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 86 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;





typedef struct {
  ScopeDictDictItem sv_var;
  dict_T sv_dict;
} scriptvar_T;

static garray_T ga_scripts = {0, 0, sizeof(scriptvar_T *), 4, 
# 97 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                             ((void *)0)
# 97 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                 };



static int echo_attr = 0;


static garray_T ga_loaded = { 0, 0, sizeof(char_u *), 4, 
# 104 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                        ((void *)0) 
# 104 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             };




typedef struct {
  int fi_semicolon;
  int fi_varcount;
  listwatch_T fi_lw;
  list_T *fi_list;
} forinfo_T;
# 136 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static struct vimvar {
  char *vv_name;
  struct { typval_T di_tv; uint8_t di_flags; char_u di_key[17]; } vv_di;
  char vv_flags;
} vimvars[] =
{






  [VV_COUNT] = { .vv_name = "count", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_COUNT1] = { .vv_name = "count1", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_PREVCOUNT] = { .vv_name = "prevcount", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_ERRMSG] = { .vv_name = "errmsg", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_WARNINGMSG] = { .vv_name = "warningmsg", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_STATUSMSG] = { .vv_name = "statusmsg", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_SHELL_ERROR] = { .vv_name = "shell_error", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_THIS_SESSION] = { .vv_name = "this_session", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_VERSION] = { .vv_name = "version", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 1 +2, },
  [VV_LNUM] = { .vv_name = "lnum", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_TERMRESPONSE] = { .vv_name = "termresponse", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME] = { .vv_name = "fname", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_LANG] = { .vv_name = "lang", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_LC_TIME] = { .vv_name = "lc_time", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CTYPE] = { .vv_name = "ctype", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CC_FROM] = { .vv_name = "charconvert_from", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CC_TO] = { .vv_name = "charconvert_to", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME_IN] = { .vv_name = "fname_in", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME_OUT] = { .vv_name = "fname_out", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME_NEW] = { .vv_name = "fname_new", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME_DIFF] = { .vv_name = "fname_diff", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CMDARG] = { .vv_name = "cmdarg", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FOLDSTART] = { .vv_name = "foldstart", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_FOLDEND] = { .vv_name = "foldend", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_FOLDDASHES] = { .vv_name = "folddashes", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_FOLDLEVEL] = { .vv_name = "foldlevel", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_PROGNAME] = { .vv_name = "progname", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_SEND_SERVER] = { .vv_name = "servername", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_DYING] = { .vv_name = "dying", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_EXCEPTION] = { .vv_name = "exception", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_THROWPOINT] = { .vv_name = "throwpoint", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_STDERR] = { .vv_name = "stderr", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_REG] = { .vv_name = "register", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CMDBANG] = { .vv_name = "cmdbang", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_INSERTMODE] = { .vv_name = "insertmode", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_VAL] = { .vv_name = "val", .vv_di = { .di_tv = { .v_type = VAR_UNKNOWN }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_KEY] = { .vv_name = "key", .vv_di = { .di_tv = { .v_type = VAR_UNKNOWN }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_PROFILING] = { .vv_name = "profiling", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FCS_REASON] = { .vv_name = "fcs_reason", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FCS_CHOICE] = { .vv_name = "fcs_choice", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_BEVAL_BUFNR] = { .vv_name = "beval_bufnr", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_WINNR] = { .vv_name = "beval_winnr", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_WINID] = { .vv_name = "beval_winid", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_LNUM] = { .vv_name = "beval_lnum", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_COL] = { .vv_name = "beval_col", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_TEXT] = { .vv_name = "beval_text", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_SCROLLSTART] = { .vv_name = "scrollstart", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_SWAPNAME] = { .vv_name = "swapname", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_SWAPCHOICE] = { .vv_name = "swapchoice", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_SWAPCOMMAND] = { .vv_name = "swapcommand", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CHAR] = { .vv_name = "char", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MOUSE_WIN] = { .vv_name = "mouse_win", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MOUSE_WINID] = { .vv_name = "mouse_winid", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MOUSE_LNUM] = { .vv_name = "mouse_lnum", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MOUSE_COL] = { .vv_name = "mouse_col", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_OP] = { .vv_name = "operator", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_SEARCHFORWARD] = { .vv_name = "searchforward", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_HLSEARCH] = { .vv_name = "hlsearch", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_OLDFILES] = { .vv_name = "oldfiles", .vv_di = { .di_tv = { .v_type = VAR_LIST }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_WINDOWID] = { .vv_name = "windowid", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_PROGPATH] = { .vv_name = "progpath", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_COMPLETED_ITEM] = { .vv_name = "completed_item", .vv_di = { .di_tv = { .v_type = VAR_DICT }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_OPTION_NEW] = { .vv_name = "option_new", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_OPTION_OLD] = { .vv_name = "option_old", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_OPTION_TYPE] = { .vv_name = "option_type", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_ERRORS] = { .vv_name = "errors", .vv_di = { .di_tv = { .v_type = VAR_LIST }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MSGPACK_TYPES] = { .vv_name = "msgpack_types", .vv_di = { .di_tv = { .v_type = VAR_DICT }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_EVENT] = { .vv_name = "event", .vv_di = { .di_tv = { .v_type = VAR_DICT }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FALSE] = { .vv_name = "false", .vv_di = { .di_tv = { .v_type = VAR_SPECIAL }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TRUE] = { .vv_name = "true", .vv_di = { .di_tv = { .v_type = VAR_SPECIAL }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_NULL] = { .vv_name = "null", .vv_di = { .di_tv = { .v_type = VAR_SPECIAL }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV__NULL_LIST] = { .vv_name = "_null_list", .vv_di = { .di_tv = { .v_type = VAR_LIST }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV__NULL_DICT] = { .vv_name = "_null_dict", .vv_di = { .di_tv = { .v_type = VAR_DICT }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_VIM_DID_ENTER] = { .vv_name = "vim_did_enter", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TESTING] = { .vv_name = "testing", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_TYPE_NUMBER] = { .vv_name = "t_number", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_STRING] = { .vv_name = "t_string", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_FUNC] = { .vv_name = "t_func", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_LIST] = { .vv_name = "t_list", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_DICT] = { .vv_name = "t_dict", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_FLOAT] = { .vv_name = "t_float", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_BOOL] = { .vv_name = "t_bool", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_ECHOSPACE] = { .vv_name = "echospace", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_EXITING] = { .vv_name = "exiting", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_LUA] = { .vv_name = "lua", .vv_di = { .di_tv = { .v_type = VAR_PARTIAL }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_ARGV] = { .vv_name = "argv", .vv_di = { .di_tv = { .v_type = VAR_LIST }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
};
# 249 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static ScopeDictDictItem vimvars_var;

static partial_T *vvlua_partial;
# 260 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static uint64_t last_timer_id = 1;
static Map_uint64_t_ptr_t *timers = 
# 261 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 261 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   ;

static const char *const msgpack_type_names[] = {
  [kMPNil] = "nil",
  [kMPBoolean] = "boolean",
  [kMPInteger] = "integer",
  [kMPFloat] = "float",
  [kMPString] = "string",
  [kMPBinary] = "binary",
  [kMPArray] = "array",
  [kMPMap] = "map",
  [kMPExt] = "ext",
};
const list_T *eval_msgpack_type_lists[] = {
  [kMPNil] = 
# 275 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 275 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ,
  [kMPBoolean] = 
# 276 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 276 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ,
  [kMPInteger] = 
# 277 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 277 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ,
  [kMPFloat] = 
# 278 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 278 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ,
  [kMPString] = 
# 279 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 279 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ,
  [kMPBinary] = 
# 280 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 280 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ,
  [kMPArray] = 
# 281 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 281 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ,
  [kMPMap] = 
# 282 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 282 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ,
  [kMPExt] = 
# 283 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 283 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ,
};


varnumber_T num_divide(varnumber_T n1, varnumber_T n2)
  FUNC_ATTR_CONST FUNC_ATTR_WARN_UNUSED_RESULT
{
  varnumber_T result;

  if (n2 == 0) {
    if (n1 == 0) {
      result = 
# 294 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              (-9223372036854775807L -1)
# 294 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
    } else if (n1 < 0) {
      result = -
# 296 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               (9223372036854775807L)
# 296 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;
    } else {
      result = 
# 298 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              (9223372036854775807L)
# 298 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
    }
  } else {
    result = n1 / n2;
  }

  return result;
}


varnumber_T num_modulus(varnumber_T n1, varnumber_T n2)
  FUNC_ATTR_CONST FUNC_ATTR_WARN_UNUSED_RESULT
{

  return (n2 == 0) ? 0 : (n1 % n2);
}




void eval_init(void)
{
  vimvars[VV_VERSION].vv_di.di_tv.vval.v_number = (8 * 100 + 0);

  timers = map_uint64_t_ptr_t_new();
  struct vimvar *p;

  init_var_dict(&globvardict, &globvars_var, VAR_DEF_SCOPE);
  init_var_dict(&vimvardict, &vimvars_var, VAR_SCOPE);
  vimvardict.dv_lock = VAR_FIXED;
  hash_init(&compat_hashtab);
  func_init();

  for (size_t i = 0; i < ((sizeof(vimvars)/sizeof((vimvars)[0])) / ((size_t)(!(sizeof(vimvars) % sizeof((vimvars)[0]))))); i++) {
    p = &vimvars[i];
    
# 333 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void) sizeof ((
# 333 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   strlen((char *)(p->vv_name)) <= 16
# 333 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ) ? 1 : 0), __extension__ ({ if (
# 333 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   strlen((char *)(p->vv_name)) <= 16
# 333 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ) ; else __assert_fail (
# 333 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   "STRLEN(p->vv_name) <= 16"
# 333 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 333, __extension__ __PRETTY_FUNCTION__); }))
# 333 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   ;
    strcpy((char *)(p->vv_di.di_key), (char *)(p->vv_name));
    if (p->vv_flags & 2)
      p->vv_di.di_flags = DI_FLAGS_RO | DI_FLAGS_FIX;
    else if (p->vv_flags & 4)
      p->vv_di.di_flags = DI_FLAGS_RO_SBX | DI_FLAGS_FIX;
    else
      p->vv_di.di_flags = DI_FLAGS_FIX;


    if (p->vv_di.di_tv.v_type != VAR_UNKNOWN) {
      hash_add(&vimvardict.dv_hashtab, p->vv_di.di_key);
    }
    if (p->vv_flags & 1) {

      hash_add(&compat_hashtab, p->vv_di.di_key);
    }
  }
  vimvars[VV_VERSION].vv_di.di_tv.vval.v_number = (8 * 100 + 0);

  dict_T *const msgpack_types_dict = tv_dict_alloc();
  for (size_t i = 0; i < ((sizeof(msgpack_type_names)/sizeof((msgpack_type_names)[0])) / ((size_t)(!(sizeof(msgpack_type_names) % sizeof((msgpack_type_names)[0]))))); i++) {
    list_T *const type_list = tv_list_alloc(0);
    tv_list_set_lock(type_list, VAR_FIXED);
    tv_list_ref(type_list);
    dictitem_T *const di = tv_dict_item_alloc(msgpack_type_names[i]);
    di->di_flags |= DI_FLAGS_RO|DI_FLAGS_FIX;
    di->di_tv = (typval_T) {
      .v_type = VAR_LIST,
      .vval = { .v_list = type_list, },
    };
    eval_msgpack_type_lists[i] = type_list;
    if (tv_dict_add(msgpack_types_dict, di) == 0) {

      
# 367 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void) sizeof ((0) ? 1 : 0), __extension__ ({ if (0) ; else __assert_fail (
# 367 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     "false"
# 367 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 367, __extension__ __PRETTY_FUNCTION__); }))
# 367 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
    }
  }
  msgpack_types_dict->dv_lock = VAR_FIXED;

  set_vim_var_dict(VV_MSGPACK_TYPES, msgpack_types_dict);
  set_vim_var_dict(VV_COMPLETED_ITEM, tv_dict_alloc());

  dict_T *v_event = tv_dict_alloc();
  v_event->dv_lock = VAR_FIXED;
  set_vim_var_dict(VV_EVENT, v_event);
  set_vim_var_list(VV_ERRORS, tv_list_alloc(kListLenUnknown));
  set_vim_var_nr(VV_STDERR, 2);
  set_vim_var_nr(VV_SEARCHFORWARD, 1L);
  set_vim_var_nr(VV_HLSEARCH, 1L);
  set_vim_var_nr(VV_COUNT1, 1);
  set_vim_var_nr(VV_TYPE_NUMBER, 0);
  set_vim_var_nr(VV_TYPE_STRING, 1);
  set_vim_var_nr(VV_TYPE_FUNC, 2);
  set_vim_var_nr(VV_TYPE_LIST, 3);
  set_vim_var_nr(VV_TYPE_DICT, 4);
  set_vim_var_nr(VV_TYPE_FLOAT, 5);
  set_vim_var_nr(VV_TYPE_BOOL, 6);

  set_vim_var_special(VV_FALSE, kSpecialVarFalse);
  set_vim_var_special(VV_TRUE, kSpecialVarTrue);
  set_vim_var_special(VV_NULL, kSpecialVarNull);
  set_vim_var_special(VV_EXITING, kSpecialVarNull);

  set_vim_var_nr(VV_ECHOSPACE, sc_col - 1);

  vimvars[VV_LUA].vv_di.di_tv.v_type = VAR_PARTIAL;
  vvlua_partial = xcalloc(1, sizeof(partial_T));
  vimvars[VV_LUA].vv_di.di_tv.vval.v_partial = vvlua_partial;

  vvlua_partial->pt_name = xmallocz(0);
  vvlua_partial->pt_refcount++;

  set_reg_var(0);
}
# 457 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
void set_internal_string_var(char_u *name, char_u *value)
{
  const typval_T tv = {
    .v_type = VAR_STRING,
    .vval.v_string = value,
  };

  set_var((const char *)name, strlen((char *)(name)), (typval_T *)&tv, 
# 464 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                            1
# 464 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                );
}

static lval_T *redir_lval = 
# 467 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             ((void *)0)
# 467 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 ;
static garray_T redir_ga;
static char_u *redir_endp = 
# 469 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 469 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ;
static char_u *redir_varname = 
# 470 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                ((void *)0)
# 470 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    ;





int
var_redir_start(
    char_u *name,
    int append
)
{
  int save_emsg;
  int err;
  typval_T tv;


  if (!eval_isnamec1(*name)) {
    emsg((char_u *)(gettext((char *)(e_invarg))));
    return 0;
  }


  redir_varname = vim_strsave(name);

  redir_lval = xcalloc(1, sizeof(lval_T));


  ga_init(&redir_ga, (int)sizeof(char), 500);


  redir_endp = (char_u *)get_lval(redir_varname, 
# 501 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                ((void *)0)
# 501 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    , redir_lval, 
# 501 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                  0
# 501 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                       , 
# 501 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                         0
# 501 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                              ,
                                  0, 2);
  if (redir_endp == 
# 503 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0) 
# 503 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        || redir_lval->ll_name == 
# 503 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                  ((void *)0)
      
# 504 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     || *redir_endp != '\000') {
    clear_lval(redir_lval);
    if (redir_endp != 
# 506 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0) 
# 506 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          && *redir_endp != '\000') {

      emsg((char_u *)(gettext((char *)(e_trailing))));
    } else {
      emsg((char_u *)(gettext((char *)(e_invarg))));
    }
    redir_endp = 
# 512 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 512 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
    var_redir_stop();
    return 0;
  }



  save_emsg = did_emsg;
  did_emsg = 0;
  tv.v_type = VAR_STRING;
  tv.vval.v_string = (char_u *)"";
  if (append) {
    set_var_lval(redir_lval, redir_endp, &tv, 
# 524 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             1
# 524 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 , 
# 524 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   0
# 524 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        , (char_u *)".");
  } else {
    set_var_lval(redir_lval, redir_endp, &tv, 
# 526 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             1
# 526 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 , 
# 526 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   0
# 526 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        , (char_u *)"=");
  }
  clear_lval(redir_lval);
  err = did_emsg;
  did_emsg |= save_emsg;
  if (err) {
    redir_endp = 
# 532 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 532 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
    var_redir_stop();
    return 0;
  }

  return 1;
}
# 549 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
void var_redir_str(char_u *value, int value_len)
{
  int len;

  if (redir_lval == 
# 553 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 553 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       )
    return;

  if (value_len == -1) {
    len = (int)strlen((char *)(value));
  } else {
    len = value_len;
  }

  ga_grow(&redir_ga, len);
  memmove((char *)redir_ga.ga_data + redir_ga.ga_len, value, len);
  redir_ga.ga_len += len;
}





void var_redir_stop(void)
{
  typval_T tv;

  if (redir_lval != 
# 575 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 575 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {

    if (redir_endp != 
# 577 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 577 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
      ga_append(&redir_ga, '\000');
      tv.v_type = VAR_STRING;
      tv.vval.v_string = redir_ga.ga_data;


      redir_endp = (char_u *)get_lval(redir_varname, 
# 583 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    ((void *)0)
# 583 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        , redir_lval,
                                      
# 584 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     0
# 584 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                          , 
# 584 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            0
# 584 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 , 0, 2);
      if (redir_endp != 
# 585 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0) 
# 585 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            && redir_lval->ll_name != 
# 585 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      ((void *)0)
# 585 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          ) {
        set_var_lval(redir_lval, redir_endp, &tv, 
# 586 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                 0
# 586 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                      , 
# 586 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                        0
# 586 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             , (char_u *)".");
      }
      clear_lval(redir_lval);
    }


    do { void **ptr_ = (void **)&(redir_ga.ga_data); xfree(*ptr_); *ptr_ = 
# 592 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 592 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ; (void)(*ptr_); } while (0);

    do { void **ptr_ = (void **)&(redir_lval); xfree(*ptr_); *ptr_ = 
# 594 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 594 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ; (void)(*ptr_); } while (0);
  }
  do { void **ptr_ = (void **)&(redir_varname); xfree(*ptr_); *ptr_ = 
# 596 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 596 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; (void)(*ptr_); } while (0);
}

int eval_charconvert(const char *const enc_from, const char *const enc_to,
                     const char *const fname_from, const char *const fname_to)
{
  
# 602 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 602 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      err = 
# 602 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 602 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;

  set_vim_var_string(VV_CC_FROM, enc_from, -1);
  set_vim_var_string(VV_CC_TO, enc_to, -1);
  set_vim_var_string(VV_FNAME_IN, fname_from, -1);
  set_vim_var_string(VV_FNAME_OUT, fname_to, -1);
  if (eval_to_bool(p_ccv, &err, 
# 608 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 608 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   , 
# 608 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     0
# 608 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                          )) {
    err = 
# 609 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         1
# 609 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
  }
  set_vim_var_string(VV_CC_FROM, 
# 611 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                ((void *)0)
# 611 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    , -1);
  set_vim_var_string(VV_CC_TO, 
# 612 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              ((void *)0)
# 612 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  , -1);
  set_vim_var_string(VV_FNAME_IN, 
# 613 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 613 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , -1);
  set_vim_var_string(VV_FNAME_OUT, 
# 614 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 614 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      , -1);

  if (err) {
    return 0;
  }
  return 1;
}

int eval_printexpr(const char *const fname, const char *const args)
{
  
# 624 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 624 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      err = 
# 624 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 624 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;

  set_vim_var_string(VV_FNAME_IN, fname, -1);
  set_vim_var_string(VV_CMDARG, args, -1);
  if (eval_to_bool(p_pexpr, &err, 
# 628 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 628 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , 
# 628 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       0
# 628 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            )) {
    err = 
# 629 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         1
# 629 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
  }
  set_vim_var_string(VV_FNAME_IN, 
# 631 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 631 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , -1);
  set_vim_var_string(VV_CMDARG, 
# 632 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 632 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   , -1);

  if (err) {
    os_remove(fname);
    return 0;
  }
  return 1;
}

void eval_diff(const char *const origfile, const char *const newfile,
               const char *const outfile)
{
  
# 644 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 644 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      err = 
# 644 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 644 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;

  set_vim_var_string(VV_FNAME_IN, origfile, -1);
  set_vim_var_string(VV_FNAME_NEW, newfile, -1);
  set_vim_var_string(VV_FNAME_OUT, outfile, -1);
  (void)eval_to_bool(p_dex, &err, 
# 649 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 649 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , 0);
  set_vim_var_string(VV_FNAME_IN, 
# 650 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 650 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , -1);
  set_vim_var_string(VV_FNAME_NEW, 
# 651 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 651 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      , -1);
  set_vim_var_string(VV_FNAME_OUT, 
# 652 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 652 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      , -1);
}

void eval_patch(const char *const origfile, const char *const difffile,
                const char *const outfile)
{
  
# 658 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 658 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      err = 
# 658 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 658 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;

  set_vim_var_string(VV_FNAME_IN, origfile, -1);
  set_vim_var_string(VV_FNAME_DIFF, difffile, -1);
  set_vim_var_string(VV_FNAME_OUT, outfile, -1);
  (void)eval_to_bool(p_pex, &err, 
# 663 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 663 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , 0);
  set_vim_var_string(VV_FNAME_IN, 
# 664 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 664 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , -1);
  set_vim_var_string(VV_FNAME_DIFF, 
# 665 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                   ((void *)0)
# 665 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                       , -1);
  set_vim_var_string(VV_FNAME_OUT, 
# 666 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 666 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      , -1);
}






int
eval_to_bool(
    char_u *arg,
    
# 677 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 677 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        *error,
    char_u **nextcmd,
    int skip
)
{
  typval_T tv;
  
# 683 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 683 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      retval = 
# 683 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               0
# 683 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;

  if (skip) {
    emsg_skip++;
  }
  if (eval0(arg, &tv, nextcmd, !skip) == 0) {
    *error = 
# 689 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            1
# 689 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
  } else {
    *error = 
# 691 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 691 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
    if (!skip) {
      retval = (tv_get_number_chk(&tv, error) != 0);
      tv_clear(&tv);
    }
  }
  if (skip) {
    emsg_skip--;
  }

  return retval;
}


static int eval1_emsg(char_u **arg, typval_T *rettv, 
# 705 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    _Bool 
# 705 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         evaluate)
  FUNC_ATTR_NONNULL_ARG(1, 2)
{
  const char_u *const start = *arg;
  const int did_emsg_before = did_emsg;
  const int called_emsg_before = called_emsg;

  const int ret = eval1(arg, rettv, evaluate);
  if (ret == 0) {




    if (!aborting()
        && did_emsg == did_emsg_before
        && called_emsg == called_emsg_before) {
      emsgf(gettext((char *)(e_invexpr2)), start);
    }
  }
  return ret;
}

int eval_expr_typval(const typval_T *expr, typval_T *argv,
                     int argc, typval_T *rettv)
  FUNC_ATTR_NONNULL_ARG(1, 2, 4)
{
  int dummy;

  if (expr->v_type == VAR_FUNC) {
    const char_u *const s = expr->vval.v_string;
    if (s == 
# 735 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0) 
# 735 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 || *s == '\000') {
      return 0;
    }
    if (call_func(s, (int)strlen((char *)(s)), rettv, argc, argv, 
# 738 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       ((void *)0)
# 738 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           ,
                  0L, 0L, &dummy, 
# 739 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 1
# 739 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , 
# 739 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 739 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , 
# 739 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             ((void *)0)
# 739 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 ) == 0) {
      return 0;
    }
  } else if (expr->v_type == VAR_PARTIAL) {
    partial_T *const partial = expr->vval.v_partial;
    const char_u *const s = partial_name(partial);
    if (s == 
# 745 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0) 
# 745 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 || *s == '\000') {
      return 0;
    }
    if (call_func(s, (int)strlen((char *)(s)), rettv, argc, argv, 
# 748 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       ((void *)0)
# 748 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           ,
                  0L, 0L, &dummy, 
# 749 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 1
# 749 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , partial, 
# 749 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                ((void *)0)
# 749 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    ) == 0) {
      return 0;
    }
  } else {
    char buf[NUMBUFLEN];
    char_u *s = (char_u *)tv_get_string_buf_chk(expr, buf);
    if (s == 
# 755 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 755 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
      return 0;
    }
    s = skipwhite(s);
    if (eval1_emsg(&s, rettv, 
# 759 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             1
# 759 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 ) == 0) {
      return 0;
    }
    if (*s != '\000') {
      tv_clear(rettv);
      emsgf(gettext((char *)(e_invexpr2)), s);
      return 0;
    }
  }
  return 1;
}




# 773 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 773 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    eval_expr_to_bool(const typval_T *expr, 
# 773 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            _Bool 
# 773 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 *error)
  FUNC_ATTR_NONNULL_ARG(1, 2)
{
  typval_T argv, rettv;

  if (eval_expr_typval(expr, &argv, 0, &rettv) == 0) {
    *error = 
# 779 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            1
# 779 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    return 
# 780 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 780 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }
  const 
# 782 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       _Bool 
# 782 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            res = (tv_get_number_chk(&rettv, error) != 0);
  tv_clear(&rettv);
  return res;
}
# 796 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
char *eval_to_string_skip(const char *arg, const char **nextcmd,
                          const 
# 797 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               _Bool 
# 797 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    skip)
  FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ARG(1) FUNC_ATTR_WARN_UNUSED_RESULT
{
  typval_T tv;
  char *retval;

  if (skip) {
    emsg_skip++;
  }
  if (eval0((char_u *)arg, &tv, (char_u **)nextcmd, !skip) == 0 || skip) {
    retval = 
# 807 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 807 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
  } else {
    retval = xstrdup(tv_get_string(&tv));
    tv_clear(&tv);
  }
  if (skip) {
    emsg_skip--;
  }

  return retval;
}





int skip_expr(char_u **pp)
{
  typval_T rettv;

  *pp = skipwhite(*pp);
  return eval1(pp, &rettv, 0);
}







char_u *eval_to_string(char_u *arg, char_u **nextcmd, int convert)
{
  typval_T tv;
  char *retval;
  garray_T ga;

  if (eval0(arg, &tv, nextcmd, 
# 843 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              1
# 843 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  ) == 0) {
    retval = 
# 844 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 844 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
  } else {
    if (convert && tv.v_type == VAR_LIST) {
      ga_init(&ga, (int)sizeof(char), 80);
      if (tv.vval.v_list != 
# 848 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 848 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ) {
        tv_list_join(&ga, tv.vval.v_list, "\n");
        if (tv_list_len(tv.vval.v_list) > 0) {
          ga_append(&ga, '\012');
        }
      }
      ga_append(&ga, '\000');
      retval = (char *)ga.ga_data;
    } else if (convert && tv.v_type == VAR_FLOAT) {
      char numbuf[NUMBUFLEN];
      vim_snprintf(numbuf, NUMBUFLEN, "%g", tv.vval.v_float);
      retval = xstrdup(numbuf);
    } else {
      retval = xstrdup(tv_get_string(&tv));
    }
    tv_clear(&tv);
  }

  return (char_u *)retval;
}





char_u *eval_to_string_safe(char_u *arg, char_u **nextcmd, int use_sandbox)
{
  char_u *retval;
  funccal_entry_T funccal_entry;

  save_funccal(&funccal_entry);
  if (use_sandbox) {
    sandbox++;
  }
  textlock++;
  retval = eval_to_string(arg, nextcmd, 
# 883 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       0
# 883 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            );
  if (use_sandbox) {
    sandbox--;
  }
  textlock--;
  restore_funccal();
  return retval;
}






varnumber_T eval_to_number(char_u *expr)
{
  typval_T rettv;
  varnumber_T retval;
  char_u *p = skipwhite(expr);

  ++emsg_off;

  if (eval1(&p, &rettv, 
# 905 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       1
# 905 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ) == 0) {
    retval = -1;
  } else {
    retval = tv_get_number_chk(&rettv, 
# 908 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                      ((void *)0)
# 908 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                          );
    tv_clear(&rettv);
  }
  --emsg_off;

  return retval;
}







void prepare_vimvar(int idx, typval_T *save_tv)
{
  *save_tv = vimvars[idx].vv_di.di_tv;
  if (vimvars[idx].vv_di.di_tv.v_type == VAR_UNKNOWN)
    hash_add(&vimvardict.dv_hashtab, vimvars[idx].vv_di.di_key);
}





void restore_vimvar(int idx, typval_T *save_tv)
{
  hashitem_T *hi;

  vimvars[idx].vv_di.di_tv = *save_tv;
  if (vimvars[idx].vv_di.di_tv.v_type == VAR_UNKNOWN) {
    hi = hash_find(&vimvardict.dv_hashtab, vimvars[idx].vv_di.di_key);
    if (((hi)->hi_key == 
# 940 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0) 
# 940 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       || (hi)->hi_key == (char_u *)&hash_removed)) {
      internal_error("restore_vimvar()");
    } else {
      hash_remove(&vimvardict.dv_hashtab, hi);
    }
  }
}


void find_win_for_curbuf(void)
{
  for (wininfo_T *wip = curbuf->b_wininfo; wip != 
# 951 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                 ((void *)0)
# 951 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     ; wip = wip->wi_next) {
    if (wip->wi_win != 
# 952 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 952 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
      curwin = wip->wi_win;
      break;
    }
  }
}






list_T *eval_spell_expr(char_u *badword, char_u *expr)
{
  typval_T save_val;
  typval_T rettv;
  list_T *list = 
# 968 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 968 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;
  char_u *p = skipwhite(expr);


  prepare_vimvar(VV_VAL, &save_val);
  vimvars[VV_VAL].vv_di.di_tv.v_type = VAR_STRING;
  vimvars[VV_VAL].vv_di.di_tv.vval.v_string = badword;
  if (p_verbose == 0)
    ++emsg_off;

  if (eval1(&p, &rettv, 
# 978 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       1
# 978 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ) == 1) {
    if (rettv.v_type != VAR_LIST) {
      tv_clear(&rettv);
    } else {
      list = rettv.vval.v_list;
    }
  }

  if (p_verbose == 0)
    --emsg_off;
  restore_vimvar(VV_VAL, &save_val);

  return list;
}
# 1006 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int get_spellword(list_T *const list, const char **ret_word)
{
  if (tv_list_len(list) != 2) {
    emsg((char_u *)(gettext((char *)("E5700: Expression from 'spellsuggest' must yield lists with " "exactly two values"))))
                                 ;
    return -1;
  }
  *ret_word = tv_list_find_str(list, 0);
  if (*ret_word == 
# 1014 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 1014 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
    return -1;
  }
  return tv_list_find_nr(list, -1, 
# 1017 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 1017 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      );
}







int call_vim_function(
    const char_u *func,
    int argc,
    typval_T *argv,
    typval_T *rettv
)
  FUNC_ATTR_NONNULL_ALL
{
  int doesrange;
  int ret;
  int len = (int)strlen((char *)(func));
  partial_T *pt = 
# 1037 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 1037 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;

  if (len >= 6 && !memcmp(func, "v:lua.", 6)) {
    func += 6;
    len = check_luafunc_name((const char *)func, 
# 1041 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                0
# 1041 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     );
    if (len == 0) {
      ret = 0;
      goto fail;
    }
    pt = vvlua_partial;
  }

  rettv->v_type = VAR_UNKNOWN;
  ret = call_func(func, len, rettv, argc, argv, 
# 1050 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               ((void *)0)
# 1050 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                   ,
                  curwin->w_cursor.lnum, curwin->w_cursor.lnum,
                  &doesrange, 
# 1052 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             1
# 1052 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 , pt, 
# 1052 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 1052 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           );

fail:
  if (ret == 0) {
    tv_clear(rettv);
  }

  return ret;
}







varnumber_T call_func_retnr(const char_u *func, int argc,
                            typval_T *argv)
  FUNC_ATTR_NONNULL_ALL
{
  typval_T rettv;
  varnumber_T retval;

  if (call_vim_function(func, argc, argv, &rettv) == 0) {
    return -1;
  }
  retval = tv_get_number_chk(&rettv, 
# 1078 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                    ((void *)0)
# 1078 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        );
  tv_clear(&rettv);
  return retval;
}
# 1090 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
char *call_func_retstr(const char *const func, int argc,
                       typval_T *argv)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_MALLOC
{
  typval_T rettv;

  if (call_vim_function((const char_u *)func, argc, argv, &rettv)
      == 0) {
    return 
# 1098 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 1098 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  char *const retval = xstrdup(tv_get_string(&rettv));
  tv_clear(&rettv);
  return retval;
}
# 1113 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
void *call_func_retlist(const char_u *func, int argc, typval_T *argv)
  FUNC_ATTR_NONNULL_ALL
{
  typval_T rettv;


  if (call_vim_function(func, argc, argv, &rettv) == 0) {
    return 
# 1120 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 1120 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  if (rettv.v_type != VAR_LIST) {
    tv_clear(&rettv);
    return 
# 1125 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 1125 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  return rettv.vval.v_list;
}






void prof_child_enter(
    proftime_T *tm
)
{
  funccall_T *fc = get_current_funccal();

  if (fc != 
# 1142 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 1142 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && fc->func->uf_profiling) {
    fc->prof_child = profile_start();
  }

  script_prof_save(tm);
}





void prof_child_exit(
    proftime_T *tm
)
{
  funccall_T *fc = get_current_funccal();

  if (fc != 
# 1159 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 1159 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && fc->func->uf_profiling) {
    fc->prof_child = profile_end(fc->prof_child);

    fc->prof_child = profile_sub_wait(*tm, fc->prof_child);
    fc->func->uf_tm_children =
      profile_add(fc->func->uf_tm_children, fc->prof_child);
    fc->func->uf_tml_children =
      profile_add(fc->func->uf_tml_children, fc->prof_child);
  }
  script_prof_restore(tm);
}






int eval_foldexpr(char_u *arg, int *cp)
{
  typval_T tv;
  varnumber_T retval;
  int use_sandbox = was_set_insecurely((char_u *)"foldexpr",
      OPT_LOCAL);

  ++emsg_off;
  if (use_sandbox)
    ++sandbox;
  ++textlock;
  *cp = '\000';
  if (eval0(arg, &tv, 
# 1188 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 1188 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         , 
# 1188 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           1
# 1188 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ) == 0) {
    retval = 0;
  } else {

    if (tv.v_type == VAR_NUMBER) {
      retval = tv.vval.v_number;
    } else if (tv.v_type != VAR_STRING || tv.vval.v_string == 
# 1194 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                             ((void *)0)
# 1194 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                 ) {
      retval = 0;
    } else {


      char_u *s = tv.vval.v_string;
      if (!ascii_isdigit(*s) && *s != '-') {
        *cp = *s++;
      }
      retval = atol((char *)s);
    }
    tv_clear(&tv);
  }
  --emsg_off;
  if (use_sandbox)
    --sandbox;
  --textlock;

  return (int)retval;
}




void ex_const(exarg_T *eap)
{
  ex_let_const(eap, 
# 1220 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   1
# 1220 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       );
}
# 1235 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static list_T *
heredoc_get(exarg_T *eap, char_u *cmd)
{
  char_u *marker;
  char_u *p;
  int marker_indent_len = 0;
  int text_indent_len = 0;
  char_u *text_indent = 
# 1242 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 1242 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;

  if (eap->getline == 
# 1244 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 1244 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
    emsg((char_u *)(gettext((char *)("E991: cannot use =<< here"))));
    return 
# 1246 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 1246 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }


  cmd = skipwhite(cmd);
  if (strncmp((char *)(cmd), (char *)("trim"), (size_t)(4)) == 0
      && (cmd[4] == '\000' || ascii_iswhite(cmd[4]))) {
    cmd = skipwhite(cmd + 4);





    p = *eap->cmdlinep;
    while (ascii_iswhite(*p)) {
      p++;
      marker_indent_len++;
    }
    text_indent_len = -1;
  }


  if (*cmd != '\000' && *cmd != '"') {
    marker = skipwhite(cmd);
    p = skiptowhite(marker);
    if (*skipwhite(p) != '\000' && *skipwhite(p) != '"') {
      emsg((char_u *)(gettext((char *)(e_trailing))));
      return 
# 1273 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 1273 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
    *p = '\000';
    if (
# 1276 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((*__ctype_b_loc ())[(int) ((
# 1276 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       *marker
# 1276 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ))] & (unsigned short int) _ISlower)
# 1276 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {
      emsg((char_u *)(gettext((char *)("E221: Marker cannot start with lower case letter"))));
      return 
# 1278 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 1278 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
  } else {
    emsg((char_u *)(gettext((char *)("E172: Missing marker"))));
    return 
# 1282 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 1282 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  list_T *l = tv_list_alloc(0);
  for (;;) {
    int mi = 0;
    int ti = 0;

    char_u *theline = eap->getline('\000', eap->cookie, 0, 
# 1290 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       0
# 1290 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                            );
    if (theline == 
# 1291 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 1291 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
      emsgf((const char *) (gettext((char *)("E990: Missing end marker '%s'"))), (marker));
      break;
    }



    if (marker_indent_len > 0
        && strncmp((char *)(theline), (char *)(*eap->cmdlinep), (size_t)(marker_indent_len)) == 0) {
        mi = marker_indent_len;
    }
    if (strcmp((char *)(marker), (char *)(theline + mi)) == 0) {
      xfree(theline);
      break;
    }
    if (text_indent_len == -1 && *theline != '\000') {

        p = theline;
        text_indent_len = 0;
        while (ascii_iswhite(*p)) {
            p++;
            text_indent_len++;
        }
        text_indent = vim_strnsave(theline, text_indent_len);
    }

    if (text_indent != 
# 1317 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 1317 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
        for (ti = 0; ti < text_indent_len; ti++) {
            if (theline[ti] != text_indent[ti]) {
                break;
            }
        }
    }

    tv_list_append_string(l, (char *)(theline + ti), -1);
    xfree(theline);
  }
  xfree(text_indent);

  return l;
}
# 1345 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
void ex_let(exarg_T *eap)
{
  ex_let_const(eap, 
# 1347 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   0
# 1347 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        );
}

static void ex_let_const(exarg_T *eap, const 
# 1350 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            _Bool 
# 1350 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 is_const)
{
  char_u *arg = eap->arg;
  char_u *expr = 
# 1353 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 1353 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;
  typval_T rettv;
  int i;
  int var_count = 0;
  int semicolon = 0;
  char_u op[2];
  char_u *argend;
  int first = 1;

  argend = (char_u *)skip_var_list(arg, &var_count, &semicolon);
  if (argend == 
# 1363 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 1363 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ) {
    return;
  }
  if (argend > arg && argend[-1] == '.') {
    argend--;
  }
  expr = skipwhite(argend);
  if (*expr != '=' && !((vim_strchr((char_u *)"+-*/%.", *expr) != 
# 1370 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 ((void *)0)
                         
# 1371 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        && expr[1] == '=') || strncmp((char *)(expr), (char *)("..="), (size_t)(3)) == 0)) {

    if (*arg == '[') {
      emsg((char_u *)(gettext((char *)(e_invarg))));
    } else if (!ends_excmd(*arg)) {

      arg = (char_u *)list_arg_vars(eap, (const char *)arg, &first);
    } else if (!eap->skip) {

      list_glob_vars(&first);
      list_buf_vars(&first);
      list_win_vars(&first);
      list_tab_vars(&first);
      list_script_vars(&first);
      list_func_vars(&first);
      list_vim_vars(&first);
    }
    eap->nextcmd = check_nextcmd(arg);
  } else if (expr[0] == '=' && expr[1] == '<' && expr[2] == '<') {

    list_T *l = heredoc_get(eap, expr + 3);
    if (l != 
# 1392 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 1392 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
      tv_list_set_ret(&rettv, l);
      if (!eap->skip) {
        op[0] = '=';
        op[1] = '\000';
        (void)ex_let_vars(eap->arg, &rettv, 
# 1397 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           0
# 1397 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                , semicolon, var_count,
                          is_const, op);
      }
      tv_clear(&rettv);
    }
  } else {
    op[0] = '=';
    op[1] = '\000';
    if (*expr != '=') {
      if (vim_strchr((char_u *)"+-*/%.", *expr) != 
# 1406 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                  ((void *)0)
# 1406 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                      ) {
        op[0] = *expr;
        if (expr[0] == '.' && expr[1] == '.') {
          expr++;
        }
      }
      expr = skipwhite(expr + 2);
    } else {
      expr = skipwhite(expr + 1);
    }

    if (eap->skip)
      ++emsg_skip;
    i = eval0(expr, &rettv, &eap->nextcmd, !eap->skip);
    if (eap->skip) {
      if (i != 0) {
        tv_clear(&rettv);
      }
      emsg_skip--;
    } else if (i != 0) {
      (void)ex_let_vars(eap->arg, &rettv, 
# 1426 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         0
# 1426 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              , semicolon, var_count,
                        is_const, op);
      tv_clear(&rettv);
    }
  }
}
# 1441 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int
ex_let_vars(
    char_u *arg_start,
    typval_T *tv,
    int copy,
    int semicolon,
    int var_count,
    int is_const,
    char_u *nextchars
)
{
  char_u *arg = arg_start;
  typval_T ltv;

  if (*arg != '[') {



    if (ex_let_one(arg, tv, copy, is_const, nextchars, nextchars) == 
# 1459 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                    ((void *)0)
# 1459 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                        ) {
      return 0;
    }
    return 1;
  }


  if (tv->v_type != VAR_LIST) {
    emsg((char_u *)(gettext((char *)(e_listreq))));
    return 0;
  }
  list_T *const l = tv->vval.v_list;

  const int len = tv_list_len(l);
  if (semicolon == 0 && var_count < len) {
    emsg((char_u *)(gettext((char *)("E687: Less targets than List items"))));
    return 0;
  }
  if (var_count - semicolon > len) {
    emsg((char_u *)(gettext((char *)("E688: More targets than List items"))));
    return 0;
  }


  
# 1483 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void) sizeof ((
# 1483 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 l != 
# 1483 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 1483 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 l != 
# 1483 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)) ; else __assert_fail (
# 1483 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 "l != NULL"
# 1483 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 1483, __extension__ __PRETTY_FUNCTION__); }))
# 1483 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;

  listitem_T *item = tv_list_first(l);
  size_t rest_len = tv_list_len(l);
  while (*arg != ']') {
    arg = skipwhite(arg + 1);
    arg = ex_let_one(arg, (&(item)->li_tv), 
# 1489 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                1
# 1489 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    , is_const,
                     (const char_u *)",;]", nextchars);
    if (arg == 
# 1491 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 1491 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ) {
      return 0;
    }
    rest_len--;

    item = ((item)->li_next);
    arg = skipwhite(arg);
    if (*arg == ';') {


      list_T *const rest_list = tv_list_alloc(rest_len);
      while (item != 
# 1502 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 1502 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ) {
        tv_list_append_tv(rest_list, (&(item)->li_tv));
        item = ((item)->li_next);
      }

      ltv.v_type = VAR_LIST;
      ltv.v_lock = VAR_UNLOCKED;
      ltv.vval.v_list = rest_list;
      tv_list_ref(rest_list);

      arg = ex_let_one(skipwhite(arg + 1), &ltv, 
# 1512 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                0
# 1512 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     , is_const,
                       (char_u *)"]", nextchars);
      tv_clear(&ltv);
      if (arg == 
# 1515 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 1515 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
        return 0;
      }
      break;
    } else if (*arg != ',' && *arg != ']') {
      internal_error("ex_let_vars()");
      return 0;
    }
  }

  return 1;
}
# 1535 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static const char_u *skip_var_list(const char_u *arg, int *var_count,
                                   int *semicolon)
{
  const char_u *p;
  const char_u *s;

  if (*arg == '[') {

    p = arg;
    for (;; ) {
      p = skipwhite(p + 1);
      s = skip_var_one(p);
      if (s == p) {
        emsgf((const char *) (gettext((char *)(e_invarg2))), (p));
        return 
# 1549 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 1549 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }
      ++*var_count;

      p = skipwhite(s);
      if (*p == ']')
        break;
      else if (*p == ';') {
        if (*semicolon == 1) {
          emsg((char_u *)(gettext((char *)("Double ; in list of variables"))));
          return 
# 1559 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 1559 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
        *semicolon = 1;
      } else if (*p != ',') {
        emsgf((const char *) (gettext((char *)(e_invarg2))), (p));
        return 
# 1564 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 1564 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }
    }
    return p + 1;
  } else
    return skip_var_one(arg);
}





static const char_u *skip_var_one(const char_u *arg)
{
  if (*arg == '@' && arg[1] != '\000')
    return arg + 2;
  return find_name_end(*arg == '$' || *arg == '&' ? arg + 1 : arg,
      
# 1581 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void *)0)
# 1581 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
         , 
# 1581 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0)
# 1581 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               , 1 | 2);
}





void list_hashtable_vars(hashtab_T *ht, const char *prefix, int empty,
                         int *first)
{
  hashitem_T *hi;
  dictitem_T *di;
  int todo;

  todo = (int)ht->ht_used;
  for (hi = ht->ht_array; todo > 0 && !got_int; ++hi) {
    if (!((hi)->hi_key == 
# 1597 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0) 
# 1597 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        || (hi)->hi_key == (char_u *)&hash_removed)) {
      todo--;
      di = ((dictitem_T *)((hi)->hi_key - 
# 1599 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          __builtin_offsetof (
# 1599 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          dictitem_T
# 1599 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          , 
# 1599 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          di_key
# 1599 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          )
# 1599 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          ));
      char buf[(1024+1)];


      xstrlcpy(buf, prefix, (1024+1) - 1);
      xstrlcat(buf, (char *)di->di_key, (1024+1));
      if (message_filtered((char_u *)buf)) {
        continue;
      }

      if (empty || di->di_tv.v_type != VAR_STRING
          || di->di_tv.vval.v_string != 
# 1610 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 1610 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           ) {
        list_one_var(di, prefix, first);
      }
    }
  }
}




static void list_glob_vars(int *first)
{
  list_hashtable_vars(&globvardict.dv_hashtab, "", 
# 1622 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     1
# 1622 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                         , first);
}




static void list_buf_vars(int *first)
{
  list_hashtable_vars(&curbuf->b_vars->dv_hashtab, "b:", 
# 1630 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                        1
# 1630 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                            , first);
}




static void list_win_vars(int *first)
{
  list_hashtable_vars(&curwin->w_vars->dv_hashtab, "w:", 
# 1638 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                        1
# 1638 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                            , first);
}




static void list_tab_vars(int *first)
{
  list_hashtable_vars(&curtab->tp_vars->dv_hashtab, "t:", 
# 1646 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                         1
# 1646 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             , first);
}




static void list_vim_vars(int *first)
{
  list_hashtable_vars(&vimvardict.dv_hashtab, "v:", 
# 1654 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                      0
# 1654 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , first);
}


static void list_script_vars(int *first)
{
  if (current_sctx.sc_sid > 0 && current_sctx.sc_sid <= ga_scripts.ga_len) {
    list_hashtable_vars(&((((scriptvar_T **)ga_scripts.ga_data)[(current_sctx.sc_sid) - 1])->sv_dict.dv_hashtab), "s:", 
# 1661 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                0
# 1661 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     , first);
  }
}




static const char *list_arg_vars(exarg_T *eap, const char *arg, int *first)
{
  int error = 0;
  int len;
  const char *name;
  const char *name_start;
  typval_T tv;

  while (!ends_excmd(*arg) && !got_int) {
    if (error || eap->skip) {
      arg = (const char *)find_name_end((char_u *)arg, 
# 1678 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      ((void *)0)
# 1678 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          , 
# 1678 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                            ((void *)0)
# 1678 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                ,
                                        1 | 2);
      if (!ascii_iswhite(*arg) && !ends_excmd(*arg)) {
        emsg_severe = 1;
        emsg((char_u *)(gettext((char *)(e_trailing))));
        break;
      }
    } else {

      name_start = name = arg;
      char *tofree;
      len = get_name_len(&arg, &tofree, 
# 1689 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       1
# 1689 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , 
# 1689 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             1
# 1689 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 );
      if (len <= 0) {


        if (len < 0 && !aborting()) {
          emsg_severe = 1;
          emsgf((const char *) (gettext((char *)(e_invarg2))), (arg));
          break;
        }
        error = 1;
      } else {
        if (tofree != 
# 1700 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 1700 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
          name = tofree;
        }
        if (get_var_tv((const char *)name, len, &tv, 
# 1703 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    ((void *)0)
# 1703 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        , 
# 1703 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          1
# 1703 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                              , 
# 1703 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                0
# 1703 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     )
            == 0) {
          error = 
# 1705 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 1
# 1705 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
        } else {

          const char *const arg_subsc = arg;
          if (handle_subscript(&arg, &tv, 
# 1709 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         1
# 1709 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             , 
# 1709 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               1
# 1709 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                   ) == 0) {
            error = 
# 1710 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   1
# 1710 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
          } else {
            if (arg == arg_subsc && len == 2 && name[1] == ':') {
              switch (*name) {
              case 'g': list_glob_vars(first); break;
              case 'b': list_buf_vars(first); break;
              case 'w': list_win_vars(first); break;
              case 't': list_tab_vars(first); break;
              case 'v': list_vim_vars(first); break;
              case 's': list_script_vars(first); break;
              case 'l': list_func_vars(first); break;
              default:
                emsgf((const char *) (gettext((char *)("E738: Can't list variables for %s"))), (name));
              }
            } else {
              char *const s = encode_tv2echo(&tv, 
# 1725 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                 ((void *)0)
# 1725 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     );
              const char *const used_name = (arg == arg_subsc
                                             ? name
                                             : name_start);
              const ptrdiff_t name_size = (used_name == tofree
                                           ? (ptrdiff_t)strlen(used_name)
                                           : (arg - used_name));
              list_one_var_a("", used_name, name_size,
                             tv.v_type, s == 
# 1733 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            ((void *)0) 
# 1733 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 ? "" : s, first);
              xfree(s);
            }
            tv_clear(&tv);
          }
        }
      }

      xfree(tofree);
    }

    arg = (const char *)skipwhite((const char_u *)arg);
  }

  return arg;
}
# 1763 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static char_u *ex_let_one(char_u *arg, typval_T *const tv,
                          const 
# 1764 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               _Bool 
# 1764 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    copy, const 
# 1764 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                _Bool 
# 1764 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     is_const,
                          const char_u *const endchars, const char_u *const op)
  FUNC_ATTR_NONNULL_ARG(1, 2) FUNC_ATTR_WARN_UNUSED_RESULT
{
  char_u *arg_end = 
# 1768 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 1768 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
  int len;
  int opt_flags;
  char_u *tofree = 
# 1771 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 1771 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;




  if (*arg == '$') {
    if (is_const) {
      emsg((char_u *)(gettext((char *)("E996: Cannot lock an environment variable"))));
      return 
# 1779 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 1779 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }

    arg++;
    char *name = (char *)arg;
    len = get_env_len((const char_u **)&arg);
    if (len == 0) {
      emsgf((const char *) (gettext((char *)(e_invarg2))), (name - 1));
    } else {
      if (op != 
# 1788 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 1788 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    && vim_strchr((char_u *)"+-*/%", *op) != 
# 1788 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                             ((void *)0)
# 1788 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                 ) {
        emsgf((const char *) (gettext((char *)(e_letwrong))), (op));
      } else if (endchars != 
# 1790 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
                 
# 1791 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && vim_strchr(endchars, *skipwhite(arg)) == 
# 1791 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                            ((void *)0)
# 1791 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                ) {
        emsg((char_u *)(gettext((char *)(e_letunexp))));
      } else if (!check_secure()) {
        const char c1 = name[len];
        name[len] = '\000';
        const char *p = tv_get_string_chk(tv);
        if (p != 
# 1797 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0) 
# 1797 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     && op != 
# 1797 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              ((void *)0) 
# 1797 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   && *op == '.') {
          char *s = vim_getenv(name);

          if (s != 
# 1800 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 1800 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
            tofree = concat_str((const char_u *)s, (const char_u *)p);
            p = (const char *)tofree;
            xfree(s);
          }
        }
        if (p != 
# 1806 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 1806 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
          os_setenv(name, p, 1);
          if (strcasecmp((char *)(name), (char *)("HOME")) == 0) {
            init_homedir();
          } else if (didset_vim && strcasecmp((char *)(name), (char *)("VIM")) == 0) {
            didset_vim = 
# 1811 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        0
# 1811 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ;
          } else if (didset_vimruntime
                     && strcasecmp((char *)(name), (char *)("VIMRUNTIME")) == 0) {
            didset_vimruntime = 
# 1814 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               0
# 1814 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    ;
          }
          arg_end = arg;
        }
        name[len] = c1;
        xfree(tofree);
      }
    }



  } else if (*arg == '&') {
    if (is_const) {
      emsg((char_u *)(gettext((char *)("E996: Cannot lock an option"))));
      return 
# 1828 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 1828 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }

    char *const p = (char *)find_option_end((const char **)&arg, &opt_flags);
    if (p == 
# 1832 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
        
# 1833 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       || (endchars != 
# 1833 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
            
# 1834 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
           && vim_strchr(endchars, *skipwhite((const char_u *)p)) == 
# 1834 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                     ((void *)0)
# 1834 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                         )) {
      emsg((char_u *)(gettext((char *)(e_letunexp))));
    } else {
      int opt_type;
      long numval;
      char *stringval = 
# 1839 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 1839 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;

      const char c1 = *p;
      *p = '\000';

      varnumber_T n = tv_get_number(tv);
      const char *s = tv_get_string_chk(tv);
      if (s != 
# 1846 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0) 
# 1846 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   && op != 
# 1846 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0) 
# 1846 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 && *op != '=') {
        opt_type = get_option_value(arg, &numval, (char_u **)&stringval,
                                    opt_flags);
        if ((opt_type == 1 && *op == '.')
            || (opt_type == 0 && *op != '.')) {
          emsgf((const char *) (gettext((char *)(e_letwrong))), (op));
          s = 
# 1852 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 1852 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
        } else {
          if (opt_type == 1) {
            switch (*op) {
              case '+': n = numval + n; break;
              case '-': n = numval - n; break;
              case '*': n = numval * n; break;
              case '/': n = num_divide(numval, n); break;
              case '%': n = num_modulus(numval, n); break;
            }
          } else if (opt_type == 0 && stringval != 
# 1862 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                  ((void *)0)
# 1862 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                      ) {
            char *const oldstringval = stringval;
            stringval = (char *)concat_str((const char_u *)stringval,
                                           (const char_u *)s);
            xfree(oldstringval);
            s = stringval;
          }
        }
      }
      if (s != 
# 1871 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 1871 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ) {
        set_option_value((const char *)arg, n, s, opt_flags);
        arg_end = (char_u *)p;
      }
      *p = c1;
      xfree(stringval);
    }

  } else if (*arg == '@') {
    if (is_const) {
      emsg((char_u *)(gettext((char *)("E996: Cannot lock a register"))));
      return 
# 1882 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 1882 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
    arg++;
    if (op != 
# 1885 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0) 
# 1885 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  && vim_strchr((char_u *)"+-*/%", *op) != 
# 1885 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           ((void *)0)
# 1885 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               ) {
      emsgf(gettext((char *)(e_letwrong)), op);
    } else if (endchars != 
# 1887 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
               
# 1888 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              && vim_strchr(endchars, *skipwhite(arg + 1)) == 
# 1888 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 1888 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  ) {
      emsg((char_u *)(gettext((char *)(e_letunexp))));
    } else {
      char_u *s;

      char_u *ptofree = 
# 1893 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 1893 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
      const char *p = tv_get_string_chk(tv);
      if (p != 
# 1895 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0) 
# 1895 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   && op != 
# 1895 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0) 
# 1895 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 && *op == '.') {
        s = get_reg_contents(*arg == '@' ? '"' : *arg, kGRegExprSrc);
        if (s != 
# 1897 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 1897 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
          ptofree = concat_str(s, (const char_u *)p);
          p = (const char *)ptofree;
          xfree(s);
        }
      }
      if (p != 
# 1903 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 1903 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ) {
        write_reg_contents(*arg == '@' ? '"' : *arg,
                           (const char_u *)p, strlen((char *)(p)), 
# 1905 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                        0
# 1905 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             );
        arg_end = arg + 1;
      }
      xfree(ptofree);
    }
  }




  else if (eval_isnamec1(*arg) || *arg == '{') {
    lval_T lv;

    char_u *const p = get_lval(arg, tv, &lv, 
# 1918 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            0
# 1918 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 , 
# 1918 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   0
# 1918 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        , 0, 2);
    if (p != 
# 1919 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0) 
# 1919 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 && lv.ll_name != 
# 1919 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 1919 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      ) {
      if (endchars != 
# 1920 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0) 
# 1920 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          && vim_strchr(endchars, *skipwhite(p)) == 
# 1920 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                    ((void *)0)
# 1920 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                        ) {
        emsg((char_u *)(gettext((char *)(e_letunexp))));
      } else {
        set_var_lval(&lv, p, tv, copy, is_const, op);
        arg_end = p;
      }
    }
    clear_lval(&lv);
  } else
    emsgf((const char *) (gettext((char *)(e_invarg2))), (arg));

  return arg_end;
}
# 1959 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
char_u *get_lval(char_u *const name, typval_T *const rettv,
                 lval_T *const lp, const 
# 1960 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        _Bool 
# 1960 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             unlet, const 
# 1960 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          _Bool 
# 1960 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               skip,
                 const int flags, const int fne_flags)
  FUNC_ATTR_NONNULL_ARG(1, 3)
{
  dictitem_T *v;
  typval_T var1;
  typval_T var2;
  int empty1 = 0;
  listitem_T *ni;
  hashtab_T *ht;
  int quiet = flags & GLV_QUIET;


  memset(lp, 0, sizeof(lval_T));

  if (skip) {

    lp->ll_name = (const char *)name;
    return (char_u *)find_name_end((const char_u *)name, 
# 1978 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                        ((void *)0)
# 1978 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                            , 
# 1978 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 1978 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  ,
                                   1 | fne_flags);
  }


  char_u *expr_start;
  char_u *expr_end;
  char_u *p = (char_u *)find_name_end(name,
                                      (const char_u **)&expr_start,
                                      (const char_u **)&expr_end,
                                      fne_flags);
  if (expr_start != 
# 1989 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 1989 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {

    if (unlet && !ascii_iswhite(*p) && !ends_excmd(*p)
        && *p != '[' && *p != '.') {
      emsg((char_u *)(gettext((char *)(e_trailing))));
      return 
# 1994 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 1994 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }

    lp->ll_exp_name = (char *)make_expanded_name(name, expr_start, expr_end,
                                                 (char_u *)p);
    lp->ll_name = lp->ll_exp_name;
    if (lp->ll_exp_name == 
# 2000 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
# 2000 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ) {



      if (!aborting() && !quiet) {
        emsg_severe = 1;
        emsgf((const char *) (gettext((char *)(e_invarg2))), (name));
        return 
# 2007 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 2007 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }
      lp->ll_name_len = 0;
    } else {
      lp->ll_name_len = strlen(lp->ll_name);
    }
  } else {
    lp->ll_name = (const char *)name;
    lp->ll_name_len = (size_t)((const char *)p - lp->ll_name);
  }


  if ((*p != '[' && *p != '.') || lp->ll_name == 
# 2019 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                ((void *)0)
# 2019 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    ) {
    return p;
  }



  v = find_var(lp->ll_name, lp->ll_name_len,
               (flags & GLV_READ_ONLY) ? 
# 2026 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        ((void *)0) 
# 2026 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             : &ht,
               flags & GLV_NO_AUTOLOAD);
  if (v == 
# 2028 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0) 
# 2028 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               && !quiet) {
    emsgf(gettext((char *)("E121: Undefined variable: %.*s")),
          (int)lp->ll_name_len, lp->ll_name);
  }
  if (v == 
# 2032 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 2032 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ) {
    return 
# 2033 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 2033 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }




  lp->ll_tv = &v->di_tv;
  var1.v_type = VAR_UNKNOWN;
  var2.v_type = VAR_UNKNOWN;
  while (*p == '[' || (*p == '.' && lp->ll_tv->v_type == VAR_DICT)) {
    if (!(lp->ll_tv->v_type == VAR_LIST && lp->ll_tv->vval.v_list != 
# 2043 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                    ((void *)0)
# 2043 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                        )
        && !(lp->ll_tv->v_type == VAR_DICT
             && lp->ll_tv->vval.v_dict != 
# 2045 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         ((void *)0)
# 2045 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             )) {
      if (!quiet)
        emsg((char_u *)(gettext((char *)("E689: Can only index a List or Dictionary"))));
      return 
# 2048 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 2048 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
    if (lp->ll_range) {
      if (!quiet)
        emsg((char_u *)(gettext((char *)("E708: [:] must come last"))));
      return 
# 2053 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 2053 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }

    int len = -1;
    char_u *key = 
# 2057 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 2057 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
    if (*p == '.') {
      key = p + 1;
      for (len = 0; ((((unsigned)(key[len]) >= 'A' && (unsigned)(key[len]) <= 'Z') || ((unsigned)(key[len]) >= 'a' && (unsigned)(key[len]) <= 'z')) || ascii_isdigit(key[len])) || key[len] == '_'; len++) {
      }
      if (len == 0) {
        if (!quiet) {
          emsg((char_u *)(gettext((char *)("E713: Cannot use empty key after ."))));
        }
        return 
# 2066 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 2066 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }
      p = key + len;
    } else {

      p = skipwhite(p + 1);
      if (*p == ':') {
        empty1 = 
# 2073 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 2073 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
      } else {
        empty1 = 
# 2075 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 2075 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
        if (eval1(&p, &var1, 
# 2076 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            1
# 2076 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ) == 0) {
          return 
# 2077 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 2077 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
        if (!tv_check_str(&var1)) {

          tv_clear(&var1);
          return 
# 2082 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 2082 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
      }


      if (*p == ':') {
        if (lp->ll_tv->v_type == VAR_DICT) {
          if (!quiet) {
            emsg((char_u *)(gettext((char *)(e_dictrange))));
          }
          tv_clear(&var1);
          return 
# 2093 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 2093 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
        if (rettv != 
# 2095 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0) 
# 2095 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         && (rettv->v_type != VAR_LIST
                              || rettv->vval.v_list == 
# 2096 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      ((void *)0)
# 2096 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          )) {
          if (!quiet) {
            emsg((char_u *)(gettext((char *)("E709: [:] requires a List value"))));
          }
          tv_clear(&var1);
          return 
# 2101 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 2101 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
        p = skipwhite(p + 1);
        if (*p == ']') {
          lp->ll_empty2 = 
# 2105 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         1
# 2105 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ;
        } else {
          lp->ll_empty2 = 
# 2107 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         0
# 2107 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ;
          if (eval1(&p, &var2, 
# 2108 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              1
# 2108 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  ) == 0) {
            tv_clear(&var1);
            return 
# 2110 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 2110 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
          }
          if (!tv_check_str(&var2)) {

            tv_clear(&var1);
            tv_clear(&var2);
            return 
# 2116 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 2116 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
          }
        }
        lp->ll_range = 1;
      } else
        lp->ll_range = 0;

      if (*p != ']') {
        if (!quiet) {
          emsg((char_u *)(gettext((char *)(e_missbrac))));
        }
        tv_clear(&var1);
        tv_clear(&var2);
        return 
# 2129 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 2129 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }


      p++;
    }

    if (lp->ll_tv->v_type == VAR_DICT) {
      if (len == -1) {

        key = (char_u *)tv_get_string(&var1);
      }
      lp->ll_list = 
# 2141 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 2141 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
      lp->ll_dict = lp->ll_tv->vval.v_dict;
      lp->ll_di = tv_dict_find(lp->ll_dict, (const char *)key, len);




      if (rettv != 
# 2148 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0) 
# 2148 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       && lp->ll_dict->dv_scope != 0) {
        int prevval;
        int wrong;

        if (len != -1) {
          prevval = key[len];
          key[len] = '\000';
        } else {
          prevval = 0;
        }
        wrong = ((lp->ll_dict->dv_scope == VAR_DEF_SCOPE
                  && tv_is_func(*rettv)
                  && !var_check_func_name((const char *)key, lp->ll_di == 
# 2160 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                         ((void *)0)
# 2160 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                             ))
                 || !valid_varname((const char *)key));
        if (len != -1) {
          key[len] = prevval;
        }
        if (wrong) {
          return 
# 2166 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 2166 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
      }

      if (lp->ll_di != 
# 2170 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0) 
# 2170 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           && tv_is_luafunc(&lp->ll_di->di_tv)
          && len == -1 && rettv == 
# 2171 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 2171 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      ) {
        tv_clear(&var1);
        emsgf((const char *) (e_illvar), ("v:['lua']"));
        return 
# 2174 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 2174 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }

      if (lp->ll_di == 
# 2177 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 2177 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {

        if (lp->ll_dict == &vimvardict
            || &lp->ll_dict->dv_hashtab == get_funccal_args_ht()) {
          emsgf((const char *) (gettext((char *)(e_illvar))), (name));
          tv_clear(&var1);
          return 
# 2183 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 2183 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }


        if (*p == '[' || *p == '.' || unlet) {
          if (!quiet) {
            emsgf(gettext((char *)(e_dictkey)), key);
          }
          tv_clear(&var1);
          return 
# 2192 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 2192 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
        if (len == -1) {
          lp->ll_newkey = vim_strsave(key);
        } else {
          lp->ll_newkey = vim_strnsave(key, len);
        }
        tv_clear(&var1);
        break;

      } else if (!(flags & GLV_READ_ONLY) && var_check_ro(lp->ll_di->di_flags,
                                                          (const char *)name,
                                                          (size_t)(p - name))) {
        tv_clear(&var1);
        return 
# 2206 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 2206 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }

      tv_clear(&var1);
      lp->ll_tv = &lp->ll_di->di_tv;
    } else {

      if (empty1) {
        lp->ll_n1 = 0;
      } else {

        lp->ll_n1 = (long)tv_get_number(&var1);
      }
      tv_clear(&var1);

      lp->ll_dict = 
# 2221 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 2221 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
      lp->ll_list = lp->ll_tv->vval.v_list;
      lp->ll_li = tv_list_find(lp->ll_list, lp->ll_n1);
      if (lp->ll_li == 
# 2224 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 2224 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
        if (lp->ll_n1 < 0) {
          lp->ll_n1 = 0;
          lp->ll_li = tv_list_find(lp->ll_list, lp->ll_n1);
        }
      }
      if (lp->ll_li == 
# 2230 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 2230 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
        tv_clear(&var2);
        if (!quiet) {
          emsgf((const char *) (gettext((char *)(e_listidx))), (int64_t)(lp->ll_n1));
        }
        return 
# 2235 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 2235 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }







      if (lp->ll_range && !lp->ll_empty2) {
        lp->ll_n2 = (long)tv_get_number(&var2);
        tv_clear(&var2);
        if (lp->ll_n2 < 0) {
          ni = tv_list_find(lp->ll_list, lp->ll_n2);
          if (ni == 
# 2249 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 2249 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {
            if (!quiet)
              emsgf((const char *) (gettext((char *)(e_listidx))), (int64_t)(lp->ll_n2));
            return 
# 2252 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 2252 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
          }
          lp->ll_n2 = tv_list_idx_of_item(lp->ll_list, ni);
        }


        if (lp->ll_n1 < 0) {
          lp->ll_n1 = tv_list_idx_of_item(lp->ll_list, lp->ll_li);
        }
        if (lp->ll_n2 < lp->ll_n1) {
          if (!quiet) {
            emsgf((const char *) (gettext((char *)(e_listidx))), (int64_t)(lp->ll_n2));
          }
          return 
# 2265 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 2265 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
      }

      lp->ll_tv = (&(lp->ll_li)->li_tv);
    }
  }

  tv_clear(&var1);
  return p;
}






void clear_lval(lval_T *lp)
{
  xfree(lp->ll_exp_name);
  xfree(lp->ll_newkey);
}
# 2296 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static void set_var_lval(lval_T *lp, char_u *endp, typval_T *rettv,
                         int copy, const 
# 2297 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        _Bool 
# 2297 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             is_const, const char_u *op)
{
  int cc;
  listitem_T *ri;
  dictitem_T *di;

  if (lp->ll_tv == 
# 2303 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 2303 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
    cc = *endp;
    *endp = '\000';
    if (op != 
# 2306 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0) 
# 2306 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  && *op != '=') {
      typval_T tv;

      if (is_const) {
        emsg((char_u *)(gettext((char *)(e_cannot_mod))));
        *endp = cc;
        return;
      }


      di = 
# 2316 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 2316 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
      if (get_var_tv((const char *)lp->ll_name, (int)strlen((char *)(lp->ll_name)),
                     &tv, &di, 
# 2318 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              1
# 2318 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  , 
# 2318 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                    0
# 2318 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                         ) == 1) {
        if ((di == 
# 2319 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
             
# 2320 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            || (!var_check_ro(di->di_flags, (const char *)lp->ll_name,
                               (
# 2321 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              (18446744073709551615UL) 
# 2321 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              - 1))
                 && !tv_check_lock(di->di_tv.v_lock, (const char *)lp->ll_name,
                                   (
# 2323 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  (18446744073709551615UL) 
# 2323 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  - 1))))
            && eexe_mod_op(&tv, rettv, (const char *)op) == 1) {
          set_var(lp->ll_name, lp->ll_name_len, &tv, 
# 2325 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    0
# 2325 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         );
        }
        tv_clear(&tv);
      }
    } else {
      set_var_const(lp->ll_name, lp->ll_name_len, rettv, copy, is_const);
    }
    *endp = cc;
  } else if (tv_check_lock(lp->ll_newkey == 
# 2333 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           ((void *)0)
                           
# 2334 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ? lp->ll_tv->v_lock
                           : lp->ll_tv->vval.v_dict->dv_lock,
                           (const char *)lp->ll_name, (
# 2336 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                     (18446744073709551615UL) 
# 2336 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     - 1))) {
  } else if (lp->ll_range) {
    listitem_T *ll_li = lp->ll_li;
    int ll_n1 = lp->ll_n1;

    if (is_const) {
      emsg((char_u *)(gettext((char *)("E996: Cannot lock a range"))));
      return;
    }


    for (ri = tv_list_first(rettv->vval.v_list);
         ri != 
# 2348 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0) 
# 2348 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   && ll_li != 
# 2348 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 2348 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   ; ) {
      if (tv_check_lock((&(ll_li)->li_tv)->v_lock,
                        (const char *)lp->ll_name,
                        (
# 2351 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       (18446744073709551615UL) 
# 2351 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       - 1))) {
        return;
      }
      ri = ((ri)->li_next);
      if (ri == 
# 2355 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 2355 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    || (!lp->ll_empty2 && lp->ll_n2 == ll_n1)) {
        break;
      }
      ll_li = ((ll_li)->li_next);
      ll_n1++;
    }




    for (ri = tv_list_first(rettv->vval.v_list); ri != 
# 2365 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      ((void *)0)
# 2365 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          ; ) {
      if (op != 
# 2366 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 2366 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    && *op != '=') {
        eexe_mod_op((&(lp->ll_li)->li_tv), (&(ri)->li_tv),
                    (const char *)op);
      } else {
        tv_clear((&(lp->ll_li)->li_tv));
        tv_copy((&(ri)->li_tv), (&(lp->ll_li)->li_tv));
      }
      ri = ((ri)->li_next);
      if (ri == 
# 2374 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 2374 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    || (!lp->ll_empty2 && lp->ll_n2 == lp->ll_n1)) {
        break;
      }
      
# 2377 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void) sizeof ((
# 2377 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     lp->ll_li != 
# 2377 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 2377 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     lp->ll_li != 
# 2377 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void *)0)) ; else __assert_fail (
# 2377 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     "lp->ll_li != NULL"
# 2377 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 2377, __extension__ __PRETTY_FUNCTION__); }))
# 2377 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ;
      if (((lp->ll_li)->li_next) == 
# 2378 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      ((void *)0)
# 2378 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          ) {

        tv_list_append_number(lp->ll_list, 0);

        lp->ll_li = tv_list_last(lp->ll_list);
      } else {
        lp->ll_li = ((lp->ll_li)->li_next);
      }
      lp->ll_n1++;
    }
    if (ri != 
# 2388 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 2388 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
      emsg((char_u *)(gettext((char *)("E710: List value has more items than target"))));
    } else if (lp->ll_empty2
               ? (lp->ll_li != 
# 2391 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              ((void *)0)
                  
# 2392 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 && ((lp->ll_li)->li_next) != 
# 2392 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 ((void *)0)
# 2392 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     )
               : lp->ll_n1 != lp->ll_n2) {
      emsg((char_u *)(gettext((char *)("E711: List value has not enough items"))));
    }
  } else {
    typval_T oldtv = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
    dict_T *dict = lp->ll_dict;
    
# 2399 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 2399 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        watched = tv_dict_is_watched(dict);

    if (is_const) {
      emsg((char_u *)(gettext((char *)("E996: Cannot lock a list or dict"))));
      return;
    }


    if (lp->ll_newkey != 
# 2407 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 2407 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ) {
      if (op != 
# 2408 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 2408 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    && *op != '=') {
        emsgf((const char *) (gettext((char *)(e_letwrong))), (op));
        return;
      }


      di = tv_dict_item_alloc((const char *)lp->ll_newkey);
      if (tv_dict_add(lp->ll_tv->vval.v_dict, di) == 0) {
        xfree(di);
        return;
      }
      lp->ll_tv = &di->di_tv;
    } else {
      if (watched) {
        tv_copy(lp->ll_tv, &oldtv);
      }

      if (op != 
# 2425 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 2425 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    && *op != '=') {
        eexe_mod_op(lp->ll_tv, rettv, (const char *)op);
        goto notify;
      } else {
        tv_clear(lp->ll_tv);
      }
    }


    if (copy) {
      tv_copy(rettv, lp->ll_tv);
    } else {
      *lp->ll_tv = *rettv;
      lp->ll_tv->v_lock = 0;
      tv_init(rettv);
    }

notify:
    if (watched) {
      if (oldtv.v_type == VAR_UNKNOWN) {
        
# 2445 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void) sizeof ((
# 2445 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       lp->ll_newkey != 
# 2445 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 2445 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       lp->ll_newkey != 
# 2445 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0)) ; else __assert_fail (
# 2445 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       "lp->ll_newkey != NULL"
# 2445 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 2445, __extension__ __PRETTY_FUNCTION__); }))
# 2445 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    ;
        tv_dict_watcher_notify(dict, (char *)lp->ll_newkey, lp->ll_tv, 
# 2446 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                      ((void *)0)
# 2446 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                          );
      } else {
        dictitem_T *di_ = lp->ll_di;
        
# 2449 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void) sizeof ((
# 2449 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       di_->di_key != 
# 2449 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 2449 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       di_->di_key != 
# 2449 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0)) ; else __assert_fail (
# 2449 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       "di_->di_key != NULL"
# 2449 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 2449, __extension__ __PRETTY_FUNCTION__); }))
# 2449 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  ;
        tv_dict_watcher_notify(dict, (char *)di_->di_key, lp->ll_tv, &oldtv);
        tv_clear(&oldtv);
      }
    }
  }
}
# 2465 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
void *eval_for_line(const char_u *arg, 
# 2465 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                      _Bool 
# 2465 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           *errp, char_u **nextcmdp, int skip)
{
  forinfo_T *fi = xcalloc(1, sizeof(forinfo_T));
  const char_u *expr;
  typval_T tv;
  list_T *l;

  *errp = 
# 2472 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         1
# 2472 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;

  expr = skip_var_list(arg, &fi->fi_varcount, &fi->fi_semicolon);
  if (expr == 
# 2475 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 2475 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 )
    return fi;

  expr = skipwhite(expr);
  if (expr[0] != 'i' || expr[1] != 'n' || !ascii_iswhite(expr[2])) {
    emsg((char_u *)(gettext((char *)("E690: Missing \"in\" after :for"))));
    return fi;
  }

  if (skip)
    ++emsg_skip;
  if (eval0(skipwhite(expr + 2), &tv, nextcmdp, !skip) == 1) {
    *errp = 
# 2487 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           0
# 2487 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    if (!skip) {
      l = tv.vval.v_list;
      if (tv.v_type != VAR_LIST) {
        emsg((char_u *)(gettext((char *)(e_listreq))));
        tv_clear(&tv);
      } else if (l == 
# 2493 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 2493 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {

        tv_clear(&tv);
      } else {


        fi->fi_list = l;
        tv_list_watch_add(l, &fi->fi_lw);
        fi->fi_lw.lw_item = tv_list_first(l);
      }
    }
  }
  if (skip)
    --emsg_skip;

  return fi;
}
# 2519 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 2519 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 2519 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    next_for_item(void *fi_void, char_u *arg)
{
  forinfo_T *fi = (forinfo_T *)fi_void;

  listitem_T *item = fi->fi_lw.lw_item;
  if (item == 
# 2524 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 2524 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
    return 
# 2525 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 2525 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  } else {
    fi->fi_lw.lw_item = ((item)->li_next);
    return (ex_let_vars(arg, (&(item)->li_tv), 
# 2528 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   1
# 2528 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                       ,
                        fi->fi_semicolon, fi->fi_varcount, 
# 2529 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          0
# 2529 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               , 
# 2529 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 ((void *)0)
# 2529 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     ) == 1);
  }
}






void free_for_info(void *fi_void)
{
  forinfo_T *fi = (forinfo_T *)fi_void;

  if (fi != 
# 2542 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 2542 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && fi->fi_list != 
# 2542 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 2542 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      ) {
    tv_list_watch_remove(fi->fi_list, &fi->fi_lw);
    tv_list_unref(fi->fi_list);
  }
  xfree(fi);
}


void set_context_for_expression(expand_T *xp, char_u *arg, cmdidx_T cmdidx)
{
  int got_eq = 0;
  int c;
  char_u *p;

  if (cmdidx == CMD_let || cmdidx == CMD_const) {
    xp->xp_context = EXPAND_USER_VARS;
    if ((char_u *)strpbrk((char *)(arg), (char *)((char_u *)"\"'+-*/%.=!?~|&$([<>,#")) == 
# 2558 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                               ((void *)0)
# 2558 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                   ) {

      for (p = arg + strlen((char *)(arg)); p >= arg; ) {
        xp->xp_pattern = p;
        (p -= utf_head_off((char_u *)arg, (char_u *)p - 1) + 1);
        if (ascii_iswhite(*p)) {
          break;
        }
      }
      return;
    }
  } else
    xp->xp_context = cmdidx == CMD_call ? EXPAND_FUNCTIONS
                     : EXPAND_EXPRESSION;
  while ((xp->xp_pattern = (char_u *)strpbrk((char *)(arg), (char *)((char_u *)"\"'+-*/%.=!?~|&$([<>,#"))
                                                 ) != 
# 2573 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                     ((void *)0)
# 2573 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         ) {
    c = *xp->xp_pattern;
    if (c == '&') {
      c = xp->xp_pattern[1];
      if (c == '&') {
        ++xp->xp_pattern;
        xp->xp_context = cmdidx != CMD_let || got_eq
                         ? EXPAND_EXPRESSION : EXPAND_NOTHING;
      } else if (c != ' ') {
        xp->xp_context = EXPAND_SETTINGS;
        if ((c == 'l' || c == 'g') && xp->xp_pattern[2] == ':')
          xp->xp_pattern += 2;

      }
    } else if (c == '$') {

      xp->xp_context = EXPAND_ENV_VARS;
    } else if (c == '=') {
      got_eq = 1;
      xp->xp_context = EXPAND_EXPRESSION;
    } else if (c == '#'
               && xp->xp_context == EXPAND_EXPRESSION) {

      break;
    } else if ((c == '<' || c == '#')
               && xp->xp_context == EXPAND_FUNCTIONS
               && vim_strchr(xp->xp_pattern, '(') == 
# 2599 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    ((void *)0)
# 2599 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        ) {

      break;
    } else if (cmdidx != CMD_let || got_eq) {
      if (c == '"') {
        while ((c = *++xp->xp_pattern) != '\000' && c != '"') {
          if (c == '\\' && xp->xp_pattern[1] != '\000') {
            xp->xp_pattern++;
          }
        }
        xp->xp_context = EXPAND_NOTHING;
      } else if (c == '\'') {

        while ((c = *++xp->xp_pattern) != '\000' && c != '\'') {
        }
        xp->xp_context = EXPAND_NOTHING;
      } else if (c == '|') {
        if (xp->xp_pattern[1] == '|') {
          ++xp->xp_pattern;
          xp->xp_context = EXPAND_EXPRESSION;
        } else
          xp->xp_context = EXPAND_COMMANDS;
      } else
        xp->xp_context = EXPAND_EXPRESSION;
    } else


      xp->xp_context = EXPAND_EXPRESSION;
    arg = xp->xp_pattern;
    if (*arg != '\000') {
      while ((c = *++arg) != '\000' && (c == ' ' || c == '\t')) {
      }
    }
  }
  xp->xp_pattern = arg;
}




void ex_unlet(exarg_T *eap)
{
  ex_unletlock(eap, eap->arg, 0);
}






void ex_lockvar(exarg_T *eap)
{
  char_u *arg = eap->arg;
  int deep = 2;

  if (eap->forceit) {
    deep = -1;
  } else if (ascii_isdigit(*arg)) {
    deep = getdigits_int(&arg, 
# 2657 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              0
# 2657 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   , -1);
    arg = skipwhite(arg);
  }

  ex_unletlock(eap, arg, deep);
}






static void ex_unletlock(exarg_T *eap, char_u *argstart, int deep)
{
  char_u *arg = argstart;
  
# 2672 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 2672 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      error = 
# 2672 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 2672 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
  lval_T lv;

  do {
    if (*arg == '$') {
      const char *name = (char *)++arg;

      if (get_env_len((const char_u **)&arg) == 0) {
        emsgf((const char *) (gettext((char *)(e_invarg2))), (name - 1));
        return;
      }
      os_unsetenv(name);
      arg = skipwhite(arg);
      continue;
    }


    char_u *const name_end = (char_u *)get_lval(arg, 
# 2689 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    ((void *)0)
# 2689 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        , &lv, 
# 2689 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                               1
# 2689 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                   ,
                                                eap->skip || error,
                                                0, 2);
    if (lv.ll_name == 
# 2692 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 2692 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
      error = 
# 2693 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             1
# 2693 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
    }
    if (name_end == 
# 2695 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0) 
# 2695 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        || (!ascii_iswhite(*name_end)
                             && !ends_excmd(*name_end))) {
      if (name_end != 
# 2697 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 2697 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
        emsg_severe = 1;
        emsg((char_u *)(gettext((char *)(e_trailing))));
      }
      if (!(eap->skip || error))
        clear_lval(&lv);
      break;
    }

    if (!error && !eap->skip) {
      if (eap->cmdidx == CMD_unlet) {
        if (do_unlet_var(&lv, name_end, eap->forceit) == 0)
          error = 1;
      } else {
        if (do_lock_var(&lv, name_end, deep,
                        eap->cmdidx == CMD_lockvar) == 0) {
          error = 
# 2713 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 1
# 2713 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
        }
      }
    }

    if (!eap->skip)
      clear_lval(&lv);

    arg = skipwhite(name_end);
  } while (!ends_excmd(*arg));

  eap->nextcmd = check_nextcmd(arg);
}



static int do_unlet_var(lval_T *const lp, char_u *const name_end, int forceit)
{
  int ret = 1;
  int cc;

  if (lp->ll_tv == 
# 2734 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 2734 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
    cc = *name_end;
    *name_end = '\000';


    if (do_unlet(lp->ll_name, lp->ll_name_len, forceit) == 0) {
      ret = 0;
    }
    *name_end = cc;
  } else if ((lp->ll_list != 
# 2743 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)


              
# 2746 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             && tv_check_lock(tv_list_locked(lp->ll_list),
                               (const char *)lp->ll_name,
                               lp->ll_name_len))
             || (lp->ll_dict != 
# 2749 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
                 
# 2750 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && tv_check_lock(lp->ll_dict->dv_lock,
                                  (const char *)lp->ll_name,
                                  lp->ll_name_len))) {
    return 0;
  } else if (lp->ll_range) {
    
# 2755 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void) sizeof ((
# 2755 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   lp->ll_list != 
# 2755 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 2755 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   lp->ll_list != 
# 2755 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)) ; else __assert_fail (
# 2755 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   "lp->ll_list != NULL"
# 2755 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 2755, __extension__ __PRETTY_FUNCTION__); }))
# 2755 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ;

    listitem_T *const first_li = lp->ll_li;
    listitem_T *last_li = first_li;
    for (;;) {
      listitem_T *const li = ((lp->ll_li)->li_next);
      if (tv_check_lock((&(lp->ll_li)->li_tv)->v_lock,
                        (const char *)lp->ll_name,
                        lp->ll_name_len)) {
        return 
# 2764 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 2764 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
      }
      lp->ll_li = li;
      lp->ll_n1++;
      if (lp->ll_li == 
# 2768 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0) 
# 2768 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           || (!lp->ll_empty2 && lp->ll_n2 < lp->ll_n1)) {
        break;
      } else {
        last_li = lp->ll_li;
      }
    }
    tv_list_remove_items(lp->ll_list, first_li, last_li);
  } else {
    if (lp->ll_list != 
# 2776 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 2776 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {

      tv_list_item_remove(lp->ll_list, lp->ll_li);
    } else {

      dict_T *d = lp->ll_dict;
      
# 2782 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void) sizeof ((
# 2782 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     d != 
# 2782 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 2782 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     d != 
# 2782 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void *)0)) ; else __assert_fail (
# 2782 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     "d != NULL"
# 2782 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 2782, __extension__ __PRETTY_FUNCTION__); }))
# 2782 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
      dictitem_T *di = lp->ll_di;
      
# 2784 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     _Bool 
# 2784 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          watched = tv_dict_is_watched(d);
      char *key = 
# 2785 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 2785 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
      typval_T oldtv;

      if (watched) {
        tv_copy(&di->di_tv, &oldtv);

        key = xstrdup((char *)di->di_key);
      }

      tv_dict_item_remove(d, di);

      if (watched) {
        tv_dict_watcher_notify(d, key, 
# 2797 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                      ((void *)0)
# 2797 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                          , &oldtv);
        tv_clear(&oldtv);
        xfree(key);
      }
    }
  }

  return ret;
}
# 2816 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int do_unlet(const char *const name, const size_t name_len, const int forceit)
  FUNC_ATTR_NONNULL_ALL
{
  const char *varname;
  dict_T *dict;
  hashtab_T *ht = find_var_ht_dict(name, name_len, &varname, &dict);

  if (ht != 
# 2823 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 2823 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && *varname != '\000') {
    dict_T *d = get_current_funccal_dict(ht);
    if (d == 
# 2825 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 2825 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
      if (ht == &globvardict.dv_hashtab) {
        d = &globvardict;
      } else if (ht == &compat_hashtab) {
          d = &vimvardict;
      } else {
        dictitem_T *const di = find_var_in_ht(ht, *name, "", 0, 
# 2831 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                               0
# 2831 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                    );
        d = di->di_tv.vval.v_dict;
      }
      if (d == 
# 2834 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 2834 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ) {
        internal_error("do_unlet()");
        return 0;
      }
    }

    hashitem_T *hi = hash_find(ht, (const char_u *)varname);
    if (((hi)->hi_key == 
# 2841 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0) 
# 2841 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       || (hi)->hi_key == (char_u *)&hash_removed)) {
      hi = find_hi_in_scoped_ht((const char *)name, &ht);
    }
    if (hi != 
# 2844 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0) 
# 2844 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  && !((hi)->hi_key == 
# 2844 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0) 
# 2844 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      || (hi)->hi_key == (char_u *)&hash_removed)) {
      dictitem_T *const di = ((dictitem_T *)((hi)->hi_key - 
# 2845 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            __builtin_offsetof (
# 2845 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            dictitem_T
# 2845 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            , 
# 2845 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            di_key
# 2845 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            )
# 2845 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ));
      if (var_check_fixed(di->di_flags, (const char *)name, (
# 2846 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           (18446744073709551615UL) 
# 2846 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           - 1))
          || var_check_ro(di->di_flags, (const char *)name, (
# 2847 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           (18446744073709551615UL) 
# 2847 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           - 1))
          || tv_check_lock(d->dv_lock, (const char *)name, (
# 2848 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          (18446744073709551615UL) 
# 2848 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          - 1))) {
        return 0;
      }

      if (tv_check_lock(d->dv_lock, (const char *)name, (
# 2852 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       (18446744073709551615UL) 
# 2852 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                       - 1))) {
        return 0;
      }

      typval_T oldtv;
      
# 2857 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     _Bool 
# 2857 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          watched = tv_dict_is_watched(dict);

      if (watched) {
        tv_copy(&di->di_tv, &oldtv);
      }

      delete_var(ht, hi);

      if (watched) {
        tv_dict_watcher_notify(dict, varname, 
# 2866 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             ((void *)0)
# 2866 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 , &oldtv);
        tv_clear(&oldtv);
      }
      return 1;
    }
  }
  if (forceit)
    return 1;
  emsgf((const char *) (gettext((char *)("E108: No such variable: \"%s\""))), (name));
  return 0;
}
# 2885 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int do_lock_var(lval_T *lp, char_u *const name_end, const int deep,
                       const 
# 2886 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            _Bool 
# 2886 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 lock)
{
  int ret = 1;

  if (deep == 0) {
    return 1;
  }

  if (lp->ll_tv == 
# 2894 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 2894 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {

    dictitem_T *const di = find_var(
        (const char *)lp->ll_name, lp->ll_name_len, 
# 2897 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   ((void *)0)
# 2897 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                       ,
        
# 2898 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       1
# 2898 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
           );
    if (di == 
# 2899 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 2899 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
      ret = 0;
    } else if ((di->di_flags & DI_FLAGS_FIX)
               && di->di_tv.v_type != VAR_DICT
               && di->di_tv.v_type != VAR_LIST) {


      emsgf(gettext((char *)("E940: Cannot lock or unlock variable %s")), lp->ll_name);
    } else {
      if (lock) {
        di->di_flags |= DI_FLAGS_LOCK;
      } else {
        di->di_flags &= ~DI_FLAGS_LOCK;
      }
      tv_item_lock(&di->di_tv, deep, lock);
    }
  } else if (lp->ll_range) {
    listitem_T *li = lp->ll_li;


    while (li != 
# 2919 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0) 
# 2919 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     && (lp->ll_empty2 || lp->ll_n2 >= lp->ll_n1)) {
      tv_item_lock((&(li)->li_tv), deep, lock);
      li = ((li)->li_next);
      lp->ll_n1++;
    }
  } else if (lp->ll_list != 
# 2924 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 2924 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ) {

    tv_item_lock((&(lp->ll_li)->li_tv), deep, lock);
  } else {

    tv_item_lock(&lp->ll_di->di_tv, deep, lock);
  }

  return ret;
}




void del_menutrans_vars(void)
{
  hash_lock(&globvardict.dv_hashtab);
  do { hashtab_T *const hiht_ = (&globvardict.dv_hashtab); size_t hitodo_ = hiht_->ht_used; for (hashitem_T *hi = hiht_->ht_array; hitodo_; hi++) { if (!((hi)->hi_key == 
# 2941 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0) 
# 2941 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 || (hi)->hi_key == (char_u *)&hash_removed)) { hitodo_--; { { if (strncmp((char *)(hi->hi_key), (char *)("menutrans_"), (size_t)(10)) == 0) { delete_var(&globvardict.dv_hashtab, hi); } } } } } } while (0)



    ;
  hash_unlock(&globvardict.dv_hashtab);
}
# 2956 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static char_u *varnamebuf = 
# 2956 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             ((void *)0)
# 2956 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 ;
static size_t varnamebuflen = 0;




static char_u *cat_prefix_varname(int prefix, char_u *name)
{
  size_t len = strlen((char *)(name)) + 3;

  if (len > varnamebuflen) {
    xfree(varnamebuf);
    len += 10;
    varnamebuf = xmalloc(len);
    varnamebuflen = len;
  }
  *varnamebuf = prefix;
  varnamebuf[1] = ':';
  strcpy((char *)(varnamebuf + 2), (char *)(name));
  return varnamebuf;
}





char_u *get_user_var_name(expand_T *xp, int idx)
{
  static size_t gdone;
  static size_t bdone;
  static size_t wdone;
  static size_t tdone;
  static size_t vidx;
  static hashitem_T *hi;
  hashtab_T *ht;

  if (idx == 0) {
    gdone = bdone = wdone = vidx = 0;
    tdone = 0;
  }


  if (gdone < globvardict.dv_hashtab.ht_used) {
    if (gdone++ == 0)
      hi = globvardict.dv_hashtab.ht_array;
    else
      ++hi;
    while (((hi)->hi_key == 
# 3003 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0) 
# 3003 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    if (strncmp((char *)("g:"), (char *)(xp->xp_pattern), (size_t)(2)) == 0)
      return cat_prefix_varname('g', hi->hi_key);
    return hi->hi_key;
  }


  ht = &curbuf->b_vars->dv_hashtab;
  if (bdone < ht->ht_used) {
    if (bdone++ == 0)
      hi = ht->ht_array;
    else
      ++hi;
    while (((hi)->hi_key == 
# 3017 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0) 
# 3017 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    return cat_prefix_varname('b', hi->hi_key);
  }


  ht = &curwin->w_vars->dv_hashtab;
  if (wdone < ht->ht_used) {
    if (wdone++ == 0)
      hi = ht->ht_array;
    else
      ++hi;
    while (((hi)->hi_key == 
# 3029 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0) 
# 3029 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    return cat_prefix_varname('w', hi->hi_key);
  }


  ht = &curtab->tp_vars->dv_hashtab;
  if (tdone < ht->ht_used) {
    if (tdone++ == 0)
      hi = ht->ht_array;
    else
      ++hi;
    while (((hi)->hi_key == 
# 3041 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0) 
# 3041 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    return cat_prefix_varname('t', hi->hi_key);
  }


  if (vidx < ((sizeof(vimvars)/sizeof((vimvars)[0])) / ((size_t)(!(sizeof(vimvars) % sizeof((vimvars)[0])))))) {
    return cat_prefix_varname('v', (char_u *)vimvars[vidx++].vv_name);
  }

  do { void **ptr_ = (void **)&(varnamebuf); xfree(*ptr_); *ptr_ = 
# 3051 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 3051 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; (void)(*ptr_); } while (0);
  varnamebuflen = 0;
  return 
# 3053 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0)
# 3053 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}





static int pattern_match(char_u *pat, char_u *text, 
# 3060 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   _Bool 
# 3060 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        ic)
{
  int matches = 0;
  regmatch_T regmatch;


  char_u *save_cpo = p_cpo;
  p_cpo = (char_u *)"";
  regmatch.regprog = vim_regcomp(pat, 1 + 2);
  if (regmatch.regprog != 
# 3069 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 3069 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ) {
    regmatch.rm_ic = ic;
    matches = vim_regexec_nl(&regmatch, text, (colnr_T)0);
    vim_regfree(regmatch.regprog);
  }
  p_cpo = save_cpo;
  return matches;
}




typedef enum {
  TYPE_UNKNOWN = 0,
  TYPE_EQUAL,
  TYPE_NEQUAL,
  TYPE_GREATER,
  TYPE_GEQUAL,
  TYPE_SMALLER,
  TYPE_SEQUAL,
  TYPE_MATCH,
  TYPE_NOMATCH,
} exptype_T;
# 3108 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int eval0(char_u *arg, typval_T *rettv, char_u **nextcmd, int evaluate)
{
  int ret;
  char_u *p;

  p = skipwhite(arg);
  ret = eval1(&p, rettv, evaluate);
  if (ret == 0 || !ends_excmd(*p)) {
    if (ret != 0) {
      tv_clear(rettv);
    }



    if (!aborting()) {
      emsgf(gettext((char *)(e_invexpr2)), arg);
    }
    ret = 0;
  }
  if (nextcmd != 
# 3127 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 3127 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    )
    *nextcmd = check_nextcmd(p);

  return ret;
}
# 3146 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int eval1(char_u **arg, typval_T *rettv, int evaluate)
{
  int result;
  typval_T var2;




  if (eval2(arg, rettv, evaluate) == 0)
    return 0;

  if ((*arg)[0] == '?') {
    result = 0;
    if (evaluate) {
      
# 3160 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     _Bool 
# 3160 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          error = 
# 3160 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  0
# 3160 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;

      if (tv_get_number_chk(rettv, &error) != 0) {
        result = 
# 3163 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 3163 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
      }
      tv_clear(rettv);
      if (error) {
        return 0;
      }
    }




    *arg = skipwhite(*arg + 1);
    if (eval1(arg, rettv, evaluate && result) == 0) {
      return 0;
    }




    if ((*arg)[0] != ':') {
      emsg((char_u *)(gettext((char *)("E109: Missing ':' after '?'"))));
      if (evaluate && result) {
        tv_clear(rettv);
      }
      return 0;
    }




    *arg = skipwhite(*arg + 1);
    if (eval1(arg, &var2, evaluate && !result) == 0) {
      if (evaluate && result) {
        tv_clear(rettv);
      }
      return 0;
    }
    if (evaluate && !result)
      *rettv = var2;
  }

  return 1;
}
# 3218 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int eval2(char_u **arg, typval_T *rettv, int evaluate)
{
  typval_T var2;
  long result;
  int first;
  
# 3223 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 3223 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      error = 
# 3223 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 3223 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;




  if (eval3(arg, rettv, evaluate) == 0)
    return 0;




  first = 1;
  result = 0;
  while ((*arg)[0] == '|' && (*arg)[1] == '|') {
    if (evaluate && first) {
      if (tv_get_number_chk(rettv, &error) != 0) {
        result = 
# 3239 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 3239 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
      }
      tv_clear(rettv);
      if (error) {
        return 0;
      }
      first = 
# 3245 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             0
# 3245 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
    }




    *arg = skipwhite(*arg + 2);
    if (eval3(arg, &var2, evaluate && !result) == 0)
      return 0;




    if (evaluate && !result) {
      if (tv_get_number_chk(&var2, &error) != 0) {
        result = 
# 3260 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 3260 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
      }
      tv_clear(&var2);
      if (error) {
        return 0;
      }
    }
    if (evaluate) {
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = result;
    }
  }

  return 1;
}
# 3287 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int eval3(char_u **arg, typval_T *rettv, int evaluate)
{
  typval_T var2;
  long result;
  int first;
  
# 3292 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 3292 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      error = 
# 3292 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 3292 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;




  if (eval4(arg, rettv, evaluate) == 0)
    return 0;




  first = 1;
  result = 1;
  while ((*arg)[0] == '&' && (*arg)[1] == '&') {
    if (evaluate && first) {
      if (tv_get_number_chk(rettv, &error) == 0) {
        result = 
# 3308 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 3308 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
      }
      tv_clear(rettv);
      if (error) {
        return 0;
      }
      first = 
# 3314 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             0
# 3314 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
    }




    *arg = skipwhite(*arg + 2);
    if (eval4(arg, &var2, evaluate && result) == 0)
      return 0;




    if (evaluate && result) {
      if (tv_get_number_chk(&var2, &error) == 0) {
        result = 
# 3329 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 3329 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
      }
      tv_clear(&var2);
      if (error) {
        return 0;
      }
    }
    if (evaluate) {
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = result;
    }
  }

  return 1;
}
# 3365 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int eval4(char_u **arg, typval_T *rettv, int evaluate)
{
  typval_T var2;
  char_u *p;
  int i;
  exptype_T type = TYPE_UNKNOWN;
  
# 3371 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 3371 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      type_is = 
# 3371 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 3371 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
  int len = 2;
  varnumber_T n1, n2;
  
# 3374 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 3374 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      ic;




  if (eval5(arg, rettv, evaluate) == 0)
    return 0;

  p = *arg;
  switch (p[0]) {
  case '=': if (p[1] == '=')
      type = TYPE_EQUAL;
    else if (p[1] == '~')
      type = TYPE_MATCH;
    break;
  case '!': if (p[1] == '=')
      type = TYPE_NEQUAL;
    else if (p[1] == '~')
      type = TYPE_NOMATCH;
    break;
  case '>': if (p[1] != '=') {
      type = TYPE_GREATER;
      len = 1;
  } else
      type = TYPE_GEQUAL;
    break;
  case '<': if (p[1] != '=') {
      type = TYPE_SMALLER;
      len = 1;
  } else
      type = TYPE_SEQUAL;
    break;
  case 'i': if (p[1] == 's') {
      if (p[2] == 'n' && p[3] == 'o' && p[4] == 't') {
        len = 5;
      }
      if (!
# 3410 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((*__ctype_b_loc ())[(int) ((
# 3410 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          p[len]
# 3410 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ))] & (unsigned short int) _ISalnum) 
# 3410 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          && p[len] != '_') {
        type = len == 2 ? TYPE_EQUAL : TYPE_NEQUAL;
        type_is = 
# 3412 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 1
# 3412 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
      }
  }
    break;
  }




  if (type != TYPE_UNKNOWN) {

    if (p[len] == '?') {
      ic = 
# 3424 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          1
# 3424 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
      len++;
    } else if (p[len] == '#') {
      ic = 
# 3427 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 3427 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
      len++;
    } else {
      ic = p_ic;
    }


    *arg = skipwhite(p + len);
    if (eval5(arg, &var2, evaluate) == 0) {
      tv_clear(rettv);
      return 0;
    }

    if (evaluate) {
      if (type_is && rettv->v_type != var2.v_type) {


        n1 = (type == TYPE_NEQUAL);
      } else if (rettv->v_type == VAR_LIST || var2.v_type == VAR_LIST) {
        if (type_is) {
          n1 = (rettv->v_type == var2.v_type
                && rettv->vval.v_list == var2.vval.v_list);
          if (type == TYPE_NEQUAL)
            n1 = !n1;
        } else if (rettv->v_type != var2.v_type
                   || (type != TYPE_EQUAL && type != TYPE_NEQUAL)) {
          if (rettv->v_type != var2.v_type) {
            emsg((char_u *)(gettext((char *)("E691: Can only compare List with List"))));
          } else {
            emsg((char_u *)(gettext((char *)("E692: Invalid operation for List"))));
          }
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        } else {

          n1 = tv_list_equal(rettv->vval.v_list, var2.vval.v_list, ic, 
# 3463 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                      0
# 3463 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                           );
          if (type == TYPE_NEQUAL) {
            n1 = !n1;
          }
        }
      } else if (rettv->v_type == VAR_DICT || var2.v_type == VAR_DICT) {
        if (type_is) {
          n1 = (rettv->v_type == var2.v_type
                && rettv->vval.v_dict == var2.vval.v_dict);
          if (type == TYPE_NEQUAL)
            n1 = !n1;
        } else if (rettv->v_type != var2.v_type
                   || (type != TYPE_EQUAL && type != TYPE_NEQUAL)) {
          if (rettv->v_type != var2.v_type)
            emsg((char_u *)(gettext((char *)("E735: Can only compare Dictionary with Dictionary"))));
          else
            emsg((char_u *)(gettext((char *)("E736: Invalid operation for Dictionary"))));
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        } else {

          n1 = tv_dict_equal(rettv->vval.v_dict, var2.vval.v_dict,
                             ic, 
# 3486 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                0
# 3486 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     );
          if (type == TYPE_NEQUAL) {
            n1 = !n1;
          }
        }
      } else if (tv_is_func(*rettv) || tv_is_func(var2)) {
        if (type != TYPE_EQUAL && type != TYPE_NEQUAL) {
          emsg((char_u *)(gettext((char *)("E694: Invalid operation for Funcrefs"))));
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        }
        if ((rettv->v_type == VAR_PARTIAL
             && rettv->vval.v_partial == 
# 3499 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        ((void *)0)
# 3499 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            )
            || (var2.v_type == VAR_PARTIAL
                && var2.vval.v_partial == 
# 3501 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         ((void *)0)
# 3501 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             )) {

            n1 = 
# 3503 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 3503 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
        } else if (type_is) {
          if (rettv->v_type == VAR_FUNC && var2.v_type == VAR_FUNC) {


            n1 = tv_equal(rettv, &var2, ic, 
# 3508 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           0
# 3508 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                );
          } else if (rettv->v_type == VAR_PARTIAL
                     && var2.v_type == VAR_PARTIAL) {
            n1 = (rettv->vval.v_partial == var2.vval.v_partial);
          } else {
            n1 = 
# 3513 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 3513 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
          }
        } else {
          n1 = tv_equal(rettv, &var2, ic, 
# 3516 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         0
# 3516 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              );
        }
        if (type == TYPE_NEQUAL) {
          n1 = !n1;
        }
      }




      else if ((rettv->v_type == VAR_FLOAT || var2.v_type == VAR_FLOAT)
               && type != TYPE_MATCH && type != TYPE_NOMATCH) {
        float_T f1, f2;

        if (rettv->v_type == VAR_FLOAT) {
          f1 = rettv->vval.v_float;
        } else {
          f1 = tv_get_number(rettv);
        }
        if (var2.v_type == VAR_FLOAT) {
          f2 = var2.vval.v_float;
        } else {
          f2 = tv_get_number(&var2);
        }
        n1 = 
# 3540 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 3540 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
        switch (type) {
          case TYPE_EQUAL: n1 = (f1 == f2); break;
          case TYPE_NEQUAL: n1 = (f1 != f2); break;
          case TYPE_GREATER: n1 = (f1 > f2); break;
          case TYPE_GEQUAL: n1 = (f1 >= f2); break;
          case TYPE_SMALLER: n1 = (f1 < f2); break;
          case TYPE_SEQUAL: n1 = (f1 <= f2); break;
          case TYPE_UNKNOWN:
          case TYPE_MATCH:
          case TYPE_NOMATCH: break;
        }
      }




      else if ((rettv->v_type == VAR_NUMBER || var2.v_type == VAR_NUMBER)
               && type != TYPE_MATCH && type != TYPE_NOMATCH) {
        n1 = tv_get_number(rettv);
        n2 = tv_get_number(&var2);
        switch (type) {
          case TYPE_EQUAL: n1 = (n1 == n2); break;
          case TYPE_NEQUAL: n1 = (n1 != n2); break;
          case TYPE_GREATER: n1 = (n1 > n2); break;
          case TYPE_GEQUAL: n1 = (n1 >= n2); break;
          case TYPE_SMALLER: n1 = (n1 < n2); break;
          case TYPE_SEQUAL: n1 = (n1 <= n2); break;
          case TYPE_UNKNOWN:
          case TYPE_MATCH:
          case TYPE_NOMATCH: break;
        }
      } else {
        char buf1[NUMBUFLEN];
        char buf2[NUMBUFLEN];
        const char *const s1 = tv_get_string_buf(rettv, buf1);
        const char *const s2 = tv_get_string_buf(&var2, buf2);
        if (type != TYPE_MATCH && type != TYPE_NOMATCH) {
          i = mb_strcmp_ic(ic, s1, s2);
        } else {
          i = 0;
        }
        n1 = 
# 3582 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 3582 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
        switch (type) {
          case TYPE_EQUAL: n1 = (i == 0); break;
          case TYPE_NEQUAL: n1 = (i != 0); break;
          case TYPE_GREATER: n1 = (i > 0); break;
          case TYPE_GEQUAL: n1 = (i >= 0); break;
          case TYPE_SMALLER: n1 = (i < 0); break;
          case TYPE_SEQUAL: n1 = (i <= 0); break;

          case TYPE_MATCH:
          case TYPE_NOMATCH: {
            n1 = pattern_match((char_u *)s2, (char_u *)s1, ic);
            if (type == TYPE_NOMATCH) {
              n1 = !n1;
            }
            break;
          }
          case TYPE_UNKNOWN: break;
        }
      }
      tv_clear(rettv);
      tv_clear(&var2);
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = n1;
    }
  }

  return 1;
}
# 3626 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int eval5(char_u **arg, typval_T *rettv, int evaluate)
{
  typval_T var2;
  typval_T var3;
  int op;
  varnumber_T n1, n2;
  float_T f1 = 0, f2 = 0;
  char_u *p;




  if (eval6(arg, rettv, evaluate, 0) == 0)
    return 0;




  for (;; ) {
    op = **arg;
    if (op != '+' && op != '-' && op != '.')
      break;

    if ((op != '+' || rettv->v_type != VAR_LIST)
        && (op == '.' || rettv->v_type != VAR_FLOAT)) {







      if (evaluate && !tv_check_str(rettv)) {
        tv_clear(rettv);
        return 0;
      }
    }




    if (op == '.' && *(*arg + 1) == '.') {
      (*arg)++;
    }
    *arg = skipwhite(*arg + 1);
    if (eval6(arg, &var2, evaluate, op == '.') == 0) {
      tv_clear(rettv);
      return 0;
    }

    if (evaluate) {



      if (op == '.') {
        char buf1[NUMBUFLEN];
        char buf2[NUMBUFLEN];

        const char *const s1 = tv_get_string_buf(rettv, buf1);
        const char *const s2 = tv_get_string_buf_chk(&var2, buf2);
        if (s2 == 
# 3686 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 3686 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ) {
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        }
        p = concat_str((const char_u *)s1, (const char_u *)s2);
        tv_clear(rettv);
        rettv->v_type = VAR_STRING;
        rettv->vval.v_string = p;
      } else if (op == '+' && rettv->v_type == VAR_LIST
                 && var2.v_type == VAR_LIST) {

        if (tv_list_concat(rettv->vval.v_list, var2.vval.v_list, &var3)
            == 0) {
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        }
        tv_clear(rettv);
        *rettv = var3;
      } else {
        
# 3707 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       _Bool 
# 3707 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            error = 
# 3707 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    0
# 3707 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;

        if (rettv->v_type == VAR_FLOAT) {
          f1 = rettv->vval.v_float;
          n1 = 0;
        } else {
          n1 = tv_get_number_chk(rettv, &error);
          if (error) {



            tv_clear(rettv);
            return 0;
          }
          if (var2.v_type == VAR_FLOAT)
            f1 = n1;
        }
        if (var2.v_type == VAR_FLOAT) {
          f2 = var2.vval.v_float;
          n2 = 0;
        } else {
          n2 = tv_get_number_chk(&var2, &error);
          if (error) {
            tv_clear(rettv);
            tv_clear(&var2);
            return 0;
          }
          if (rettv->v_type == VAR_FLOAT)
            f2 = n2;
        }
        tv_clear(rettv);


        if (rettv->v_type == VAR_FLOAT || var2.v_type == VAR_FLOAT) {
          if (op == '+')
            f1 = f1 + f2;
          else
            f1 = f1 - f2;
          rettv->v_type = VAR_FLOAT;
          rettv->vval.v_float = f1;
        } else {
          if (op == '+')
            n1 = n1 + n2;
          else
            n1 = n1 - n2;
          rettv->v_type = VAR_NUMBER;
          rettv->vval.v_number = n1;
        }
      }
      tv_clear(&var2);
    }
  }
  return 1;
}
# 3777 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int eval6(char_u **arg, typval_T *rettv, int evaluate, int want_string)
  FUNC_ATTR_NO_SANITIZE_UNDEFINED
{
  typval_T var2;
  int op;
  varnumber_T n1, n2;
  
# 3783 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 3783 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      use_float = 
# 3783 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  0
# 3783 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
  float_T f1 = 0, f2 = 0;
  
# 3785 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 3785 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      error = 
# 3785 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 3785 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;




  if (eval7(arg, rettv, evaluate, want_string) == 0)
    return 0;




  for (;; ) {
    op = **arg;
    if (op != '*' && op != '/' && op != '%')
      break;

    if (evaluate) {
      if (rettv->v_type == VAR_FLOAT) {
        f1 = rettv->vval.v_float;
        use_float = 
# 3804 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   1
# 3804 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
        n1 = 0;
      } else {
        n1 = tv_get_number_chk(rettv, &error);
      }
      tv_clear(rettv);
      if (error) {
        return 0;
      }
    } else {
      n1 = 0;
    }




    *arg = skipwhite(*arg + 1);
    if (eval7(arg, &var2, evaluate, 0) == 0)
      return 0;

    if (evaluate) {
      if (var2.v_type == VAR_FLOAT) {
        if (!use_float) {
          f1 = n1;
          use_float = 
# 3828 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     1
# 3828 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;
        }
        f2 = var2.vval.v_float;
        n2 = 0;
      } else {
        n2 = tv_get_number_chk(&var2, &error);
        tv_clear(&var2);
        if (error) {
          return 0;
        }
        if (use_float) {
          f2 = n2;
        }
      }





      if (use_float) {
        if (op == '*') {
          f1 = f1 * f2;
        } else if (op == '/') {

          f1 = (f2 == 0
                ? (

                    f1 == 0
                    ? 
# 3856 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     (__builtin_nanf (""))
                    
# 3857 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   :

                    (f1 > 0
                     ? 
# 3860 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      (__builtin_inff ())
                     
# 3861 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    : -
# 3861 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       (__builtin_inff ())
# 3861 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               )
                )
                : f1 / f2);
        } else {
          emsg((char_u *)(gettext((char *)("E804: Cannot use '%' with Float"))));
          return 0;
        }
        rettv->v_type = VAR_FLOAT;
        rettv->vval.v_float = f1;
      } else {
        if (op == '*') {
          n1 = n1 * n2;
        } else if (op == '/') {
          n1 = num_divide(n1, n2);
        } else {
          n1 = num_modulus(n1, n2);
        }
        rettv->v_type = VAR_NUMBER;
        rettv->vval.v_number = n1;
      }
    }
  }

  return 1;
}
# 3913 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int eval7(
    char_u **arg,
    typval_T *rettv,
    int evaluate,
    int want_string
)
{
  varnumber_T n;
  int len;
  char_u *s;
  char_u *start_leader, *end_leader;
  int ret = 1;
  char_u *alias;



  rettv->v_type = VAR_UNKNOWN;


  start_leader = *arg;
  while (**arg == '!' || **arg == '-' || **arg == '+') {
    *arg = skipwhite(*arg + 1);
  }
  end_leader = *arg;

  switch (**arg) {

  case '0':
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
  {
    char_u *p = skipdigits(*arg + 1);
    int get_float = 
# 3952 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   0
# 3952 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;






    if (!want_string && p[0] == '.' && ascii_isdigit(p[1])) {
      get_float = 
# 3960 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 1
# 3960 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
      p = skipdigits(p + 2);
      if (*p == 'e' || *p == 'E') {
        ++p;
        if (*p == '-' || *p == '+') {
          ++p;
        }
        if (!ascii_isdigit(*p)) {
          get_float = 
# 3968 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     0
# 3968 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ;
        } else {
          p = skipdigits(p + 1);
        }
      }
      if ((((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z') || ((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z')) || *p == '.') {
        get_float = 
# 3974 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   0
# 3974 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
      }
    }
    if (get_float) {
      float_T f;

      *arg += string2float((char *) *arg, &f);
      if (evaluate) {
        rettv->v_type = VAR_FLOAT;
        rettv->vval.v_float = f;
      }
    } else {
      vim_str2nr(*arg, 
# 3986 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 3986 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          , &len, STR2NR_ALL, &n, 
# 3986 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                  ((void *)0)
# 3986 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                      , 0);
      *arg += len;
      if (evaluate) {
        rettv->v_type = VAR_NUMBER;
        rettv->vval.v_number = n;
      }
    }
    break;
  }


  case '"': ret = get_string_tv(arg, rettv, evaluate);
    break;


  case '\'': ret = get_lit_string_tv(arg, rettv, evaluate);
    break;


  case '[': ret = get_list_tv(arg, rettv, evaluate);
    break;



  case '{': ret = get_lambda_tv(arg, rettv, evaluate);
              if (ret == 2) {
                ret = dict_get_tv(arg, rettv, evaluate);
              }
    break;


  case '&': {
    ret = get_option_tv((const char **)arg, rettv, evaluate);
    break;
  }

  case '$': ret = get_env_tv(arg, rettv, evaluate);
    break;


  case '@': ++*arg;
    if (evaluate) {
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = get_reg_contents(**arg, kGRegExprSrc);
    }
    if (**arg != '\000') {
      ++*arg;
    }
    break;


  case '(': *arg = skipwhite(*arg + 1);
    ret = eval1(arg, rettv, evaluate);
    if (**arg == ')') {
      ++*arg;
    } else if (ret == 1) {
      emsg((char_u *)(gettext((char *)("E110: Missing ')'"))));
      tv_clear(rettv);
      ret = 0;
    }
    break;

  default: ret = 2;
    break;
  }

  if (ret == 2) {


    s = *arg;
    len = get_name_len((const char **)arg, (char **)&alias, evaluate, 
# 4056 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                     1
# 4056 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                         );
    if (alias != 
# 4057 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 4057 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
      s = alias;
    }

    if (len <= 0) {
      ret = 0;
    } else {
      if (**arg == '(') {
        partial_T *partial;

        if (!evaluate) {
          check_vars((const char *)s, len);
        }



        s = deref_func_name((const char *)s, &len, &partial, !evaluate);



        s = xmemdupz(s, len);


        ret = get_func_tv(s, len, rettv, arg,
                          curwin->w_cursor.lnum, curwin->w_cursor.lnum,
                          &len, evaluate, partial, 
# 4082 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                  ((void *)0)
# 4082 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                      );

        xfree(s);




        if (rettv->v_type == VAR_UNKNOWN && !evaluate && **arg == '(') {
          rettv->vval.v_string = (char_u *)tv_empty_string;
          rettv->v_type = VAR_FUNC;
        }




        if (evaluate && aborting()) {
          if (ret == 1) {
            tv_clear(rettv);
          }
          ret = 0;
        }
      } else if (evaluate) {
        ret = get_var_tv((const char *)s, len, rettv, 
# 4104 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                     ((void *)0)
# 4104 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         , 
# 4104 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           1
# 4104 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               , 
# 4104 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 0
# 4104 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                      );
      } else {
        check_vars((const char *)s, len);
        ret = 1;
      }
    }
    xfree(alias);
  }

  *arg = skipwhite(*arg);



  if (ret == 1) {
    ret = handle_subscript((const char **)arg, rettv, evaluate, 
# 4118 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                               1
# 4118 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                   );
  }


  if (ret == 1 && evaluate && end_leader > start_leader) {
    
# 4123 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 4123 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        error = 
# 4123 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 4123 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
    varnumber_T val = 0;
    float_T f = 0.0;

    if (rettv->v_type == VAR_FLOAT) {
      f = rettv->vval.v_float;
    } else {
      val = tv_get_number_chk(rettv, &error);
    }
    if (error) {
      tv_clear(rettv);
      ret = 0;
    } else {
      while (end_leader > start_leader) {
        --end_leader;
        if (*end_leader == '!') {
          if (rettv->v_type == VAR_FLOAT) {
            f = !f;
          } else {
            val = !val;
          }
        } else if (*end_leader == '-') {
          if (rettv->v_type == VAR_FLOAT) {
            f = -f;
          } else {
            val = -val;
          }
        }
      }
      if (rettv->v_type == VAR_FLOAT) {
        tv_clear(rettv);
        rettv->vval.v_float = f;
      } else {
        tv_clear(rettv);
        rettv->v_type = VAR_NUMBER;
        rettv->vval.v_number = val;
      }
    }
  }

  return ret;
}
# 4173 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int
eval_index(
    char_u **arg,
    typval_T *rettv,
    int evaluate,
    int verbose
)
{
  
# 4181 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 4181 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      empty1 = 
# 4181 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               0
# 4181 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
  
# 4182 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 4182 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      empty2 = 
# 4182 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               0
# 4182 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
  long n1, n2 = 0;
  ptrdiff_t len = -1;
  int range = 
# 4185 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             0
# 4185 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
  char_u *key = 
# 4186 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 4186 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;

  switch (rettv->v_type) {
    case VAR_FUNC:
    case VAR_PARTIAL: {
      if (verbose) {
        emsg((char_u *)(gettext((char *)("E695: Cannot index a Funcref"))));
      }
      return 0;
    }
    case VAR_FLOAT: {
      if (verbose) {
        emsg((char_u *)(gettext((char *)(e_float_as_string))));
      }
      return 0;
    }
    case VAR_SPECIAL: {
      if (verbose) {
        emsg((char_u *)(gettext((char *)("E909: Cannot index a special variable"))));
      }
      return 0;
    }
    case VAR_UNKNOWN: {
      if (evaluate) {
        return 0;
      }
      __attribute__((fallthrough));
    }
    case VAR_STRING:
    case VAR_NUMBER:
    case VAR_LIST:
    case VAR_DICT: {
      break;
    }
  }

  typval_T var1 = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
  typval_T var2 = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
  if (**arg == '.') {



    key = *arg + 1;
    for (len = 0; ((((unsigned)(key[len]) >= 'A' && (unsigned)(key[len]) <= 'Z') || ((unsigned)(key[len]) >= 'a' && (unsigned)(key[len]) <= 'z')) || ascii_isdigit(key[len])) || key[len] == '_'; ++len)
      ;
    if (len == 0)
      return 0;
    *arg = skipwhite(key + len);
  } else {





    *arg = skipwhite(*arg + 1);
    if (**arg == ':') {
      empty1 = 
# 4242 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              1
# 4242 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
    } else if (eval1(arg, &var1, evaluate) == 0) {
      return 0;
    } else if (evaluate && !tv_check_str(&var1)) {

      tv_clear(&var1);
      return 0;
    }




    if (**arg == ':') {
      range = 1;
      *arg = skipwhite(*arg + 1);
      if (**arg == ']') {
        empty2 = 
# 4258 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 4258 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
      } else if (eval1(arg, &var2, evaluate) == 0) {
        if (!empty1) {
          tv_clear(&var1);
        }
        return 0;
      } else if (evaluate && !tv_check_str(&var2)) {

        if (!empty1) {
          tv_clear(&var1);
        }
        tv_clear(&var2);
        return 0;
      }
    }


    if (**arg != ']') {
      if (verbose) {
        emsg((char_u *)(gettext((char *)(e_missbrac))));
      }
      tv_clear(&var1);
      if (range) {
        tv_clear(&var2);
      }
      return 0;
    }
    *arg = skipwhite(*arg + 1);
  }

  if (evaluate) {
    n1 = 0;
    if (!empty1 && rettv->v_type != VAR_DICT && !tv_is_luafunc(rettv)) {
      n1 = tv_get_number(&var1);
      tv_clear(&var1);
    }
    if (range) {
      if (empty2) {
        n2 = -1;
      } else {
        n2 = tv_get_number(&var2);
        tv_clear(&var2);
      }
    }

    switch (rettv->v_type) {
      case VAR_NUMBER:
      case VAR_STRING: {
        const char *const s = tv_get_string(rettv);
        char *v;
        len = (ptrdiff_t)strlen(s);
        if (range) {


          if (n1 < 0) {
            n1 = len + n1;
            if (n1 < 0) {
              n1 = 0;
            }
          }
          if (n2 < 0) {
            n2 = len + n2;
          } else if (n2 >= len) {
            n2 = len;
          }
          if (n1 >= len || n2 < 0 || n1 > n2) {
            v = 
# 4324 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 4324 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
          } else {
            v = xmemdupz(s + n1, (size_t)(n2 - n1 + 1));
          }
        } else {



          if (n1 >= len || n1 < 0) {
            v = 
# 4333 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 4333 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
          } else {
            v = xmemdupz(s + n1, 1);
          }
        }
        tv_clear(rettv);
        rettv->v_type = VAR_STRING;
        rettv->vval.v_string = (char_u *)v;
        break;
      }
      case VAR_LIST: {
        len = tv_list_len(rettv->vval.v_list);
        if (n1 < 0) {
          n1 = len + n1;
        }
        if (!empty1 && (n1 < 0 || n1 >= len)) {


          if (!range) {
            if (verbose) {
              emsgf((const char *) (gettext((char *)(e_listidx))), (int64_t)(n1));
            }
            return 0;
          }
          n1 = len;
        }
        if (range) {
          list_T *l;
          listitem_T *item;

          if (n2 < 0) {
            n2 = len + n2;
          } else if (n2 >= len) {
            n2 = len - 1;
          }
          if (!empty2 && (n2 < 0 || n2 + 1 < n1)) {
            n2 = -1;
          }
          l = tv_list_alloc(n2 - n1 + 1);
          item = tv_list_find(rettv->vval.v_list, n1);
          while (n1++ <= n2) {
            tv_list_append_tv(l, (&(item)->li_tv));
            item = ((item)->li_next);
          }
          tv_clear(rettv);
          tv_list_set_ret(rettv, l);
        } else {
          tv_copy((&(tv_list_find(rettv->vval.v_list, n1))->li_tv), &var1);
          tv_clear(rettv);
          *rettv = var1;
        }
        break;
      }
      case VAR_DICT: {
        if (range) {
          if (verbose) {
            emsg((char_u *)(gettext((char *)(e_dictrange))));
          }
          if (len == -1) {
            tv_clear(&var1);
          }
          return 0;
        }

        if (len == -1) {
          key = (char_u *)tv_get_string_chk(&var1);
          if (key == 
# 4399 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 4399 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ) {
            tv_clear(&var1);
            return 0;
          }
        }

        dictitem_T *const item = tv_dict_find(rettv->vval.v_dict,
                                              (const char *)key, len);

        if (item == 
# 4408 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0) 
# 4408 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        && verbose) {
          emsgf(gettext((char *)(e_dictkey)), key);
        }
        if (len == -1) {
          tv_clear(&var1);
        }
        if (item == 
# 4414 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0) 
# 4414 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        || tv_is_luafunc(&item->di_tv)) {
          return 0;
        }

        tv_copy(&item->di_tv, &var1);
        tv_clear(rettv);
        *rettv = var1;
        break;
      }
      case VAR_SPECIAL:
      case VAR_FUNC:
      case VAR_FLOAT:
      case VAR_PARTIAL:
      case VAR_UNKNOWN: {
        break;
      }
    }
  }

  return 1;
}
# 4446 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int get_option_tv(const char **const arg, typval_T *const rettv,
                  const 
# 4447 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       _Bool 
# 4447 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            evaluate)
  FUNC_ATTR_NONNULL_ARG(1)
{
  long numval;
  char_u *stringval;
  int opt_type;
  int c;
  
# 4454 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 4454 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      working = (**arg == '+');
  int ret = 1;
  int opt_flags;


  char *option_end = (char *)find_option_end(arg, &opt_flags);
  if (option_end == 
# 4460 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 4460 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {
    if (rettv != 
# 4461 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 4461 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
      emsgf((const char *) (gettext((char *)("E112: Option name missing: %s"))), (*arg));
    }
    return 0;
  }

  if (!evaluate) {
    *arg = option_end;
    return 1;
  }

  c = *option_end;
  *option_end = '\000';
  opt_type = get_option_value((char_u *)(*arg), &numval,
                              rettv == 
# 4475 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                      ((void *)0) 
# 4475 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           ? 
# 4475 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             ((void *)0) 
# 4475 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                  : &stringval, opt_flags);

  if (opt_type == -3) {
    if (rettv != 
# 4478 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 4478 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
      emsgf((const char *) (gettext((char *)("E113: Unknown option: %s"))), (*arg));
    }
    ret = 0;
  } else if (rettv != 
# 4482 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 4482 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
    if (opt_type == -2) {
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = 
# 4485 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 4485 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ;
    } else if (opt_type == -1) {
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = 0;
    } else if (opt_type == 1) {
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = numval;
    } else {
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = stringval;
    }
  } else if (working && (opt_type == -2 || opt_type == -1))
    ret = 0;

  *option_end = c;
  *arg = option_end;

  return ret;
}





static int get_string_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  char_u *p;
  char_u *name;
  unsigned int extra = 0;




  for (p = *arg + 1; *p != '\000' && *p != '"'; (p += utfc_ptr2len((char_u *)p))) {
    if (*p == '\\' && p[1] != '\000') {
      ++p;


      if (*p == '<')
        extra += 2;
    }
  }

  if (*p != '"') {
    emsgf((const char *) (gettext((char *)("E114: Missing quote: %s"))), (*arg));
    return 0;
  }


  if (!evaluate) {
    *arg = p + 1;
    return 1;
  }





  name = xmalloc(p - *arg + extra);
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = name;

  for (p = *arg + 1; *p != '\000' && *p != '"'; ) {
    if (*p == '\\') {
      switch (*++p) {
      case 'b': *name++ = '\010'; ++p; break;
      case 'e': *name++ = '\033'; ++p; break;
      case 'f': *name++ = '\014'; ++p; break;
      case 'n': *name++ = '\012'; ++p; break;
      case 'r': *name++ = '\015'; ++p; break;
      case 't': *name++ = '\011'; ++p; break;

      case 'X':
      case 'x':
      case 'u':
      case 'U':
        if (ascii_isxdigit(p[1])) {
          int n, nr;
          int c = toupper(*p);

          if (c == 'X') {
            n = 2;
          } else if (*p == 'u') {
            n = 4;
          } else {
            n = 8;
          }
          nr = 0;
          while (--n >= 0 && ascii_isxdigit(p[1])) {
            ++p;
            nr = (nr << 4) + hex2nr(*p);
          }
          ++p;


          if (c != 'X') {
            name += utf_char2bytes(nr, name);
          } else {
            *name++ = nr;
          }
        }
        break;


      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7': *name = *p++ - '0';
        if (*p >= '0' && *p <= '7') {
          *name = (*name << 3) + *p++ - '0';
          if (*p >= '0' && *p <= '7')
            *name = (*name << 3) + *p++ - '0';
        }
        ++name;
        break;


      case '<':
        extra = trans_special((const char_u **)&p, strlen((char *)(p)), name, 
# 4607 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                   1
# 4607 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                       , 
# 4607 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                         1
# 4607 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                             );
        if (extra != 0) {
          name += extra;
          break;
        }
        __attribute__((fallthrough));

      default: mb_copy_char((const char_u **)(&p), &name);;
        break;
      }
    } else
      mb_copy_char((const char_u **)(&p), &name);;

  }
  *name = '\000';
  if (*p != '\000') {
    p++;
  }
  *arg = p;

  return 1;
}





static int get_lit_string_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  char_u *p;
  char_u *str;
  int reduce = 0;




  for (p = *arg + 1; *p != '\000'; (p += utfc_ptr2len((char_u *)p))) {
    if (*p == '\'') {
      if (p[1] != '\'')
        break;
      ++reduce;
      ++p;
    }
  }

  if (*p != '\'') {
    emsgf((const char *) (gettext((char *)("E115: Missing quote: %s"))), (*arg));
    return 0;
  }


  if (!evaluate) {
    *arg = p + 1;
    return 1;
  }




  str = xmalloc((p - *arg) - reduce);
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = str;

  for (p = *arg + 1; *p != '\000'; ) {
    if (*p == '\'') {
      if (p[1] != '\'')
        break;
      ++p;
    }
    mb_copy_char((const char_u **)(&p), &str);;
  }
  *str = '\000';
  *arg = p + 1;

  return 1;
}


char_u *partial_name(partial_T *pt)
{
  if (pt->pt_name != 
# 4687 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 4687 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ) {
    return pt->pt_name;
  }
  return pt->pt_func->uf_name;
}



static void partial_free(partial_T *pt)
{
  for (int i = 0; i < pt->pt_argc; i++) {
    tv_clear(&pt->pt_argv[i]);
  }
  xfree(pt->pt_argv);
  tv_dict_unref(pt->pt_dict);
  if (pt->pt_name != 
# 4702 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 4702 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ) {
    func_unref(pt->pt_name);
    xfree(pt->pt_name);
  } else {
    func_ptr_unref(pt->pt_func);
  }
  xfree(pt);
}





void partial_unref(partial_T *pt)
{
  if (pt != 
# 4717 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 4717 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && --pt->pt_refcount <= 0) {
    partial_free(pt);
  }
}



static int get_list_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  list_T *l = 
# 4726 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 4726 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;

  if (evaluate) {
    l = tv_list_alloc(kListLenShouldKnow);
  }

  *arg = skipwhite(*arg + 1);
  while (**arg != ']' && **arg != '\000') {
    typval_T tv;
    if (eval1(arg, &tv, evaluate) == 0) {
      goto failret;
    }
    if (evaluate) {
      tv.v_lock = VAR_UNLOCKED;
      tv_list_append_owned_tv(l, tv);
    }

    if (**arg == ']') {
      break;
    }
    if (**arg != ',') {
      emsgf(gettext((char *)("E696: Missing comma in List: %s")), *arg);
      goto failret;
    }
    *arg = skipwhite(*arg + 1);
  }

  if (**arg != ']') {
    emsgf(gettext((char *)("E697: Missing end of List ']': %s")), *arg);
failret:
    if (evaluate) {
      tv_list_free(l);
    }
    return 0;
  }

  *arg = skipwhite(*arg + 1);
  if (evaluate) {
    tv_list_set_ret(rettv, l);
  }

  return 1;
}


# 4770 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 4770 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    func_equal(
    typval_T *tv1,
    typval_T *tv2,
    
# 4773 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 4773 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        ic
) {
  char_u *s1, *s2;
  dict_T *d1, *d2;
  int a1, a2;


  s1 = tv1->v_type == VAR_FUNC ? tv1->vval.v_string
                     : partial_name(tv1->vval.v_partial);
  if (s1 != 
# 4782 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 4782 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && *s1 == '\000') {
    s1 = 
# 4783 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0)
# 4783 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
  }
  s2 = tv2->v_type == VAR_FUNC ? tv2->vval.v_string
                     : partial_name(tv2->vval.v_partial);
  if (s2 != 
# 4787 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 4787 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                && *s2 == '\000') {
    s2 = 
# 4788 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0)
# 4788 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
  }
  if (s1 == 
# 4790 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 4790 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                || s2 == 
# 4790 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 4790 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ) {
    if (s1 != s2) {
      return 
# 4792 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 4792 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
    }
  } else if (strcmp((char *)(s1), (char *)(s2)) != 0) {
    return 
# 4795 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 4795 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }


  d1 = tv1->v_type == VAR_FUNC ? 
# 4799 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                ((void *)0) 
# 4799 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     : tv1->vval.v_partial->pt_dict;
  d2 = tv2->v_type == VAR_FUNC ? 
# 4800 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                ((void *)0) 
# 4800 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     : tv2->vval.v_partial->pt_dict;
  if (d1 == 
# 4801 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 4801 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                || d2 == 
# 4801 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 4801 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ) {
    if (d1 != d2) {
      return 
# 4803 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 4803 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
    }
  } else if (!tv_dict_equal(d1, d2, ic, 
# 4805 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       1
# 4805 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           )) {
    return 
# 4806 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 4806 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }


  a1 = tv1->v_type == VAR_FUNC ? 0 : tv1->vval.v_partial->pt_argc;
  a2 = tv2->v_type == VAR_FUNC ? 0 : tv2->vval.v_partial->pt_argc;
  if (a1 != a2) {
    return 
# 4813 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 4813 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }
  for (int i = 0; i < a1; i++) {
    if (!tv_equal(tv1->vval.v_partial->pt_argv + i,
                  tv2->vval.v_partial->pt_argv + i, ic, 
# 4817 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       1
# 4817 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           )) {
      return 
# 4818 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 4818 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
    }
  }
  return 
# 4821 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        1
# 4821 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}





int get_copyID(void)
  FUNC_ATTR_WARN_UNUSED_RESULT
{




  static int current_copyID = 0;
  current_copyID += 2;
  return current_copyID;
}
# 4864 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 4864 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 4864 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    garbage_collect(
# 4864 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    _Bool 
# 4864 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         testing)
{
  
# 4866 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 4866 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      abort = 
# 4866 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 4866 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;


  if (!testing) {

    want_garbage_collect = 
# 4871 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          0
# 4871 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ;
    may_garbage_collect = 
# 4872 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         0
# 4872 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ;
    garbage_collect_at_exit = 
# 4873 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             0
# 4873 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  ;
  }



  const int copyID = get_copyID();







  abort = abort || set_ref_in_previous_funccal(copyID);


  for (int i = 1; i <= ga_scripts.ga_len; ++i) {
    abort = abort || set_ref_in_ht(&((((scriptvar_T **)ga_scripts.ga_data)[(i) - 1])->sv_dict.dv_hashtab), copyID, 
# 4890 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    ((void *)0)
# 4890 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        );
  }

  for (buf_T *buf = firstbuf; buf != 
# 4893 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 4893 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; buf = buf->b_next) {

    abort = abort || set_ref_in_item(&buf->b_bufvar.di_tv, copyID, 
# 4895 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           ((void *)0)
# 4895 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               , 
# 4895 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 ((void *)0)
# 4895 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     );

    abort = abort || set_ref_in_fmark(buf->b_last_cursor, copyID);
    abort = abort || set_ref_in_fmark(buf->b_last_insert, copyID);
    abort = abort || set_ref_in_fmark(buf->b_last_change, copyID);
    for (size_t i = 0; i < ('z' - 'a' + 1); i++) {
      abort = abort || set_ref_in_fmark(buf->b_namedm[i], copyID);
    }

    for (int i = 0; i < buf->b_changelistlen; i++) {
      abort = abort || set_ref_in_fmark(buf->b_changelist[i], copyID);
    }

    abort = abort || set_ref_dict(buf->additional_data, copyID);


    set_ref_in_callback(&buf->b_prompt_callback, copyID, 
# 4911 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                        ((void *)0)
# 4911 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                            , 
# 4911 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 4911 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  );
    set_ref_in_callback(&buf->b_prompt_interrupt, copyID, 
# 4912 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                         ((void *)0)
# 4912 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             , 
# 4912 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                               ((void *)0)
# 4912 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                   );
  }

  for (tabpage_T *tp = first_tabpage; tp != 
# 4915 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 4915 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; tp = tp->tp_next) for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != 
# 4915 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 4915 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; wp = wp->w_next) {

    abort = abort || set_ref_in_item(&wp->w_winvar.di_tv, copyID, 
# 4917 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          ((void *)0)
# 4917 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                              , 
# 4917 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                ((void *)0)
# 4917 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                    );

    for (int i = 0; i < wp->w_jumplistlen; i++) {
      abort = abort || set_ref_in_fmark(wp->w_jumplist[i].fmark, copyID);
    }
  }
  if (aucmd_win != 
# 4923 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 4923 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
    abort = abort || set_ref_in_item(&aucmd_win->w_winvar.di_tv, copyID, 
# 4924 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 ((void *)0)
# 4924 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     , 
# 4924 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                       ((void *)0)
# 4924 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                           );
  }


  {
    const void *reg_iter = 
# 4929 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
# 4929 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ;
    do {
      yankreg_T reg;
      char name = '\000';
      
# 4933 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     _Bool 
# 4933 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          is_unnamed = 
# 4933 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       0
# 4933 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;
      reg_iter = op_global_reg_iter(reg_iter, &name, &reg, &is_unnamed);
      if (name != '\000') {
        abort = abort || set_ref_dict(reg.additional_data, copyID);
      }
    } while (reg_iter != 
# 4938 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 4938 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            );
  }


  {
    const void *mark_iter = 
# 4943 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 4943 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ;
    do {
      xfmark_T fm;
      char name = '\000';
      mark_iter = mark_global_iter(mark_iter, &name, &fm);
      if (name != '\000') {
        abort = abort || set_ref_dict(fm.fmark.additional_data, copyID);
      }
    } while (mark_iter != 
# 4951 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 4951 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             );
  }


  for (tabpage_T *tp = first_tabpage; tp != 
# 4955 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 4955 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; tp = tp->tp_next) {
    abort = abort || set_ref_in_item(&tp->tp_winvar.di_tv, copyID, 
# 4956 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           ((void *)0)
# 4956 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               , 
# 4956 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 ((void *)0)
# 4956 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     );
  }


  abort = abort || set_ref_in_ht(&globvardict.dv_hashtab, copyID, 
# 4960 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             ((void *)0)
# 4960 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 );


  abort = abort || set_ref_in_call_stack(copyID);


  abort = abort || set_ref_in_functions(copyID);


  {
    Channel *data;
    { khint_t __i; for (__i = (khint_t)(0); __i != ((channels->table)->n_buckets); ++__i) { if (!(!(((channels->table)->flags[(__i)>>4]>>(((__i)&0xfU)<<1))&3))) continue; (data) = ((channels->table)->vals[__i]); { set_ref_in_callback_reader(&data->on_data, copyID, 
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   , 
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ); set_ref_in_callback_reader(&data->on_stderr, copyID, 
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   , 
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ); set_ref_in_callback(&data->on_exit, copyID, 
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   , 
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 4971 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ); }; } }




  }


  {
    timer_T *timer;
    { khint_t __i; for (__i = (khint_t)(0); __i != ((timers->table)->n_buckets); ++__i) { if (!(!(((timers->table)->flags[(__i)>>4]>>(((__i)&0xfU)<<1))&3))) continue; (timer) = ((timers->table)->vals[__i]); { set_ref_in_callback(&timer->callback, copyID, 
# 4981 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 4981 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   , 
# 4981 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 4981 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ); }; } }


  }


  abort = abort || set_ref_in_func_args(copyID);


  abort = abort || set_ref_in_ht(&vimvardict.dv_hashtab, copyID, 
# 4990 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            ((void *)0)
# 4990 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                );


  if (p_hi) {
    for (uint8_t i = 0; i < (HIST_DEBUG + 1); i++) {
      const void *iter = 
# 4995 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 4995 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;
      do {
        histentry_T hist;
        iter = hist_iter(iter, i, 
# 4998 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 0
# 4998 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      , &hist);
        if (hist.hisstr != 
# 4999 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
# 4999 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ) {
          abort = abort || set_ref_list(hist.additional_elements, copyID);
        }
      } while (iter != 
# 5002 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 5002 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          );
    }
  }


  {
    SearchPattern pat;
    get_search_pattern(&pat);
    abort = abort || set_ref_dict(pat.additional_data, copyID);
    get_substitute_pattern(&pat);
    abort = abort || set_ref_dict(pat.additional_data, copyID);
  }


  {
    SubReplacementString sub;
    sub_get_replacement(&sub);
    abort = abort || set_ref_list(sub.additional_elements, copyID);
  }

  abort = abort || set_ref_in_quickfix(copyID);

  
# 5024 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 5024 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      did_free = 
# 5024 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 0
# 5024 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
  if (!abort) {

    did_free = free_unref_items(copyID);



    did_free = free_unref_funccal(copyID, testing) || did_free;
  } else if (p_verbose > 0) {
    verb_msg(gettext((char *)("Not enough memory to set references, garbage collection aborted!"))
                                                                           );
  }

  return did_free;
}







static int free_unref_items(int copyID)
{
  
# 5048 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 5048 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      did_free = 
# 5048 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 0
# 5048 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;




  tv_in_free_unref_items = 
# 5053 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          1
# 5053 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ;






  for (dict_T *dd = gc_first_dict; dd != 
# 5060 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        ((void *)0)
# 5060 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            ; dd = dd->dv_used_next) {
    if ((dd->dv_copyID & (~0x1)) != (copyID & (~0x1))) {



      tv_dict_free_contents(dd);
      did_free = 
# 5066 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 5066 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
    }
  }




  for (list_T *ll = gc_first_list; ll != 
# 5073 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        ((void *)0)
# 5073 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            ; ll = ll->lv_used_next) {
    if ((tv_list_copyid(ll) & (~0x1)) != (copyID & (~0x1))
        && !tv_list_has_watchers(ll)) {



      tv_list_free_contents(ll);
      did_free = 
# 5080 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 5080 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
    }
  }


  dict_T *dd_next;
  for (dict_T *dd = gc_first_dict; dd != 
# 5086 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        ((void *)0)
# 5086 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            ; dd = dd_next) {
    dd_next = dd->dv_used_next;
    if ((dd->dv_copyID & (~0x1)) != (copyID & (~0x1))) {
      tv_dict_free_dict(dd);
    }
  }

  list_T *ll_next;
  for (list_T *ll = gc_first_list; ll != 
# 5094 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        ((void *)0)
# 5094 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            ; ll = ll_next) {
    ll_next = ll->lv_used_next;
    if ((ll->lv_copyID & (~0x1)) != (copyID & (~0x1))
        && !tv_list_has_watchers(ll)) {



      tv_list_free_list(ll);
    }
  }
  tv_in_free_unref_items = 
# 5104 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          0
# 5104 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ;
  return did_free;
}
# 5115 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 5115 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 5115 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    set_ref_in_ht(hashtab_T *ht, int copyID, list_stack_T **list_stack)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  
# 5118 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 5118 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      abort = 
# 5118 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 5118 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
  ht_stack_T *ht_stack = 
# 5119 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 5119 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;

  hashtab_T *cur_ht = ht;
  for (;;) {
    if (!abort) {



      do { hashtab_T *const hiht_ = (cur_ht); size_t hitodo_ = hiht_->ht_used; for (hashitem_T *hi = hiht_->ht_array; hitodo_; hi++) { if (!((hi)->hi_key == 
# 5127 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void *)0) 
# 5127 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     || (hi)->hi_key == (char_u *)&hash_removed)) { hitodo_--; { { abort = abort || set_ref_in_item( &((dictitem_T *)((hi)->hi_key - 
# 5127 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     __builtin_offsetof (
# 5127 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     dictitem_T
# 5127 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     , 
# 5127 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     di_key
# 5127 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     )
# 5127 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     ))->di_tv, copyID, &ht_stack, list_stack); } } } } } while (0)


        ;
    }

    if (ht_stack == 
# 5133 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 5133 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {
      break;
    }


    cur_ht = ht_stack->ht;
    ht_stack_T *tempitem = ht_stack;
    ht_stack = ht_stack->prev;
    xfree(tempitem);
  }

  return abort;
}
# 5154 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 5154 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 5154 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    set_ref_in_list(list_T *l, int copyID, ht_stack_T **ht_stack)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  
# 5157 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 5157 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      abort = 
# 5157 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 5157 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
  list_stack_T *list_stack = 
# 5158 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 5158 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ;

  list_T *cur_l = l;
  for (;;) {



    do { list_T *const l_ = (cur_l); ; if (l_ != 
# 5165 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 5165 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ) { for ( listitem_T *li = l_->lv_first; li != 
# 5165 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 5165 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ; li = li->li_next) { { if (abort) { break; } abort = set_ref_in_item((&(li)->li_tv), copyID, ht_stack, &list_stack); } } } } while (0)





      ;

    if (list_stack == 
# 5173 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 5173 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
      break;
    }


    cur_l = list_stack->list;
    list_stack_T *tempitem = list_stack;
    list_stack = list_stack->prev;
    xfree(tempitem);
  }

  return abort;
}
# 5195 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 5195 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 5195 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    set_ref_in_item(typval_T *tv, int copyID, ht_stack_T **ht_stack,
                     list_stack_T **list_stack)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  
# 5199 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 5199 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      abort = 
# 5199 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 5199 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;

  switch (tv->v_type) {
    case VAR_DICT: {
      dict_T *dd = tv->vval.v_dict;
      if (dd != 
# 5204 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 5204 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    && dd->dv_copyID != copyID) {

        dd->dv_copyID = copyID;
        if (ht_stack == 
# 5207 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 5207 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ) {
          abort = set_ref_in_ht(&dd->dv_hashtab, copyID, list_stack);
        } else {
          ht_stack_T *newitem = try_malloc(sizeof(ht_stack_T));
          if (newitem == 
# 5211 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 5211 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ) {
            abort = 
# 5212 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   1
# 5212 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
          } else {
            newitem->ht = &dd->dv_hashtab;
            newitem->prev = *ht_stack;
            *ht_stack = newitem;
          }
        }

        QUEUE *w = 
# 5220 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 5220 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
        DictWatcher *watcher = 
# 5221 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              ((void *)0)
# 5221 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  ;
        for ( (w) = (&dd->watchers)->next; (w) != (&dd->watchers); (w) = (w)->next) {
          watcher = tv_dict_watcher_node_data(w);
          set_ref_in_callback(&watcher->callback, copyID, ht_stack, list_stack);
        }
      }
      break;
    }

    case VAR_LIST: {
      list_T *ll = tv->vval.v_list;
      if (ll != 
# 5232 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 5232 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    && ll->lv_copyID != copyID) {

        ll->lv_copyID = copyID;
        if (list_stack == 
# 5235 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 5235 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ) {
          abort = set_ref_in_list(ll, copyID, ht_stack);
        } else {
          list_stack_T *newitem = try_malloc(sizeof(list_stack_T));
          if (newitem == 
# 5239 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 5239 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ) {
            abort = 
# 5240 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   1
# 5240 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
          } else {
            newitem->list = ll;
            newitem->prev = *list_stack;
            *list_stack = newitem;
          }
        }
      }
      break;
    }

    case VAR_PARTIAL: {
      partial_T *pt = tv->vval.v_partial;


      if (pt != 
# 5255 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 5255 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ) {
        abort = set_ref_in_func(pt->pt_name, pt->pt_func, copyID);
        if (pt->pt_dict != 
# 5257 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
# 5257 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ) {
          typval_T dtv;

          dtv.v_type = VAR_DICT;
          dtv.vval.v_dict = pt->pt_dict;
          abort = abort || set_ref_in_item(&dtv, copyID, ht_stack, list_stack);
        }

        for (int i = 0; i < pt->pt_argc; i++) {
          abort = abort || set_ref_in_item(&pt->pt_argv[i], copyID,
                                           ht_stack, list_stack);
        }
      }
      break;
    }
    case VAR_FUNC:
      abort = set_ref_in_func(tv->vval.v_string, 
# 5273 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                ((void *)0)
# 5273 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    , copyID);
      break;
    case VAR_UNKNOWN:
    case VAR_SPECIAL:
    case VAR_FLOAT:
    case VAR_NUMBER:
    case VAR_STRING: {
      break;
    }
  }
  return abort;
}






static inline 
# 5291 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             _Bool 
# 5291 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  set_ref_in_fmark(fmark_T fm, int copyID)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (fm.additional_data != 
# 5294 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
      
# 5295 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     && fm.additional_data->dv_copyID != copyID) {
    fm.additional_data->dv_copyID = copyID;
    return set_ref_in_ht(&fm.additional_data->dv_hashtab, copyID, 
# 5297 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 ((void *)0)
# 5297 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     );
  }
  return 
# 5299 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        0
# 5299 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
}




static inline 
# 5305 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             _Bool 
# 5305 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  set_ref_list(list_T *list, int copyID)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (list != 
# 5308 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 5308 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
    typval_T tv = (typval_T) {
      .v_type = VAR_LIST,
      .vval = { .v_list = list }
    };
    return set_ref_in_item(&tv, copyID, 
# 5313 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 5313 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , 
# 5313 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             ((void *)0)
# 5313 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 );
  }
  return 
# 5315 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        0
# 5315 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
}




static inline 
# 5321 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             _Bool 
# 5321 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  set_ref_dict(dict_T *dict, int copyID)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (dict != 
# 5324 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 5324 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
    typval_T tv = (typval_T) {
      .v_type = VAR_DICT,
      .vval = { .v_dict = dict }
    };
    return set_ref_in_item(&tv, copyID, 
# 5329 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 5329 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , 
# 5329 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             ((void *)0)
# 5329 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 );
  }
  return 
# 5331 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        0
# 5331 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
}





static int dict_get_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  dict_T *d = 
# 5340 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 5340 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
  typval_T tvkey;
  typval_T tv;
  char_u *key = 
# 5343 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 5343 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
  dictitem_T *item;
  char_u *start = skipwhite(*arg + 1);
  char buf[NUMBUFLEN];
# 5355 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
  if (*start != '}') {
    if (eval1(&start, &tv, 
# 5356 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          0
# 5356 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ) == 0) {
      return 0;
    }
    if (*start == '}') {
      return 2;
    }
  }

  if (evaluate) {
    d = tv_dict_alloc();
  }
  tvkey.v_type = VAR_UNKNOWN;
  tv.v_type = VAR_UNKNOWN;

  *arg = skipwhite(*arg + 1);
  while (**arg != '}' && **arg != '\000') {
    if (eval1(arg, &tvkey, evaluate) == 0) {
      goto failret;
    }
    if (**arg != ':') {
      emsgf((const char *) (gettext((char *)("E720: Missing colon in Dictionary: %s"))), (*arg));
      tv_clear(&tvkey);
      goto failret;
    }
    if (evaluate) {
      key = (char_u *)tv_get_string_buf_chk(&tvkey, buf);
      if (key == 
# 5382 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 5382 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {

        tv_clear(&tvkey);
        goto failret;
      }
    }

    *arg = skipwhite(*arg + 1);
    if (eval1(arg, &tv, evaluate) == 0) {
      if (evaluate) {
        tv_clear(&tvkey);
      }
      goto failret;
    }
    if (evaluate) {
      item = tv_dict_find(d, (const char *)key, -1);
      if (item != 
# 5398 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 5398 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ) {
        emsgf((const char *) (gettext((char *)("E721: Duplicate key in Dictionary: \"%s\""))), (key));
        tv_clear(&tvkey);
        tv_clear(&tv);
        goto failret;
      }
      item = tv_dict_item_alloc((const char *)key);
      item->di_tv = tv;
      item->di_tv.v_lock = 0;
      if (tv_dict_add(d, item) == 0) {
        tv_dict_item_free(item);
      }
    }
    tv_clear(&tvkey);

    if (**arg == '}')
      break;
    if (**arg != ',') {
      emsgf((const char *) (gettext((char *)("E722: Missing comma in Dictionary: %s"))), (*arg));
      goto failret;
    }
    *arg = skipwhite(*arg + 1);
  }

  if (**arg != '}') {
    emsgf((const char *) (gettext((char *)("E723: Missing end of Dictionary '}': %s"))), (*arg));
failret:
    if (d != 
# 5425 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 5425 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
      tv_dict_free(d);
    }
    return 0;
  }

  *arg = skipwhite(*arg + 1);
  if (evaluate) {
    tv_dict_set_ret(rettv, d);
  }

  return 1;
}
# 5448 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
size_t string2float(const char *const text, float_T *const ret_value)
  FUNC_ATTR_NONNULL_ALL
{
  char *s = 
# 5451 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0)
# 5451 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;


  if (strncasecmp((char *)(text), (char *)("inf"), (size_t)(3)) == 0) {
    *ret_value = 
# 5455 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                (__builtin_inff ())
# 5455 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
    return 3;
  }
  if (strncasecmp((char *)(text), (char *)("-inf"), (size_t)(3)) == 0) {
    *ret_value = -
# 5459 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 (__builtin_inff ())
# 5459 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;
    return 4;
  }
  if (strncasecmp((char *)(text), (char *)("nan"), (size_t)(3)) == 0) {
    *ret_value = 
# 5463 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                (__builtin_nanf (""))
# 5463 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
    return 3;
  }
  *ret_value = strtod(text, &s);
  return (size_t) (s - text);
}
# 5477 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static int get_env_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  char_u *name;
  char_u *string = 
# 5480 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 5480 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
  int len;
  int cc;

  ++*arg;
  name = *arg;
  len = get_env_len((const char_u **)arg);

  if (evaluate) {
    if (len == 0) {
      return 0;
    }
    cc = name[len];
    name[len] = '\000';

    string = (char_u *)vim_getenv((char *)name);
    if (string == 
# 5496 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0) 
# 5496 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      || *string == '\000') {
      xfree(string);


      string = expand_env_save(name - 1);
      if (string != 
# 5501 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0) 
# 5501 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        && *string == '$') {
        do { void **ptr_ = (void **)&(string); xfree(*ptr_); *ptr_ = 
# 5502 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0)
# 5502 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       ; (void)(*ptr_); } while (0);
      }
    }
    name[len] = cc;
    rettv->v_type = VAR_STRING;
    rettv->vval.v_string = string;
  }

  return 1;
}


void get_arglist_as_rettv(aentry_T *arglist, int argcount,
                          typval_T *rettv)
{
  tv_list_alloc_ret(rettv, argcount);
  if (arglist != 
# 5518 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 5518 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
    for (int idx = 0; idx < argcount; idx++) {
      tv_list_append_string(rettv->vval.v_list,
                            (const char *)alist_name(&arglist[idx]), -1);
    }
  }
}


void prepare_assert_error(garray_T *gap)
{
  char buf[NUMBUFLEN];

  ga_init(gap, 1, 100);
  if (sourcing_name != 
# 5532 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 5532 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
    ga_concat(gap, sourcing_name);
    if (sourcing_lnum > 0) {
      ga_concat(gap, (char_u *)" ");
    }
  }
  if (sourcing_lnum > 0) {
    vim_snprintf(buf, ((sizeof(buf)/sizeof((buf)[0])) / ((size_t)(!(sizeof(buf) % sizeof((buf)[0]))))), "line %" 
# 5539 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               "l" "d"
# 5539 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     , (int64_t)sourcing_lnum);
    ga_concat(gap, (char_u *)buf);
  }
  if (sourcing_name != 
# 5542 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0) 
# 5542 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           || sourcing_lnum > 0) {
    ga_concat(gap, (char_u *)": ");
  }
}



static void ga_concat_esc(garray_T *gap, char_u *str)
{
  char_u *p;
  char_u buf[NUMBUFLEN];

  if (str == 
# 5554 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 5554 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    ga_concat(gap, (char_u *)"NULL");
    return;
  }

  for (p = str; *p != '\000'; p++) {
    switch (*p) {
      case '\010': ga_concat(gap, (char_u *)"\\b"); break;
      case '\033': ga_concat(gap, (char_u *)"\\e"); break;
      case '\014': ga_concat(gap, (char_u *)"\\f"); break;
      case '\012': ga_concat(gap, (char_u *)"\\n"); break;
      case '\011': ga_concat(gap, (char_u *)"\\t"); break;
      case '\015': ga_concat(gap, (char_u *)"\\r"); break;
      case '\\': ga_concat(gap, (char_u *)"\\\\"); break;
      default:
        if (*p < ' ') {
          vim_snprintf((char *)buf, NUMBUFLEN, "\\x%02x", *p);
          ga_concat(gap, buf);
        } else {
          ga_append(gap, *p);
        }
        break;
    }
  }
}


void fill_assert_error(garray_T *gap, typval_T *opt_msg_tv,
                       char_u *exp_str, typval_T *exp_tv,
                       typval_T *got_tv, assert_type_T atype)
{
  char_u *tofree;

  if (opt_msg_tv->v_type != VAR_UNKNOWN) {
    tofree = (char_u *)encode_tv2echo(opt_msg_tv, 
# 5588 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                 ((void *)0)
# 5588 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     );
    ga_concat(gap, tofree);
    xfree(tofree);
    ga_concat(gap, (char_u *)": ");
  }

  if (atype == ASSERT_MATCH || atype == ASSERT_NOTMATCH) {
    ga_concat(gap, (char_u *)"Pattern ");
  } else if (atype == ASSERT_NOTEQUAL) {
    ga_concat(gap, (char_u *)"Expected not equal to ");
  } else {
    ga_concat(gap, (char_u *)"Expected ");
  }

  if (exp_str == 
# 5602 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 5602 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
    tofree = (char_u *)encode_tv2string(exp_tv, 
# 5603 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               ((void *)0)
# 5603 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                   );
    ga_concat_esc(gap, tofree);
    xfree(tofree);
  } else {
    ga_concat_esc(gap, exp_str);
  }

  if (atype != ASSERT_NOTEQUAL) {
    if (atype == ASSERT_MATCH) {
      ga_concat(gap, (char_u *)" does not match ");
    } else if (atype == ASSERT_NOTMATCH) {
      ga_concat(gap, (char_u *)" does match ");
    } else {
      ga_concat(gap, (char_u *)" but got ");
    }
    tofree = (char_u *)encode_tv2string(got_tv, 
# 5618 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               ((void *)0)
# 5618 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                   );
    ga_concat_esc(gap, tofree);
    xfree(tofree);
  }
}


void assert_error(garray_T *gap)
{
  struct vimvar *vp = &vimvars[VV_ERRORS];

  if (vp->vv_di.di_tv.v_type != VAR_LIST || vimvars[VV_ERRORS].vv_di.di_tv.vval.v_list == 
# 5629 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 5629 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  ) {

    set_vim_var_list(VV_ERRORS, tv_list_alloc(1));
  }
  tv_list_append_string(vimvars[VV_ERRORS].vv_di.di_tv.vval.v_list,
                        (const char *)gap->ga_data, (ptrdiff_t)gap->ga_len);
}

int assert_equal_common(typval_T *argvars, assert_type_T atype)
  FUNC_ATTR_NONNULL_ALL
{
  garray_T ga;

  if (tv_equal(&argvars[0], &argvars[1], 
# 5642 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        0
# 5642 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             , 
# 5642 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               0
# 5642 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    )
      != (atype == ASSERT_EQUAL)) {
    prepare_assert_error(&ga);
    fill_assert_error(&ga, &argvars[2], 
# 5645 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 5645 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           ,
                      &argvars[0], &argvars[1], atype);
    assert_error(&ga);
    ga_clear(&ga);
    return 1;
  }
  return 0;
}

int assert_equalfile(typval_T *argvars)
  FUNC_ATTR_NONNULL_ALL
{
  char buf1[NUMBUFLEN];
  char buf2[NUMBUFLEN];
  const char *const fname1 = tv_get_string_buf_chk(&argvars[0], buf1);
  const char *const fname2 = tv_get_string_buf_chk(&argvars[1], buf2);
  garray_T ga;

  if (fname1 == 
# 5663 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 5663 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    || fname2 == 
# 5663 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 5663 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     ) {
    return 0;
  }

  IObuff[0] = '\000';
  FILE *const fd1 = os_fopen(fname1, "rb");
  if (fd1 == 
# 5669 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 5669 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    snprintf((char *)IObuff, (1024+1), (char *)e_notread, fname1);
  } else {
    FILE *const fd2 = os_fopen(fname2, "rb");
    if (fd2 == 
# 5673 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 5673 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ) {
      fclose(fd1);
      snprintf((char *)IObuff, (1024+1), (char *)e_notread, fname2);
    } else {
      for (int64_t count = 0; ; count++) {
        const int c1 = fgetc(fd1);
        const int c2 = fgetc(fd2);
        if (c1 == 
# 5680 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 (-1)
# 5680 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
          if (c2 != 
# 5681 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   (-1)
# 5681 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
            strcpy((char *)(IObuff), (char *)("first file is shorter"));
          }
          break;
        } else if (c2 == 
# 5685 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        (-1)
# 5685 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ) {
          strcpy((char *)(IObuff), (char *)("second file is shorter"));
          break;
        } else if (c1 != c2) {
          snprintf((char *)IObuff, (1024+1),
                   "difference at byte %" 
# 5690 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         "l" "d"
# 5690 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                               , count);
          break;
        }
      }
      fclose(fd1);
      fclose(fd2);
    }
  }
  if (IObuff[0] != '\000') {
    prepare_assert_error(&ga);
    ga_concat(&ga, IObuff);
    assert_error(&ga);
    ga_clear(&ga);
    return 1;
  }
  return 0;
}

int assert_inrange(typval_T *argvars)
  FUNC_ATTR_NONNULL_ALL
{
  
# 5711 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 5711 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      error = 
# 5711 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 5711 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
  const varnumber_T lower = tv_get_number_chk(&argvars[0], &error);
  const varnumber_T upper = tv_get_number_chk(&argvars[1], &error);
  const varnumber_T actual = tv_get_number_chk(&argvars[2], &error);

  if (error) {
    return 0;
  }
  if (actual < lower || actual > upper) {
    garray_T ga;
    prepare_assert_error(&ga);

    char msg[55];
    vim_snprintf(msg, sizeof(msg),
                 "range %" 
# 5725 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          "l" "d" 
# 5725 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        " - %" 
# 5725 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               "l" "d" 
# 5725 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             ",",
                 lower, upper);
    fill_assert_error(&ga, &argvars[3], (char_u *)msg, 
# 5727 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      ((void *)0)
# 5727 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          , &argvars[2],
                      ASSERT_INRANGE);
    assert_error(&ga);
    ga_clear(&ga);
    return 1;
  }
  return 0;
}


int assert_bool(typval_T *argvars, 
# 5737 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  _Bool 
# 5737 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                       is_true)
  FUNC_ATTR_NONNULL_ALL
{
  
# 5740 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 5740 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      error = 
# 5740 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 5740 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
  garray_T ga;

  if ((argvars[0].v_type != VAR_NUMBER
       || (tv_get_number_chk(&argvars[0], &error) == 0) == is_true
       || error)
      && (argvars[0].v_type != VAR_SPECIAL
          || (argvars[0].vval.v_special
              != (SpecialVarValue) (is_true
                                    ? kSpecialVarTrue
                                    : kSpecialVarFalse)))) {
    prepare_assert_error(&ga);
    fill_assert_error(&ga, &argvars[1],
                      (char_u *)(is_true ? "True" : "False"),
                      
# 5754 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 5754 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         , &argvars[0], ASSERT_OTHER);
    assert_error(&ga);
    ga_clear(&ga);
    return 1;
  }
  return 0;
}

int assert_exception(typval_T *argvars)
  FUNC_ATTR_NONNULL_ALL
{
  garray_T ga;

  const char *const error = tv_get_string_chk(&argvars[0]);
  if (vimvars[VV_EXCEPTION].vv_di.di_tv.vval.v_string == 
# 5768 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     ((void *)0)
# 5768 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                         ) {
    prepare_assert_error(&ga);
    ga_concat(&ga, (char_u *)"v:exception is not set");
    assert_error(&ga);
    ga_clear(&ga);
    return 1;
  } else if (error != 
# 5774 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
             
# 5775 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            && strstr((char *)vimvars[VV_EXCEPTION].vv_di.di_tv.vval.v_string, error) == 
# 5775 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                      ((void *)0)
# 5775 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                          ) {
    prepare_assert_error(&ga);
    fill_assert_error(&ga, &argvars[1], 
# 5777 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 5777 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , &argvars[0],
                      &vimvars[VV_EXCEPTION].vv_di.di_tv, ASSERT_OTHER);
    assert_error(&ga);
    ga_clear(&ga);
    return 1;
  }
  return 0;
}

int assert_fails(typval_T *argvars)
  FUNC_ATTR_NONNULL_ALL
{
  const char *const cmd = tv_get_string_chk(&argvars[0]);
  garray_T ga;
  int ret = 0;
  int save_trylevel = trylevel;


  trylevel = 0;
  called_emsg = 
# 5796 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               0
# 5796 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
  suppress_errthrow = 
# 5797 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     1
# 5797 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;
  emsg_silent = 
# 5798 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               1
# 5798 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;

  do_cmdline_cmd(cmd);
  if (!called_emsg) {
    prepare_assert_error(&ga);
    ga_concat(&ga, (const char_u *)"command did not fail: ");
    if (argvars[1].v_type != VAR_UNKNOWN
        && argvars[2].v_type != VAR_UNKNOWN) {
      char *const tofree = encode_tv2echo(&argvars[2], 
# 5806 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      ((void *)0)
# 5806 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          );
      ga_concat(&ga, (char_u *)tofree);
      xfree(tofree);
    } else {
      ga_concat(&ga, (const char_u *)cmd);
    }
    assert_error(&ga);
    ga_clear(&ga);
    ret = 1;
  } else if (argvars[1].v_type != VAR_UNKNOWN) {
    char buf[NUMBUFLEN];
    const char *const error = tv_get_string_buf_chk(&argvars[1], buf);

    if (error == 
# 5819 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
        
# 5820 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       || strstr((char *)vimvars[VV_ERRMSG].vv_di.di_tv.vval.v_string, error) == 
# 5820 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 5820 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  ) {
      prepare_assert_error(&ga);
      fill_assert_error(&ga, &argvars[2], 
# 5822 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         ((void *)0)
# 5822 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             , &argvars[1],
                        &vimvars[VV_ERRMSG].vv_di.di_tv, ASSERT_OTHER);
      assert_error(&ga);
      ga_clear(&ga);
      ret = 1;
    }
  }

  trylevel = save_trylevel;
  called_emsg = 
# 5831 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               0
# 5831 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
  suppress_errthrow = 
# 5832 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     0
# 5832 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ;
  emsg_silent = 
# 5833 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               0
# 5833 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
  emsg_on_display = 
# 5834 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   0
# 5834 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
  set_vim_var_string(VV_ERRMSG, 
# 5835 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 5835 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   , 0);
  return ret;
}

int assert_match_common(typval_T *argvars, assert_type_T atype)
  FUNC_ATTR_NONNULL_ALL
{
  char buf1[NUMBUFLEN];
  char buf2[NUMBUFLEN];
  const char *const pat = tv_get_string_buf_chk(&argvars[0], buf1);
  const char *const text = tv_get_string_buf_chk(&argvars[1], buf2);

  if (pat == 
# 5847 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0) 
# 5847 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 || text == 
# 5847 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 5847 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ) {
    emsg((char_u *)(gettext((char *)(e_invarg))));
  } else if (pattern_match((char_u *)pat, (char_u *)text, 
# 5849 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                         0
# 5849 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                              )
             != (atype == ASSERT_MATCH)) {
    garray_T ga;
    prepare_assert_error(&ga);
    fill_assert_error(&ga, &argvars[2], 
# 5853 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 5853 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , &argvars[0], &argvars[1], atype);
    assert_error(&ga);
    ga_clear(&ga);
    return 1;
  }
  return 0;
}



win_T * find_win_by_nr_or_id(typval_T *vp)
{
  int nr = (int)tv_get_number_chk(vp, 
# 5865 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     ((void *)0)
# 5865 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                         );

  if (nr >= 1000) {
    return win_id2wp(vp);
  }

  return find_win_by_nr(vp, 
# 5871 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 5871 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               );
}




void filter_map(typval_T *argvars, typval_T *rettv, int map)
{
  typval_T *expr;
  list_T *l = 
# 5880 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 5880 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
  dictitem_T *di;
  hashtab_T *ht;
  hashitem_T *hi;
  dict_T *d = 
# 5884 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 5884 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
  typval_T save_val;
  typval_T save_key;
  int rem = 
# 5887 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           0
# 5887 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
  int todo;
  char_u *ermsg = (char_u *)(map ? "map()" : "filter()");
  const char *const arg_errmsg = (map
                                  ? "map() argument"
                                  : "filter() argument");
  int save_did_emsg;
  int idx = 0;

  if (argvars[0].v_type == VAR_LIST) {
    tv_copy(&argvars[0], rettv);
    if ((l = argvars[0].vval.v_list) == 
# 5898 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
        
# 5899 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       || (!map && tv_check_lock(tv_list_locked(l), arg_errmsg,
                                  (
# 5900 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 (18446744073709551615UL)
# 5900 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 )))) {
      return;
    }
  } else if (argvars[0].v_type == VAR_DICT) {
    tv_copy(&argvars[0], rettv);
    if ((d = argvars[0].vval.v_dict) == 
# 5905 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
        
# 5906 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       || (!map && tv_check_lock(d->dv_lock, arg_errmsg, (
# 5906 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                         (18446744073709551615UL)
# 5906 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         )))) {
      return;
    }
  } else {
    emsgf((const char *) (gettext((char *)(e_listdictarg))), (ermsg));
    return;
  }

  expr = &argvars[1];



  if (expr->v_type != VAR_UNKNOWN) {
    prepare_vimvar(VV_VAL, &save_val);



    save_did_emsg = did_emsg;
    did_emsg = 0;

    prepare_vimvar(VV_KEY, &save_key);
    if (argvars[0].v_type == VAR_DICT) {
      vimvars[VV_KEY].vv_di.di_tv.v_type = VAR_STRING;

      ht = &d->dv_hashtab;
      hash_lock(ht);
      todo = (int)ht->ht_used;
      for (hi = ht->ht_array; todo > 0; ++hi) {
        if (!((hi)->hi_key == 
# 5934 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0) 
# 5934 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            || (hi)->hi_key == (char_u *)&hash_removed)) {
          --todo;

          di = ((dictitem_T *)((hi)->hi_key - 
# 5937 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              __builtin_offsetof (
# 5937 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              dictitem_T
# 5937 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              , 
# 5937 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              di_key
# 5937 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              )
# 5937 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ));
          if (map
              && (tv_check_lock(di->di_tv.v_lock, arg_errmsg, (
# 5939 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                             (18446744073709551615UL)
# 5939 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             ))
                  || var_check_ro(di->di_flags, arg_errmsg, (
# 5940 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           (18446744073709551615UL)
# 5940 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           )))) {
            break;
          }

          vimvars[VV_KEY].vv_di.di_tv.vval.v_string = vim_strsave(di->di_key);
          int r = filter_map_one(&di->di_tv, expr, map, &rem);
          tv_clear(&vimvars[VV_KEY].vv_di.di_tv);
          if (r == 0 || did_emsg) {
            break;
          }
          if (!map && rem) {
            if (var_check_fixed(di->di_flags, arg_errmsg, (
# 5951 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                         (18446744073709551615UL)
# 5951 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         ))
                || var_check_ro(di->di_flags, arg_errmsg, (
# 5952 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                         (18446744073709551615UL)
# 5952 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         ))) {
              break;
            }
            tv_dict_item_remove(d, di);
          }
        }
      }
      hash_unlock(ht);
    } else {
      
# 5961 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void) sizeof ((
# 5961 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     argvars[0].v_type == VAR_LIST
# 5961 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 5961 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     argvars[0].v_type == VAR_LIST
# 5961 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ) ; else __assert_fail (
# 5961 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     "argvars[0].v_type == VAR_LIST"
# 5961 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 5961, __extension__ __PRETTY_FUNCTION__); }))
# 5961 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                          ;
      vimvars[VV_KEY].vv_di.di_tv.v_type = VAR_NUMBER;

      for (listitem_T *li = tv_list_first(l); li != 
# 5964 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   ((void *)0)
# 5964 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                       ;) {
        if (map
            && tv_check_lock((&(li)->li_tv)->v_lock, arg_errmsg,
                             (
# 5967 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            (18446744073709551615UL)
# 5967 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ))) {
          break;
        }
        vimvars[VV_KEY].vv_di.di_tv.vval.v_number = idx;
        if (filter_map_one((&(li)->li_tv), expr, map, &rem) == 0
            || did_emsg) {
          break;
        }
        if (!map && rem) {
          li = tv_list_item_remove(l, li);
        } else {
          li = ((li)->li_next);
        }
        idx++;
      }
    }

    restore_vimvar(VV_KEY, &save_key);
    restore_vimvar(VV_VAL, &save_val);

    did_emsg |= save_did_emsg;
  }
}

static int filter_map_one(typval_T *tv, typval_T *expr, int map, int *remp)
  FUNC_ATTR_NONNULL_ARG(1, 2)
{
  typval_T rettv;
  typval_T argv[3];
  int retval = 0;

  tv_copy(tv, &vimvars[VV_VAL].vv_di.di_tv);
  argv[0] = vimvars[VV_KEY].vv_di.di_tv;
  argv[1] = vimvars[VV_VAL].vv_di.di_tv;
  if (eval_expr_typval(expr, argv, 2, &rettv) == 0) {
    goto theend;
  }
  if (map) {

    tv_clear(tv);
    rettv.v_lock = 0;
    *tv = rettv;
  } else {
    
# 6010 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 6010 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        error = 
# 6010 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 6010 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;


    *remp = (tv_get_number_chk(&rettv, &error) == 0);
    tv_clear(&rettv);


    if (error) {
      goto theend;
    }
  }
  retval = 1;
theend:
  tv_clear(&vimvars[VV_VAL].vv_di.di_tv);
  return retval;
}

void common_function(typval_T *argvars, typval_T *rettv,
                     
# 6028 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    _Bool 
# 6028 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         is_funcref, FunPtr fptr)
{
  char_u *s;
  char_u *name;
  
# 6032 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 6032 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      use_string = 
# 6032 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   0
# 6032 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
  partial_T *arg_pt = 
# 6033 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 6033 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;
  char_u *trans_name = 
# 6034 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 6034 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ;

  if (argvars[0].v_type == VAR_FUNC) {

    s = argvars[0].vval.v_string;
  } else if (argvars[0].v_type == VAR_PARTIAL
             && argvars[0].vval.v_partial != 
# 6040 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            ((void *)0)
# 6040 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                ) {

    arg_pt = argvars[0].vval.v_partial;
    s = partial_name(arg_pt);
  } else {

    s = (char_u *)tv_get_string(&argvars[0]);
    use_string = 
# 6047 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 6047 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
  }

  if ((use_string && vim_strchr(s, '#') == 
# 6050 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    ((void *)0)
# 6050 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        ) || is_funcref) {
    name = s;
    trans_name = trans_function_name(&name, 
# 6052 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           0
# 6052 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                ,
                                     TFN_INT | TFN_QUIET | TFN_NO_AUTOLOAD
                                     | TFN_NO_DEREF, 
# 6054 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    ((void *)0)
# 6054 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        , 
# 6054 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          ((void *)0)
# 6054 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                              );
    if (*name != '\000') {
      s = 
# 6056 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         ((void *)0)
# 6056 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
    }
  }
  if (s == 
# 6059 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0) 
# 6059 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               || *s == '\000' || (use_string && ascii_isdigit(*s))
      || (is_funcref && trans_name == 
# 6060 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     ((void *)0)
# 6060 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                         )) {
    emsgf(gettext((char *)(e_invarg2)), (use_string
                         ? tv_get_string(&argvars[0])
                         : (const char *)s));

  } else if (trans_name != 
# 6065 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
             
# 6066 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            && (is_funcref ? find_func(trans_name) == 
# 6066 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      ((void *)0)
                 
# 6067 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                : !translated_function_exists((const char *)trans_name))) {
    emsgf(gettext((char *)("E700: Unknown function: %s")), s);
  } else {
    int dict_idx = 0;
    int arg_idx = 0;
    list_T *list = 
# 6072 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 6072 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
    if (strncmp((char *)(s), (char *)("s:"), (size_t)(2)) == 0 || strncmp((char *)(s), (char *)("<SID>"), (size_t)(5)) == 0) {
      char sid_buf[25];
      int off = *s == 's' ? 2 : 5;





      snprintf(sid_buf, sizeof(sid_buf), "<SNR>%" 
# 6081 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                 "l" "d" 
# 6081 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        "_",
               (int64_t)current_sctx.sc_sid);
      name = xmalloc(strlen((char *)(sid_buf)) + strlen((char *)(s + off)) + 1);
      strcpy((char *)(name), (char *)(sid_buf));
      strcat((char *)(name), (char *)(s + off));
    } else {
      name = vim_strsave(s);
    }

    if (argvars[1].v_type != VAR_UNKNOWN) {
      if (argvars[2].v_type != VAR_UNKNOWN) {

        arg_idx = 1;
        dict_idx = 2;
      } else if (argvars[1].v_type == VAR_DICT) {

        dict_idx = 1;
      } else {

        arg_idx = 1;
      }
      if (dict_idx > 0) {
        if (argvars[dict_idx].v_type != VAR_DICT) {
          emsg((char_u *)(gettext((char *)("E922: expected a dict"))));
          xfree(name);
          goto theend;
        }
        if (argvars[dict_idx].vval.v_dict == 
# 6108 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            ((void *)0)
# 6108 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                ) {
          dict_idx = 0;
        }
      }
      if (arg_idx > 0) {
        if (argvars[arg_idx].v_type != VAR_LIST) {
          emsg((char_u *)(gettext((char *)("E923: Second argument of function() must be " "a list or a dict"))))
                                     ;
          xfree(name);
          goto theend;
        }
        list = argvars[arg_idx].vval.v_list;
        if (tv_list_len(list) == 0) {
          arg_idx = 0;
        } else if (tv_list_len(list) > 20) {
          emsg_funcname((char *)e_toomanyarg, name);
          xfree(name);
          goto theend;
        }
      }
    }
    if (dict_idx > 0 || arg_idx > 0 || arg_pt != 
# 6129 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                ((void *)0) 
# 6129 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     || is_funcref) {
      partial_T *const pt = xcalloc(1, sizeof(*pt));


      if (arg_idx > 0 || (arg_pt != 
# 6133 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                   ((void *)0) 
# 6133 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        && arg_pt->pt_argc > 0)) {
        const int arg_len = (arg_pt == 
# 6134 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                      ((void *)0) 
# 6134 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           ? 0 : arg_pt->pt_argc);
        const int lv_len = tv_list_len(list);

        pt->pt_argc = arg_len + lv_len;
        pt->pt_argv = xmalloc(sizeof(pt->pt_argv[0]) * pt->pt_argc);
        int i = 0;
        for (; i < arg_len; i++) {
          tv_copy(&arg_pt->pt_argv[i], &pt->pt_argv[i]);
        }
        if (lv_len > 0) {
          do { list_T *const l_ = (list); ; if (l_ != 
# 6144 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         ((void *)0)
# 6144 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
         ) { for ( listitem_T *li = l_->lv_first; li != 
# 6144 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         ((void *)0)
# 6144 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
         ; li = li->li_next) { { tv_copy((&(li)->li_tv), &pt->pt_argv[i++]); } } } } while (0)

            ;
        }
      }



      if (dict_idx > 0) {

        pt->pt_dict = argvars[dict_idx].vval.v_dict;
        (pt->pt_dict->dv_refcount)++;
      } else if (arg_pt != 
# 6156 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
# 6156 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ) {


        pt->pt_dict = arg_pt->pt_dict;
        pt->pt_auto = arg_pt->pt_auto;
        if (pt->pt_dict != 
# 6161 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
# 6161 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ) {
          (pt->pt_dict->dv_refcount)++;
        }
      }

      pt->pt_refcount = 1;
      if (arg_pt != 
# 6167 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0) 
# 6167 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        && arg_pt->pt_func != 
# 6167 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                              ((void *)0)
# 6167 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                  ) {
        pt->pt_func = arg_pt->pt_func;
        func_ptr_ref(pt->pt_func);
        xfree(name);
      } else if (is_funcref) {
        pt->pt_func = find_func(trans_name);
        func_ptr_ref(pt->pt_func);
        xfree(name);
      } else {
        pt->pt_name = name;
        func_ref(name);
      }

      rettv->v_type = VAR_PARTIAL;
      rettv->vval.v_partial = pt;
    } else {

      rettv->v_type = VAR_FUNC;
      rettv->vval.v_string = name;
      func_ref(name);
    }
  }
theend:
  xfree(trans_name);
}


dict_T *get_buffer_info(buf_T *buf)
{
  dict_T *const dict = tv_dict_alloc();

  tv_dict_add_nr(dict, ("bufnr"), (sizeof("bufnr") - 1), buf->handle);
  tv_dict_add_str(dict, ("name"), (sizeof("name") - 1),
                  buf->b_ffname != 
# 6200 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0) 
# 6200 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                       ? (const char *)buf->b_ffname : "");
  tv_dict_add_nr(dict, ("lnum"), (sizeof("lnum") - 1),
                 buf == curbuf ? curwin->w_cursor.lnum : buflist_findlnum(buf));
  tv_dict_add_nr(dict, ("linecount"), (sizeof("linecount") - 1), buf->b_ml.ml_line_count);
  tv_dict_add_nr(dict, ("loaded"), (sizeof("loaded") - 1), buf->b_ml.ml_mfp != 
# 6204 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           ((void *)0)
# 6204 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               );
  tv_dict_add_nr(dict, ("listed"), (sizeof("listed") - 1), buf->b_p_bl);
  tv_dict_add_nr(dict, ("changed"), (sizeof("changed") - 1), bufIsChanged(buf));
  tv_dict_add_nr(dict, ("changedtick"), (sizeof("changedtick") - 1), buf_get_changedtick(buf));
  tv_dict_add_nr(dict, ("hidden"), (sizeof("hidden") - 1),
                 buf->b_ml.ml_mfp != 
# 6209 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                    ((void *)0) 
# 6209 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                         && buf->b_nwindows == 0);


  tv_dict_add_dict(dict, ("variables"), (sizeof("variables") - 1), buf->b_vars);


  list_T *const windows = tv_list_alloc(kListLenMayKnow);
  for (tabpage_T *tp = first_tabpage; tp != 
# 6216 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 6216 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; tp = tp->tp_next) for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != 
# 6216 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 6216 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; wp = wp->w_next) {
    if (wp->w_buffer == buf) {
      tv_list_append_number(windows, (varnumber_T)wp->handle);
    }
  }
  tv_dict_add_list(dict, ("windows"), (sizeof("windows") - 1), windows);

  if (buf->b_signlist != 
# 6223 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 6223 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ) {

    tv_dict_add_list(dict, ("signs"), (sizeof("signs") - 1), get_buffer_signs(buf));
  }

  tv_dict_add_nr(dict, ("lastused"), (sizeof("lastused") - 1), buf->b_last_used);

  return dict;
}
# 6243 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
linenr_T tv_get_lnum_buf(const typval_T *const tv,
                         const buf_T *const buf)
  FUNC_ATTR_NONNULL_ARG(1) FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (tv->v_type == VAR_STRING
      && tv->vval.v_string != 
# 6248 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             ((void *)0)
      
# 6249 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     && tv->vval.v_string[0] == '$'
      && buf != 
# 6250 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 6250 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ) {
    return buf->b_ml.ml_line_count;
  }
  return tv_get_number_chk(tv, 
# 6253 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              ((void *)0)
# 6253 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  );
}

void get_qf_loc_list(int is_qf, win_T *wp, typval_T *what_arg,
                     typval_T *rettv)
{
  if (what_arg->v_type == VAR_UNKNOWN) {
    tv_list_alloc_ret(rettv, kListLenMayKnow);
    if (is_qf || wp != 
# 6261 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 6261 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
      (void)get_errorlist(
# 6262 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 6262 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             , wp, -1, rettv->vval.v_list);
    }
  } else {
    tv_dict_alloc_ret(rettv);
    if (is_qf || wp != 
# 6266 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 6266 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
      if (what_arg->v_type == VAR_DICT) {
        dict_T *d = what_arg->vval.v_dict;

        if (d != 
# 6270 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 6270 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
          qf_get_properties(wp, d, rettv->vval.v_dict);
        }
      } else {
        emsg((char_u *)(gettext((char *)(e_dictreq))));
      }
    }
  }
}



dict_T *get_tabpage_info(tabpage_T *tp, int tp_idx)
{
  dict_T *const dict = tv_dict_alloc();

  tv_dict_add_nr(dict, ("tabnr"), (sizeof("tabnr") - 1), tp_idx);

  list_T *const l = tv_list_alloc(kListLenMayKnow);
  for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != 
# 6289 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 6289 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; wp = wp->w_next) {
    tv_list_append_number(l, (varnumber_T)wp->handle);
  }
  tv_dict_add_list(dict, ("windows"), (sizeof("windows") - 1), l);


  tv_dict_add_dict(dict, ("variables"), (sizeof("variables") - 1), tp->tp_vars);

  return dict;
}


dict_T *get_win_info(win_T *wp, int16_t tpnr, int16_t winnr)
{
  dict_T *const dict = tv_dict_alloc();

  tv_dict_add_nr(dict, ("tabnr"), (sizeof("tabnr") - 1), tpnr);
  tv_dict_add_nr(dict, ("winnr"), (sizeof("winnr") - 1), winnr);
  tv_dict_add_nr(dict, ("winid"), (sizeof("winid") - 1), wp->handle);
  tv_dict_add_nr(dict, ("height"), (sizeof("height") - 1), wp->w_height);
  tv_dict_add_nr(dict, ("winrow"), (sizeof("winrow") - 1), wp->w_winrow + 1);
  tv_dict_add_nr(dict, ("topline"), (sizeof("topline") - 1), wp->w_topline);
  tv_dict_add_nr(dict, ("botline"), (sizeof("botline") - 1), wp->w_botline - 1);
  tv_dict_add_nr(dict, ("winbar"), (sizeof("winbar") - 1), wp->w_winbar_height);
  tv_dict_add_nr(dict, ("width"), (sizeof("width") - 1), wp->w_width);
  tv_dict_add_nr(dict, ("bufnr"), (sizeof("bufnr") - 1), wp->w_buffer->handle);
  tv_dict_add_nr(dict, ("wincol"), (sizeof("wincol") - 1), wp->w_wincol + 1);

  tv_dict_add_nr(dict, ("terminal"), (sizeof("terminal") - 1), bt_terminal(wp->w_buffer));
  tv_dict_add_nr(dict, ("quickfix"), (sizeof("quickfix") - 1), bt_quickfix(wp->w_buffer));
  tv_dict_add_nr(dict, ("loclist"), (sizeof("loclist") - 1),
                 (bt_quickfix(wp->w_buffer) && wp->w_llist_ref != 
# 6320 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                 ((void *)0)
# 6320 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     ));


  tv_dict_add_dict(dict, ("variables"), (sizeof("variables") - 1), wp->w_vars);

  return dict;
}


win_T *
find_win_by_nr(
    typval_T *vp,
    tabpage_T *tp
)
{
  int nr = (int)tv_get_number_chk(vp, 
# 6335 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     ((void *)0)
# 6335 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                         );

  if (nr < 0) {
    return 
# 6338 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 6338 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  if (nr == 0) {
    return curwin;
  }


  if (tp == 
# 6346 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0)
# 6346 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ) {
     tp = curtab;
  }

  for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != 
# 6350 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 6350 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; wp = wp->w_next) {
    if (nr >= 1000) {
      if (wp->handle == nr) {
        return wp;
      }
    } else if (--nr <= 0) {
      return wp;
    }
  }
  return 
# 6359 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0)
# 6359 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}


win_T *find_tabwin(typval_T *wvp, typval_T *tvp)
{
  win_T *wp = 
# 6365 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 6365 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
  tabpage_T *tp = 
# 6366 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 6366 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;

  if (wvp->v_type != VAR_UNKNOWN) {
    if (tvp->v_type != VAR_UNKNOWN) {
      long n = tv_get_number(tvp);
      if (n >= 0) {
        tp = find_tabpage(n);
      }
    } else {
      tp = curtab;
    }

    if (tp != 
# 6378 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 6378 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
      wp = find_win_by_nr(wvp, tp);
    }
  } else {
    wp = curwin;
  }

  return wp;
}




void
getwinvar(
    typval_T *argvars,
    typval_T *rettv,
    int off
)
{
  win_T *win, *oldcurwin;
  dictitem_T *v;
  tabpage_T *tp = 
# 6400 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 6400 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
  tabpage_T *oldtabpage = 
# 6401 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 6401 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ;
  
# 6402 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 6402 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      done = 
# 6402 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             0
# 6402 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;

  if (off == 1) {
    tp = find_tabpage((int)tv_get_number_chk(&argvars[0], 
# 6405 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                         ((void *)0)
# 6405 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             ));
  } else {
    tp = curtab;
  }
  win = find_win_by_nr(&argvars[off], tp);
  const char *varname = tv_get_string_chk(&argvars[off + 1]);

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = 
# 6413 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 6413 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;

  emsg_off++;
  if (win != 
# 6416 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0) 
# 6416 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 && varname != 
# 6416 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 6416 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   ) {



    
# 6420 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 6420 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        need_switch_win = tp != curtab || win != curwin;
    if (!need_switch_win
        || switch_win(&oldcurwin, &oldtabpage, win, tp, 
# 6422 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       1
# 6422 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           ) == 1) {
      if (*varname == '&') {
        if (varname[1] == '\000') {

          dict_T *opts = get_winbuf_options(
# 6426 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           0
# 6426 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                );

          if (opts != 
# 6428 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 6428 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
            tv_dict_set_ret(rettv, opts);
            done = 
# 6430 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  1
# 6430 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
          }
        } else if (get_option_tv(&varname, rettv, 1) == 1) {

          done = 
# 6434 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 6434 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
      } else {


        v = find_var_in_ht(&win->w_vars->dv_hashtab, 'w', varname,
                           strlen(varname), 
# 6440 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           0
# 6440 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                );
        if (v != 
# 6441 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 6441 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
          tv_copy(&v->di_tv, rettv);
          done = 
# 6443 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 6443 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
        }
      }
    }

    if (need_switch_win) {

      restore_win(oldcurwin, oldtabpage, 
# 6450 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        1
# 6450 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            );
    }
  }
  emsg_off--;

  if (!done && argvars[off + 2].v_type != VAR_UNKNOWN) {

    tv_copy(&argvars[off + 2], rettv);
  }
}







void get_user_input(const typval_T *const argvars,
                    typval_T *const rettv,
                    const 
# 6469 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         _Bool 
# 6469 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              inputdialog,
                    const 
# 6470 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         _Bool 
# 6470 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              secret)
  FUNC_ATTR_NONNULL_ALL
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = 
# 6474 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 6474 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;

  const char *prompt = "";
  const char *defstr = "";
  const char *cancelreturn = 
# 6478 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 6478 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ;
  const char *xp_name = 
# 6479 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 6479 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
  Callback input_callback = { .type = kCallbackNone };
  char prompt_buf[NUMBUFLEN];
  char defstr_buf[NUMBUFLEN];
  char cancelreturn_buf[NUMBUFLEN];
  char xp_name_buf[NUMBUFLEN];
  char def[1] = { 0 };
  if (argvars[0].v_type == VAR_DICT) {
    if (argvars[1].v_type != VAR_UNKNOWN) {
      emsg((char_u *)(gettext((char *)("E5050: {opts} must be the only argument"))));
      return;
    }
    dict_T *const dict = argvars[0].vval.v_dict;
    prompt = tv_dict_get_string_buf_chk(dict, ("prompt"), (sizeof("prompt") - 1), prompt_buf, "");
    if (prompt == 
# 6493 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 6493 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ) {
      return;
    }
    defstr = tv_dict_get_string_buf_chk(dict, ("default"), (sizeof("default") - 1), defstr_buf, "");
    if (defstr == 
# 6497 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 6497 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ) {
      return;
    }
    cancelreturn = tv_dict_get_string_buf_chk(dict, ("cancelreturn"), (sizeof("cancelreturn") - 1),
                                              cancelreturn_buf, def);
    if (cancelreturn == 
# 6502 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 6502 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ) {
      return;
    }
    if (*cancelreturn == '\000') {
      cancelreturn = 
# 6506 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 6506 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
    }
    xp_name = tv_dict_get_string_buf_chk(dict, ("completion"), (sizeof("completion") - 1),
                                         xp_name_buf, def);
    if (xp_name == 
# 6510 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 6510 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
      return;
    }
    if (xp_name == def) {
      xp_name = 
# 6514 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 6514 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
    }
    if (!tv_dict_get_callback(dict, ("highlight"), (sizeof("highlight") - 1), &input_callback)) {
      return;
    }
  } else {
    prompt = tv_get_string_buf_chk(&argvars[0], prompt_buf);
    if (prompt == 
# 6521 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 6521 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ) {
      return;
    }
    if (argvars[1].v_type != VAR_UNKNOWN) {
      defstr = tv_get_string_buf_chk(&argvars[1], defstr_buf);
      if (defstr == 
# 6526 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 6526 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {
        return;
      }
      if (argvars[2].v_type != VAR_UNKNOWN) {
        const char *const arg2 = tv_get_string_buf_chk(&argvars[2],
                                                       cancelreturn_buf);
        if (arg2 == 
# 6532 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 6532 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {
          return;
        }
        if (inputdialog) {
          cancelreturn = arg2;
        } else {
          xp_name = arg2;
        }
      }
    }
  }

  int xp_type = EXPAND_NOTHING;
  char *xp_arg = 
# 6545 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 6545 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
  if (xp_name != 
# 6546 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 6546 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {

    const int xp_namelen = (int)strlen(xp_name);

    uint32_t argt;
    if (parse_compl_arg((char_u *)xp_name, xp_namelen, &xp_type,
                        &argt, (char_u **)&xp_arg) == 0) {
      return;
    }
  }

  const 
# 6557 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       _Bool 
# 6557 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            cmd_silent_save = cmd_silent;

  cmd_silent = 
# 6559 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 6559 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;


  const char *p = prompt;
  if (!ui_has(kUICmdline)) {
    const char *lastnl = strrchr(prompt, '\n');
    if (lastnl != 
# 6565 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 6565 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ) {
      p = lastnl+1;
      msg_start();
      msg_clr_eos();
      msg_puts_attr_len(prompt, p - prompt, echo_attr);
      msg_didout = 
# 6570 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  0
# 6570 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
      msg_starthere();
    }
  }
  cmdline_row = msg_row;

  stuffReadbuffSpec(defstr);

  const int save_ex_normal_busy = ex_normal_busy;
  ex_normal_busy = 0;
  rettv->vval.v_string =
    (char_u *)getcmdline_prompt(secret ? '\000' : '@', p, echo_attr,
                                xp_type, xp_arg, input_callback);
  ex_normal_busy = save_ex_normal_busy;
  callback_free(&input_callback);

  if (rettv->vval.v_string == 
# 6586 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             ((void *)0) 
# 6586 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  && cancelreturn != 
# 6586 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                     ((void *)0)
# 6586 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         ) {
    rettv->vval.v_string = (char_u *)xstrdup(cancelreturn);
  }

  xfree(xp_arg);


  need_wait_return = 
# 6593 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    0
# 6593 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;
  msg_didout = 
# 6594 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              0
# 6594 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
  cmd_silent = cmd_silent_save;
}







void dict_list(typval_T *const tv, typval_T *const rettv,
               const DictListType what)
{
  if (tv->v_type != VAR_DICT) {
    emsg((char_u *)(gettext((char *)(e_dictreq))));
    return;
  }
  if (tv->vval.v_dict == 
# 6611 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 6611 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ) {
    return;
  }

  tv_list_alloc_ret(rettv, tv_dict_len(tv->vval.v_dict));

  do { hashtab_T *const dihi_ht_ = (&(tv->vval.v_dict)->dv_hashtab); size_t dihi_todo_ = dihi_ht_->ht_used; for (hashitem_T *dihi_ = dihi_ht_->ht_array; dihi_todo_; dihi_++) { if (!((dihi_)->hi_key == 
# 6617 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0) 
# 6617 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 || (dihi_)->hi_key == (char_u *)&hash_removed)) { dihi_todo_--; { { { dictitem_T *const di = ((dictitem_T *)((dihi_)->hi_key - 
# 6617 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 __builtin_offsetof (
# 6617 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 dictitem_T
# 6617 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 , 
# 6617 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 di_key
# 6617 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 )
# 6617 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 )); { { typval_T tv_item = { .v_lock = VAR_UNLOCKED }; switch (what) { case kDictListKeys: { tv_item.v_type = VAR_STRING; tv_item.vval.v_string = vim_strsave(di->di_key); break; } case kDictListValues: { tv_copy(&di->di_tv, &tv_item); break; } case kDictListItems: { list_T *const sub_l = tv_list_alloc(2); tv_item.v_type = VAR_LIST; tv_item.vval.v_list = sub_l; tv_list_ref(sub_l); tv_list_append_owned_tv(sub_l, (typval_T) { .v_type = VAR_STRING, .v_lock = VAR_UNLOCKED, .vval.v_string = (char_u *)xstrdup((const char *)di->di_key), }); tv_list_append_tv(sub_l, &di->di_tv); break; } } tv_list_append_owned_tv(rettv->vval.v_list, tv_item); } } } } } } } } while (0)
# 6650 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    ;
}
# 6662 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
char **tv_to_argv(typval_T *cmd_tv, const char **cmd, 
# 6662 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                     _Bool 
# 6662 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          *executable)
{
  if (cmd_tv->v_type == VAR_STRING) {
    const char *cmd_str = tv_get_string(cmd_tv);
    if (cmd) {
      *cmd = cmd_str;
    }
    return shell_build_argv(cmd_str, 
# 6669 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                    ((void *)0)
# 6669 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        );
  }

  if (cmd_tv->v_type != VAR_LIST) {
    emsgf((const char *) (gettext((char *)(e_invarg2))), ("expected String or List"));
    return 
# 6674 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 6674 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  list_T *argl = cmd_tv->vval.v_list;
  int argc = tv_list_len(argl);
  if (!argc) {
    emsg((char_u *)(gettext((char *)(e_invarg))));
    return 
# 6681 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 6681 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  const char *arg0 = tv_get_string_chk((&(tv_list_first(argl))->li_tv));
  char *exe_resolved = 
# 6685 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 6685 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ;
  if (!arg0 || !os_can_exe(arg0, &exe_resolved, 
# 6686 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               1
# 6686 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                   )) {
    if (arg0 && executable) {
      char buf[(1024+1)];
      snprintf(buf, sizeof(buf), "'%s' is not executable", arg0);
      emsgf((const char *) (gettext((char *)(e_invargNval))), ("cmd"), (buf));
      *executable = 
# 6691 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   0
# 6691 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
    }
    return 
# 6693 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 6693 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  if (cmd) {
    *cmd = exe_resolved;
  }


  int i = 0;
  char **argv = xcalloc(argc + 1, sizeof(char *));
  do { const list_T *const l_ = (argl); ; if (l_ != 
# 6703 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 6703 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ) { for (const listitem_T *arg = l_->lv_first; arg != 
# 6703 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 6703 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; arg = arg->li_next) { { const char *a = tv_get_string_chk((&(arg)->li_tv)); if (!a) { shell_free_argv(argv); xfree(exe_resolved); return 
# 6703 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 6703 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; } argv[i++] = xstrdup(a); } } } } while (0)
# 6712 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    ;


  xfree(argv[0]);
  argv[0] = exe_resolved;

  return argv;
}







void mapblock_fill_dict(dict_T *const dict,
                        const mapblock_T *const mp,
                        long buffer_value,
                        
# 6730 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       _Bool 
# 6730 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            compatible)
  FUNC_ATTR_NONNULL_ALL
{
  char *const lhs = str2special_save((const char *)mp->m_keys,
                                     compatible, !compatible);
  char *const mapmode = map_mode_to_chars(mp->m_mode);
  varnumber_T noremap_value;

  if (compatible) {


    noremap_value = !!mp->m_noremap;
  } else {


    noremap_value = mp->m_noremap == REMAP_SCRIPT ? 2 : !!mp->m_noremap;
  }

  if (compatible) {
    tv_dict_add_str(dict, ("rhs"), (sizeof("rhs") - 1), (const char *)mp->m_orig_str);
  } else {
    tv_dict_add_allocated_str(dict, ("rhs"), (sizeof("rhs") - 1),
                              str2special_save((const char *)mp->m_str, 
# 6752 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                       0
# 6752 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                            ,
                                               
# 6753 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                              1
# 6753 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                  ));
  }
  tv_dict_add_allocated_str(dict, ("lhs"), (sizeof("lhs") - 1), lhs);
  tv_dict_add_nr(dict, ("noremap"), (sizeof("noremap") - 1), noremap_value);
  tv_dict_add_nr(dict, ("expr"), (sizeof("expr") - 1), mp->m_expr ? 1 : 0);
  tv_dict_add_nr(dict, ("silent"), (sizeof("silent") - 1), mp->m_silent ? 1 : 0);
  tv_dict_add_nr(dict, ("sid"), (sizeof("sid") - 1), (varnumber_T)mp->m_script_ctx.sc_sid);
  tv_dict_add_nr(dict, ("lnum"), (sizeof("lnum") - 1), (varnumber_T)mp->m_script_ctx.sc_lnum);
  tv_dict_add_nr(dict, ("buffer"), (sizeof("buffer") - 1), (varnumber_T)buffer_value);
  tv_dict_add_nr(dict, ("nowait"), (sizeof("nowait") - 1), mp->m_nowait ? 1 : 0);
  tv_dict_add_allocated_str(dict, ("mode"), (sizeof("mode") - 1), mapmode);
}

int matchadd_dict_arg(typval_T *tv, const char **conceal_char,
                      win_T **win)
{
  dictitem_T *di;

  if (tv->v_type != VAR_DICT) {
    emsg((char_u *)(gettext((char *)(e_dictreq))));
    return 0;
  }

  if ((di = tv_dict_find(tv->vval.v_dict, ("conceal"), (sizeof("conceal") - 1))) != 
# 6776 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                               ((void *)0)
# 6776 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                   ) {
    *conceal_char = tv_get_string(&di->di_tv);
  }

  if ((di = tv_dict_find(tv->vval.v_dict, ("window"), (sizeof("window") - 1))) != 
# 6780 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 6780 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  ) {
    *win = find_win_by_nr_or_id(&di->di_tv);
    if (*win == 
# 6782 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 6782 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ) {
      emsg((char_u *)(gettext((char *)(e_invalwindow))));
      return 0;
    }
  }

  return 1;
}

void return_register(int regname, typval_T *rettv)
{
  char_u buf[2] = { regname, 0 };

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = vim_strsave(buf);
}

void screenchar_adjust_grid(ScreenGrid **grid, int *row, int *col)
{




  msg_scroll_flush();
  if (msg_grid.chars && msg_grid.comp_index > 0 && *row >= msg_grid.comp_row
      && *row < (msg_grid.Rows + msg_grid.comp_row)
      && *col < msg_grid.Columns) {
    *grid = &msg_grid;
    *row -= msg_grid.comp_row;
  }
}


void set_buffer_lines(buf_T *buf, linenr_T lnum_arg, 
# 6815 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    _Bool 
# 6815 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         append,
                      const typval_T *lines, typval_T *rettv)
  FUNC_ATTR_NONNULL_ARG(4, 5)
{
  linenr_T lnum = lnum_arg + (append ? 1 : 0);
  const char *line = 
# 6820 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 6820 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
  list_T *l = 
# 6821 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 6821 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
  listitem_T *li = 
# 6822 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 6822 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
  long added = 0;
  linenr_T append_lnum;
  buf_T *curbuf_save = 
# 6825 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 6825 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ;
  win_T *curwin_save = 
# 6826 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 6826 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ;
  const 
# 6827 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       _Bool 
# 6827 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            is_curbuf = buf == curbuf;




  if (buf == 
# 6832 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0) 
# 6832 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 || (!is_curbuf && buf->b_ml.ml_mfp == 
# 6832 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       ((void *)0)
# 6832 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           ) || lnum < 1) {
    rettv->vval.v_number = 1;
    return;
  }

  if (!is_curbuf) {
    curbuf_save = curbuf;
    curwin_save = curwin;
    curbuf = buf;
    find_win_for_curbuf();
  }

  if (append) {

    append_lnum = lnum - 1;
  } else {


    append_lnum = curbuf->b_ml.ml_line_count;
  }

  if (lines->v_type == VAR_LIST) {
    l = lines->vval.v_list;
    li = tv_list_first(l);
  } else {
    line = tv_get_string_chk(lines);
  }


  for (;; ) {
    if (lines->v_type == VAR_LIST) {

      if (li == 
# 6864 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 6864 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ) {
        break;
      }
      line = tv_get_string_chk((&(li)->li_tv));
      li = ((li)->li_next);
    }

    rettv->vval.v_number = 1;
    if (line == 
# 6872 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 6872 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    || lnum > curbuf->b_ml.ml_line_count + 1) {
      break;
    }



    if (u_sync_once == 2) {
      u_sync_once = 1;
      u_sync(
# 6880 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            1
# 6880 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                );
    }

    if (!append && lnum <= curbuf->b_ml.ml_line_count) {

      if (u_savesub(lnum) == 1
          && ml_replace(lnum, (char_u *)line, 
# 6886 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             1
# 6886 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 ) == 1) {
        changed_bytes(lnum, 0);
        if (is_curbuf && lnum == curwin->w_cursor.lnum) {
          check_cursor_col();
        }
        rettv->vval.v_number = 0;
      }
    } else if (added > 0 || u_save(lnum - 1, lnum) == 1) {

      added++;
      if (ml_append(lnum - 1, (char_u *)line, 0, 
# 6896 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                0
# 6896 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     ) == 1) {
        rettv->vval.v_number = 0;
      }
    }

    if (l == 
# 6901 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 6901 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
      break;
    }
    lnum++;
  }

  if (added > 0) {
    appended_lines_mark(append_lnum, added);




    for (tabpage_T *tp = first_tabpage; tp != 
# 6913 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 6913 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ; tp = tp->tp_next) for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != 
# 6913 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)
# 6913 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   ; wp = wp->w_next) {
      if (wp->w_buffer == buf
          && (wp->w_buffer != curbuf || wp == curwin)
          && wp->w_cursor.lnum > append_lnum) {
        wp->w_cursor.lnum += added;
      }
    }
    check_cursor_col();
    update_topline();
  }

  if (!is_curbuf) {
     curbuf = curbuf_save;
     curwin = curwin_save;
  }
}





void setwinvar(typval_T *argvars, typval_T *rettv, int off)
{
  if (check_secure()) {
    return;
  }

  tabpage_T *tp = 
# 6940 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 6940 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
  if (off == 1) {
    tp = find_tabpage((int)tv_get_number_chk(&argvars[0], 
# 6942 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                         ((void *)0)
# 6942 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                             ));
  } else {
    tp = curtab;
  }
  win_T *const win = find_win_by_nr(&argvars[off], tp);
  const char *varname = tv_get_string_chk(&argvars[off + 1]);
  typval_T *varp = &argvars[off + 2];

  if (win != 
# 6950 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0) 
# 6950 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 && varname != 
# 6950 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0) 
# 6950 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    && varp != 
# 6950 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               ((void *)0)
# 6950 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                   ) {
    win_T *save_curwin;
    tabpage_T *save_curtab;
    
# 6953 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 6953 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        need_switch_win = tp != curtab || win != curwin;
    if (!need_switch_win
        || switch_win(&save_curwin, &save_curtab, win, tp, 
# 6955 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          1
# 6955 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                              ) == 1) {
      if (*varname == '&') {
        long numval;
        
# 6958 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       _Bool 
# 6958 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            error = 
# 6958 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    0
# 6958 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;

        varname++;
        numval = tv_get_number_chk(varp, &error);
        char nbuf[NUMBUFLEN];
        const char *const strval = tv_get_string_buf_chk(varp, nbuf);
        if (!error && strval != 
# 6964 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 6964 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   ) {
          set_option_value(varname, numval, strval, OPT_LOCAL);
        }
      } else {
        const size_t varname_len = strlen(varname);
        char *const winvarname = xmalloc(varname_len + 3);
        memcpy(winvarname, "w:", 2);
        memcpy(winvarname + 2, varname, varname_len + 1);
        set_var(winvarname, varname_len + 2, varp, 
# 6972 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                  1
# 6972 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                      );
        xfree(winvarname);
      }
    }
    if (need_switch_win) {
      restore_win(save_curwin, save_curtab, 
# 6977 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           1
# 6977 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                               );
    }
  }
}


void get_xdg_var_list(const XDGVarType xdg, typval_T *rettv)
  FUNC_ATTR_NONNULL_ALL
{
  const void *iter = 
# 6986 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 6986 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
  list_T *const list = tv_list_alloc(kListLenShouldKnow);
  rettv->v_type = VAR_LIST;
  rettv->vval.v_list = list;
  tv_list_ref(list);
  char *const dirs = stdpaths_get_xdg_var(xdg);
  if (dirs == 
# 6992 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 6992 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
    return;
  }
  do {
    size_t dir_len;
    const char *dir;
    iter = vim_env_iter(':', dirs, iter, &dir, &dir_len);
    if (dir != 
# 6999 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0) 
# 6999 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   && dir_len > 0) {
      char *dir_with_nvim = xmemdupz(dir, dir_len);
      dir_with_nvim = concat_fnames_realloc(dir_with_nvim, "nvim", 
# 7001 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                  1
# 7001 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                      );
      tv_list_append_string(list, dir_with_nvim, strlen(dir_with_nvim));
      xfree(dir_with_nvim);
    }
  } while (iter != 
# 7005 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 7005 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      );
  xfree(dirs);
}

static list_T *string_to_list(const char *str, size_t len, const 
# 7009 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                _Bool 
# 7009 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                     keepempty)
{
  if (!keepempty && str[len - 1] == '\012') {
    len--;
  }
  list_T *const list = tv_list_alloc(kListLenMayKnow);
  encode_list_write(list, str, len);
  return list;
}


void get_system_output_as_rettv(typval_T *argvars, typval_T *rettv,
                                
# 7021 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               _Bool 
# 7021 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    retlist)
{
  proftime_T wait_time;
  
# 7024 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 7024 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      profiling = do_profiling == 1;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = 
# 7027 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 7027 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;

  if (check_restricted() || check_secure()) {
    return;
  }


  ptrdiff_t input_len;
  char *input = save_tv_as_string(&argvars[1], &input_len, 
# 7035 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          0
# 7035 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               );
  if (input_len < 0) {
    
# 7037 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void) sizeof ((
# 7037 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   input == 
# 7037 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 7037 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   input == 
# 7037 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)) ; else __assert_fail (
# 7037 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   "input == NULL"
# 7037 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 7037, __extension__ __PRETTY_FUNCTION__); }))
# 7037 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ;
    return;
  }


  
# 7042 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 7042 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      executable = 
# 7042 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   1
# 7042 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
  char **argv = tv_to_argv(&argvars[0], 
# 7043 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 7043 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , &executable);
  if (!argv) {
    if (!executable) {
      set_vim_var_nr(VV_SHELL_ERROR, (long)-1);
    }
    xfree(input);
    return;
  }

  if (p_verbose > 3) {
    char *cmdstr = shell_argv_to_str(argv);
    verbose_enter_scroll();
    smsg(gettext((char *)("Executing command: \"%s\"")), cmdstr);
    msg_puts("\n\n");
    verbose_leave_scroll();
    xfree(cmdstr);
  }

  if (profiling) {
    prof_child_enter(&wait_time);
  }


  size_t nread = 0;
  char *res = 
# 7067 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 7067 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
  int status = os_system(argv, input, input_len, &res, &nread);

  if (profiling) {
    prof_child_exit(&wait_time);
  }

  xfree(input);

  set_vim_var_nr(VV_SHELL_ERROR, (long) status);

  if (res == 
# 7078 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7078 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    if (retlist) {

      tv_list_alloc_ret(rettv, 0);
    } else {
      rettv->vval.v_string = (char_u *) xstrdup("");
    }
    return;
  }

  if (retlist) {
    int keepempty = 0;
    if (argvars[1].v_type != VAR_UNKNOWN && argvars[2].v_type != VAR_UNKNOWN) {
      keepempty = tv_get_number(&argvars[2]);
    }
    rettv->vval.v_list = string_to_list(res, nread, (
# 7093 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    _Bool
# 7093 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        )keepempty);
    tv_list_ref(rettv->vval.v_list);
    rettv->v_type = VAR_LIST;

    xfree(res);
  } else {


    memchrsub(res, '\000', 1, nread);
# 7115 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    rettv->vval.v_string = (char_u *) res;
  }
}


# 7119 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 7119 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    callback_from_typval(Callback *const callback, typval_T *const arg)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
{
  int r = 1;

  if (arg->v_type == VAR_PARTIAL && arg->vval.v_partial != 
# 7124 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                          ((void *)0)
# 7124 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                              ) {
    callback->data.partial = arg->vval.v_partial;
    callback->data.partial->pt_refcount++;
    callback->type = kCallbackPartial;
  } else if (arg->v_type == VAR_STRING
             && arg->vval.v_string != 
# 7129 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     ((void *)0)
             
# 7130 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            && ascii_isdigit(*arg->vval.v_string)) {
    r = 0;
  } else if (arg->v_type == VAR_FUNC || arg->v_type == VAR_STRING) {
    char_u *name = arg->vval.v_string;
    func_ref(name);
    callback->data.funcref = vim_strsave(name);
    callback->type = kCallbackFuncref;
  } else if (arg->v_type == VAR_NUMBER && arg->vval.v_number == 0) {
    callback->type = kCallbackNone;
  } else {
    r = 0;
  }

  if (r == 0) {
    emsg((char_u *)(gettext((char *)("E921: Invalid callback argument"))));
    return 
# 7145 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 7145 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }
  return 
# 7147 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        1
# 7147 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}


# 7150 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 7150 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    callback_call(Callback *const callback, const int argcount_in,
                   typval_T *const argvars_in, typval_T *const rettv)
  FUNC_ATTR_NONNULL_ALL
{
  partial_T *partial;
  char_u *name;
  switch (callback->type) {
    case kCallbackFuncref:
      name = callback->data.funcref;
      partial = 
# 7159 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 7159 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
      break;

    case kCallbackPartial:
      partial = callback->data.partial;
      name = partial_name(partial);
      break;

    case kCallbackNone:
      return 
# 7168 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 7168 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
      break;

    default:
      abort();
  }

  int dummy;
  return call_func(name, (int)strlen((char *)(name)), rettv, argcount_in, argvars_in,
                   
# 7177 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 7177 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      , curwin->w_cursor.lnum, curwin->w_cursor.lnum, &dummy,
                   
# 7178 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  1
# 7178 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      , partial, 
# 7178 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 7178 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     );
}

static 
# 7181 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
      _Bool 
# 7181 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
           set_ref_in_callback(Callback *callback, int copyID,
                                ht_stack_T **ht_stack,
                                list_stack_T **list_stack)
{
  typval_T tv;
  switch (callback->type) {
    case kCallbackFuncref:
    case kCallbackNone:
      break;

    case kCallbackPartial:
      tv.v_type = VAR_PARTIAL;
      tv.vval.v_partial = callback->data.partial;
      return set_ref_in_item(&tv, copyID, ht_stack, list_stack);
      break;


    default:
      abort();
  }
  return 
# 7201 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        0
# 7201 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
}

static 
# 7204 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
      _Bool 
# 7204 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
           set_ref_in_callback_reader(CallbackReader *reader, int copyID,
                                       ht_stack_T **ht_stack,
                                       list_stack_T **list_stack)
{
  if (set_ref_in_callback(&reader->cb, copyID, ht_stack, list_stack)) {
    return 
# 7209 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          1
# 7209 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  if (reader->self) {
    typval_T tv;
    tv.v_type = VAR_DICT;
    tv.vval.v_dict = reader->self;
    return set_ref_in_item(&tv, copyID, ht_stack, list_stack);
  }
  return 
# 7218 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        0
# 7218 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
}

timer_T *find_timer_by_nr(varnumber_T xx)
{
    return map_uint64_t_ptr_t_get(timers, xx);
}

void add_timer_info(typval_T *rettv, timer_T *timer)
{
  list_T *list = rettv->vval.v_list;
  dict_T *dict = tv_dict_alloc();

  tv_list_append_dict(list, dict);
  tv_dict_add_nr(dict, ("id"), (sizeof("id") - 1), timer->timer_id);
  tv_dict_add_nr(dict, ("time"), (sizeof("time") - 1), timer->timeout);
  tv_dict_add_nr(dict, ("paused"), (sizeof("paused") - 1), timer->paused);

  tv_dict_add_nr(dict, ("repeat"), (sizeof("repeat") - 1),
                 (timer->repeat_count < 0 ? -1 : timer->repeat_count));

  dictitem_T *di = tv_dict_item_alloc("callback");
  if (tv_dict_add(dict, di) == 0) {
    xfree(di);
    return;
  }

  if (timer->callback.type == kCallbackPartial) {
    di->di_tv.v_type = VAR_PARTIAL;
    di->di_tv.vval.v_partial = timer->callback.data.partial;
    timer->callback.data.partial->pt_refcount++;
  } else if (timer->callback.type == kCallbackFuncref) {
    di->di_tv.v_type = VAR_FUNC;
    di->di_tv.vval.v_string = vim_strsave(timer->callback.data.funcref);
  }
}

void add_timer_info_all(typval_T *rettv)
{
  tv_list_alloc_ret(rettv, timers->table->n_occupied);
  timer_T *timer;
  { khint_t __i; for (__i = (khint_t)(0); __i != ((timers->table)->n_buckets); ++__i) { if (!(!(((timers->table)->flags[(__i)>>4]>>(((__i)&0xfU)<<1))&3))) continue; (timer) = ((timers->table)->vals[__i]); { if (!timer->stopped) { add_timer_info(rettv, timer); } }; } }




}


void timer_due_cb(TimeWatcher *tw, void *data)
{
  timer_T *timer = (timer_T *)data;
  int save_did_emsg = did_emsg;
  int save_called_emsg = called_emsg;
  const 
# 7272 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       _Bool 
# 7272 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            save_ex_pressedreturn = get_pressedreturn();

  if (timer->stopped || timer->paused) {
    return;
  }

  timer->refcount++;

  if (timer->repeat_count >= 0 && --timer->repeat_count == 0) {
    timer_stop(timer);
  }

  typval_T argv[2] = { ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, }), ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, }) };
  argv[0].v_type = VAR_NUMBER;
  argv[0].vval.v_number = timer->timer_id;
  typval_T rettv = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
  called_emsg = 
# 7288 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               0
# 7288 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;

  callback_call(&timer->callback, 1, argv, &rettv);


  if (called_emsg && did_emsg) {
    timer->emsg_count++;
    if (current_exception != 
# 7295 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 7295 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ) {
      discard_current_exception();
    }
  }
  did_emsg = save_did_emsg;
  called_emsg = save_called_emsg;
  set_pressedreturn(save_ex_pressedreturn);

  if (timer->emsg_count >= 3) {
    timer_stop(timer);
  }

  tv_clear(&rettv);

  if (!timer->stopped && timer->timeout == 0) {




    time_watcher_start(&timer->tw, timer_due_cb, 0, 0);
  }
  timer_decref(timer);
}

uint64_t timer_start(const long timeout,
                     const int repeat_count,
                     const Callback *const callback)
{
  timer_T *timer = xmalloc(sizeof *timer);
  timer->refcount = 1;
  timer->stopped = 
# 7325 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  0
# 7325 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
  timer->paused = 
# 7326 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 0
# 7326 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
  timer->emsg_count = 0;
  timer->repeat_count = repeat_count;
  timer->timeout = timeout;
  timer->timer_id = last_timer_id++;
  timer->callback = *callback;

  time_watcher_init(&main_loop, &timer->tw, timer);
  timer->tw.events = multiqueue_new_child(main_loop.events);

  timer->tw.blockable = 
# 7336 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       1
# 7336 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
  time_watcher_start(&timer->tw, timer_due_cb, timeout, timeout);

  map_uint64_t_ptr_t_put(timers, timer->timer_id, timer);
  return timer->timer_id;
}

void timer_stop(timer_T *timer)
{
  if (timer->stopped) {

    return;
  }
  timer->stopped = 
# 7349 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  1
# 7349 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
  time_watcher_stop(&timer->tw);
  time_watcher_close(&timer->tw, timer_close_cb);
}



static void timer_close_cb(TimeWatcher *tw, void *data)
{
  timer_T *timer = (timer_T *)data;
  multiqueue_free(timer->tw.events);
  callback_free(&timer->callback);
  map_uint64_t_ptr_t_del(timers, timer->timer_id);
  timer_decref(timer);
}

static void timer_decref(timer_T *timer)
{
  if (--timer->refcount == 0) {
    xfree(timer);
  }
}

void timer_stop_all(void)
{
  timer_T *timer;
  { khint_t __i; for (__i = (khint_t)(0); __i != ((timers->table)->n_buckets); ++__i) { if (!(!(((timers->table)->flags[(__i)>>4]>>(((__i)&0xfU)<<1))&3))) continue; (timer) = ((timers->table)->vals[__i]); { timer_stop(timer); }; } }


}

void timer_teardown(void)
{
  timer_stop_all();
}
# 7392 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 7392 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 7392 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    write_list(FileDescriptor *const fp, const list_T *const list,
                const 
# 7393 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     _Bool 
# 7393 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          binary)
  FUNC_ATTR_NONNULL_ARG(1)
{
  int error = 0;
  do { const list_T *const l_ = (list); ; if (l_ != 
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ) { for (const listitem_T *li = l_->lv_first; li != 
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; li = li->li_next) { { const char *const s = tv_get_string_chk((&(li)->li_tv)); if (s == 
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ) { return 
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 0
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; } const char *hunk_start = s; for (const char *p = hunk_start;; p++) { if (*p == '\000' || *p == '\012') { if (p != hunk_start) { const ptrdiff_t written = file_write(fp, hunk_start, (size_t)(p - hunk_start)); if (written < 0) { error = (int)written; goto write_list_error; } } if (*p == '\000') { break; } else { hunk_start = p + 1; const ptrdiff_t written = file_write(fp, (char[]){ '\000' }, 1); if (written < 0) { error = (int)written; break; } } } } if (!binary || ((li)->li_next) != 
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7397 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ) { const ptrdiff_t written = file_write(fp, "\n", 1); if (written < 0) { error = (int)written; goto write_list_error; } } } } } } while (0)
# 7432 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    ;
  if ((error = file_flush(fp)) != 0) {
    goto write_list_error;
  }
  return 
# 7436 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        1
# 7436 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
write_list_error:
  emsgf(gettext((char *)("E80: Error while writing: %s")), uv_strerror(error));
  return 
# 7439 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        0
# 7439 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
}
# 7451 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
char *save_tv_as_string(typval_T *tv, ptrdiff_t *const len, 
# 7451 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           _Bool 
# 7451 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                endnl)
  FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ALL
{
  *len = 0;
  if (tv->v_type == VAR_UNKNOWN) {
    return 
# 7456 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 7456 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }



  if (tv->v_type != VAR_LIST && tv->v_type != VAR_NUMBER) {
    const char *ret = tv_get_string_chk(tv);
    if (ret) {
      *len = strlen(ret);
      return xmemdupz(ret, (size_t)(*len));
    } else {
      *len = -1;
      return 
# 7468 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7468 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
  }

  if (tv->v_type == VAR_NUMBER) {
    buf_T *buf = buflist_findnr(tv->vval.v_number);
    if (buf) {
      for (linenr_T lnum = 1; lnum <= buf->b_ml.ml_line_count; lnum++) {
        for (char_u *p = ml_get_buf(buf, lnum, 
# 7476 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                              0
# 7476 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                   ); *p != '\000'; p++) {
          *len += 1;
        }
        *len += 1;
      }
    } else {
      emsgf((const char *) (gettext((char *)(e_nobufnr))), (int64_t)(tv->vval.v_number));
      *len = -1;
      return 
# 7484 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7484 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }

    if (*len == 0) {
      return 
# 7488 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7488 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }

    char *ret = xmalloc(*len + 1);
    char *end = ret;
    for (linenr_T lnum = 1; lnum <= buf->b_ml.ml_line_count; lnum++) {
      for (char_u *p = ml_get_buf(buf, lnum, 
# 7494 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            0
# 7494 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 ); *p != '\000'; p++) {
        *end++ = (*p == '\n') ? '\000' : *p;
      }
      *end++ = '\n';
    }
    *end = '\000';
    *len = end - ret;
    return ret;
  }

  
# 7504 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void) sizeof ((
# 7504 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 tv->v_type == VAR_LIST
# 7504 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 7504 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 tv->v_type == VAR_LIST
# 7504 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ) ; else __assert_fail (
# 7504 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 "tv->v_type == VAR_LIST"
# 7504 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 7504, __extension__ __PRETTY_FUNCTION__); }))
# 7504 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ;

  list_T *list = tv->vval.v_list;
  do { const list_T *const l_ = (list); ; if (l_ != 
# 7507 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7507 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ) { for (const listitem_T *li = l_->lv_first; li != 
# 7507 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7507 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; li = li->li_next) { { *len += strlen(tv_get_string((&(li)->li_tv))) + 1; } } } } while (0)

    ;

  if (*len == 0) {
    return 
# 7512 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 7512 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  char *ret = xmalloc(*len + endnl);
  char *end = ret;
  do { const list_T *const l_ = (list); ; if (l_ != 
# 7517 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7517 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ) { for (const listitem_T *li = l_->lv_first; li != 
# 7517 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7517 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ; li = li->li_next) { { for (const char *s = tv_get_string((&(li)->li_tv)); *s != '\000'; s++) { *end++ = (*s == '\n') ? '\000' : *s; } if (endnl || ((li)->li_next) != 
# 7517 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0)
# 7517 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 ) { *end++ = '\n'; } } } } } while (0)






    ;
  *end = '\000';
  *len = end - ret;
  return ret;
}
# 7540 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
pos_T *var2fpos(const typval_T *const tv, const int dollar_lnum,
                int *const ret_fnum)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
{
  static pos_T pos;
  pos_T *pp;


  if (tv->v_type == VAR_LIST) {
    list_T *l;
    int len;
    
# 7551 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 7551 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        error = 
# 7551 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                0
# 7551 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
    listitem_T *li;

    l = tv->vval.v_list;
    if (l == 
# 7555 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7555 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
      return 
# 7556 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7556 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }


    pos.lnum = tv_list_find_nr(l, 0L, &error);
    if (error || pos.lnum <= 0 || pos.lnum > curbuf->b_ml.ml_line_count) {

      return 
# 7563 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7563 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }


    pos.col = tv_list_find_nr(l, 1L, &error);
    if (error) {
      return 
# 7569 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7569 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
    len = (long)strlen((char *)(ml_get(pos.lnum)));


    li = tv_list_find(l, 1L);
    if (li != 
# 7575 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0) 
# 7575 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  && (&(li)->li_tv)->v_type == VAR_STRING
        && (&(li)->li_tv)->vval.v_string != 
# 7576 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                ((void *)0)
        
# 7577 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       && strcmp((char *)((&(li)->li_tv)->vval.v_string), (char *)("$")) == 0) {
      pos.col = len + 1;
    }


    if (pos.col == 0 || (int)pos.col > len + 1) {

      return 
# 7584 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7584 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
    pos.col--;


    pos.coladd = tv_list_find_nr(l, 2L, &error);
    if (error) {
      pos.coladd = 0;
    }

    return &pos;
  }

  const char *const name = tv_get_string_chk(tv);
  if (name == 
# 7598 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 7598 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
    return 
# 7599 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 7599 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }
  if (name[0] == '.') {
    return &curwin->w_cursor;
  }
  if (name[0] == 'v' && name[1] == '\000') {
    if (VIsual_active) {
      return &VIsual;
    }
    return &curwin->w_cursor;
  }
  if (name[0] == '\'') {
    pp = getmark_buf_fnum(curbuf, (uint8_t)name[1], 
# 7611 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   0
# 7611 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        , ret_fnum);
    if (pp == 
# 7612 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0) 
# 7612 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  || pp == (pos_T *)-1 || pp->lnum <= 0) {
      return 
# 7613 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 7613 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
    return pp;
  }

  pos.coladd = 0;

  if (name[0] == 'w' && dollar_lnum) {
    pos.col = 0;
    if (name[1] == '0') {
      update_topline();


      pos.lnum = curwin->w_topline > 0 ? curwin->w_topline : 1;
      return &pos;
    } else if (name[1] == '$') {
      validate_botline();

      pos.lnum = curwin->w_botline > 0 ? curwin->w_botline - 1 : 0;
      return &pos;
    }
  } else if (name[0] == '$') {
    if (dollar_lnum) {
      pos.lnum = curbuf->b_ml.ml_line_count;
      pos.col = 0;
    } else {
      pos.lnum = curwin->w_cursor.lnum;
      pos.col = (colnr_T)strlen((char *)(get_cursor_line_ptr()));
    }
    return &pos;
  }
  return 
# 7644 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0)
# 7644 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}
# 7655 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int list2fpos(typval_T *arg, pos_T *posp, int *fnump, colnr_T *curswantp)
{
  list_T *l;
  long i = 0;
  long n;



  if (arg->v_type != VAR_LIST
      || (l = arg->vval.v_list) == 
# 7664 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
      
# 7665 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     || tv_list_len(l) < (fnump == 
# 7665 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                   ((void *)0) 
# 7665 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        ? 2 : 3)
      || tv_list_len(l) > (fnump == 
# 7666 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                   ((void *)0) 
# 7666 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        ? 4 : 5)) {
    return 0;
  }

  if (fnump != 
# 7670 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 7670 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ) {
    n = tv_list_find_nr(l, i++, 
# 7671 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 7671 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   );
    if (n < 0) {
      return 0;
    }
    if (n == 0) {
      n = curbuf->handle;
    }
    *fnump = n;
  }

  n = tv_list_find_nr(l, i++, 
# 7681 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             ((void *)0)
# 7681 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 );
  if (n < 0) {
    return 0;
  }
  posp->lnum = n;

  n = tv_list_find_nr(l, i++, 
# 7687 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             ((void *)0)
# 7687 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 );
  if (n < 0) {
    return 0;
  }
  posp->col = n;

  n = tv_list_find_nr(l, i, 
# 7693 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 7693 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               );
  if (n < 0) {
    posp->coladd = 0;
  } else {
    posp->coladd = n;
  }

  if (curswantp != 
# 7700 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 7700 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
    *curswantp = tv_list_find_nr(l, i + 1, 
# 7701 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                          ((void *)0)
# 7701 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              );
  }

  return 1;
}






static int get_env_len(const char_u **arg)
{
  int len;

  const char_u *p;
  for (p = *arg; vim_isIDc(*p); p++) {
  }
  if (p == *arg) {
    return 0;
  }

  len = (int)(p - *arg);
  *arg = p;
  return len;
}




int get_id_len(const char **const arg)
{
  int len;


  const char *p;
  for (p = *arg; eval_isnamec(*p); p++) {
    if (*p == ':') {


      len = (int)(p - *arg);
      if (len > 1
          || (len == 1 && vim_strchr(namespace_char, **arg) == 
# 7743 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 7743 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  )) {
        break;
      }
    }
  }
  if (p == *arg) {
    return 0;
  }

  len = (int)(p - *arg);
  *arg = (const char *)skipwhite((const char_u *)p);

  return len;
}
# 7767 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int get_name_len(const char **const arg,
                 char **alias,
                 int evaluate,
                 int verbose)
{
  int len;

  *alias = 
# 7774 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 7774 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;

  if ((*arg)[0] == (char)(0x80) && (*arg)[1] == (char)253
      && (*arg)[2] == (char)KE_SNR) {

    *arg += 3;
    return get_id_len(arg) + 3;
  }
  len = eval_fname_script(*arg);
  if (len > 0) {

    *arg += len;
  }


  char_u *expr_start;
  char_u *expr_end;
  const char *p = (const char *)find_name_end((char_u *)(*arg),
                                              (const char_u **)&expr_start,
                                              (const char_u **)&expr_end,
                                              len > 0 ? 0 : 2);
  if (expr_start != 
# 7795 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 7795 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {
    if (!evaluate) {
      len += (int)(p - *arg);
      *arg = (const char *)skipwhite((const char_u *)p);
      return len;
    }





    char_u *temp_string = make_expanded_name((char_u *)(*arg) - len, expr_start,
                                             expr_end, (char_u *)p);
    if (temp_string == 
# 7808 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 7808 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
      return -1;
    }
    *alias = (char *)temp_string;
    *arg = (const char *)skipwhite((const char_u *)p);
    return (int)strlen((char *)(temp_string));
  }

  len += get_id_len(arg);


  if (len == 0 && verbose && **arg != '\000') {
    emsgf((const char *) (gettext((char *)(e_invexpr2))), (*arg));
  }

  return len;
}







const char_u *find_name_end(const char_u *arg, const char_u **expr_start,
                            const char_u **expr_end, int flags)
{
  int mb_nest = 0;
  int br_nest = 0;
  int len;

  if (expr_start != 
# 7839 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 7839 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ) {
    *expr_start = 
# 7840 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 7840 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ;
    *expr_end = 
# 7841 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 7841 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ;
  }


  if ((flags & 2) && !eval_isnamec1(*arg) && *arg != '{') {
    return arg;
  }

  const char_u *p;
  for (p = arg; *p != '\000'
       && (eval_isnamec(*p)
           || *p == '{'
           || ((flags & 1) && (*p == '[' || *p == '.'))
           || mb_nest != 0
           || br_nest != 0); (p += utfc_ptr2len((char_u *)p))) {
    if (*p == '\'') {

      for (p = p + 1; *p != '\000' && *p != '\''; (p += utfc_ptr2len((char_u *)p))) {
      }
      if (*p == '\000') {
        break;
      }
    } else if (*p == '"') {

      for (p = p + 1; *p != '\000' && *p != '"'; (p += utfc_ptr2len((char_u *)p))) {
        if (*p == '\\' && p[1] != '\000') {
          ++p;
        }
      }
      if (*p == '\000') {
        break;
      }
    } else if (br_nest == 0 && mb_nest == 0 && *p == ':') {


      len = (int)(p - arg);
      if ((len > 1 && p[-1] != '}')
          || (len == 1 && vim_strchr(namespace_char, *arg) == 
# 7878 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                             ((void *)0)
# 7878 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                 )) {
        break;
      }
    }

    if (mb_nest == 0) {
      if (*p == '[') {
        ++br_nest;
      } else if (*p == ']') {
        --br_nest;
      }
    }

    if (br_nest == 0) {
      if (*p == '{') {
        mb_nest++;
        if (expr_start != 
# 7894 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0) 
# 7894 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              && *expr_start == 
# 7894 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                ((void *)0)
# 7894 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    ) {
          *expr_start = p;
        }
      } else if (*p == '}') {
        mb_nest--;
        if (expr_start != 
# 7899 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0) 
# 7899 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              && mb_nest == 0 && *expr_end == 
# 7899 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 7899 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  ) {
          *expr_end = p;
        }
      }
    }
  }

  return p;
}
# 7922 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static char_u *make_expanded_name(const char_u *in_start, char_u *expr_start,
                                  char_u *expr_end, char_u *in_end)
{
  char_u c1;
  char_u *retval = 
# 7926 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 7926 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
  char_u *temp_result;
  char_u *nextcmd = 
# 7928 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 7928 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;

  if (expr_end == 
# 7930 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0) 
# 7930 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      || in_end == 
# 7930 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                   ((void *)0)
# 7930 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                       )
    return 
# 7931 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 7931 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  *expr_start = '\000';
  *expr_end = '\000';
  c1 = *in_end;
  *in_end = '\000';

  temp_result = eval_to_string(expr_start + 1, &nextcmd, 0);
  if (temp_result != 
# 7938 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0) 
# 7938 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         && nextcmd == 
# 7938 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 7938 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           ) {
    retval = xmalloc(strlen((char *)(temp_result)) + (expr_start - in_start)
                     + (in_end - expr_end) + 1);
    strcpy((char *)(retval), (char *)(in_start));
    strcat((char *)(retval), (char *)(temp_result));
    strcat((char *)(retval), (char *)(expr_end + 1));
  }
  xfree(temp_result);

  *in_end = c1;
  *expr_start = '{';
  *expr_end = '}';

  if (retval != 
# 7951 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 7951 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ) {
    temp_result = (char_u *)find_name_end(retval,
                                          (const char_u **)&expr_start,
                                          (const char_u **)&expr_end, 0);
    if (expr_start != 
# 7955 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 7955 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {

      temp_result = make_expanded_name(retval, expr_start,
          expr_end, temp_result);
      xfree(retval);
      retval = temp_result;
    }
  }

  return retval;
}





int eval_isnamec(int c)
{
  return ((((unsigned)(c) >= 'A' && (unsigned)(c) <= 'Z') || ((unsigned)(c) >= 'a' && (unsigned)(c) <= 'z')) || ascii_isdigit(c)) || c == '_' || c == ':' || c == '#';
}





int eval_isnamec1(int c)
{
  return (((unsigned)(c) >= 'A' && (unsigned)(c) <= 'Z') || ((unsigned)(c) >= 'a' && (unsigned)(c) <= 'z')) || c == '_';
}




varnumber_T get_vim_var_nr(int idx) FUNC_ATTR_PURE
{
  return vimvars[idx].vv_di.di_tv.vval.v_number;
}




char_u *get_vim_var_str(int idx) FUNC_ATTR_PURE FUNC_ATTR_NONNULL_RET
{
  return (char_u *)tv_get_string(&vimvars[idx].vv_di.di_tv);
}





list_T *get_vim_var_list(int idx) FUNC_ATTR_PURE
{
  return vimvars[idx].vv_di.di_tv.vval.v_list;
}



dict_T *get_vim_var_dict(int idx) FUNC_ATTR_PURE
{
  return vimvars[idx].vv_di.di_tv.vval.v_dict;
}




void set_vim_var_char(int c)
{
  char buf[21 + 1];

  buf[utf_char2bytes(c, (char_u *)buf)] = '\000';
  set_vim_var_string(VV_CHAR, buf, -1);
}





void set_vcount(long count, long count1, int set_prevcount)
{
  if (set_prevcount)
    vimvars[VV_PREVCOUNT].vv_di.di_tv.vval.v_number = vimvars[VV_COUNT].vv_di.di_tv.vval.v_number;
  vimvars[VV_COUNT].vv_di.di_tv.vval.v_number = count;
  vimvars[VV_COUNT1].vv_di.di_tv.vval.v_number = count1;
}





void set_vim_var_nr(const VimVarIndex idx, const varnumber_T val)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_NUMBER;
  vimvars[idx].vv_di.di_tv.vval.v_number = val;
}





void set_vim_var_special(const VimVarIndex idx, const SpecialVarValue val)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_SPECIAL;
  vimvars[idx].vv_di.di_tv.vval.v_special = val;
}







void set_vim_var_string(const VimVarIndex idx, const char *const val,
                        const ptrdiff_t len)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_STRING;
  if (val == 
# 8073 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 8073 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    vimvars[idx].vv_di.di_tv.vval.v_string = 
# 8074 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 8074 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ;
  } else if (len == -1) {
    vimvars[idx].vv_di.di_tv.vval.v_string = (char_u *) xstrdup(val);
  } else {
    vimvars[idx].vv_di.di_tv.vval.v_string = (char_u *) xstrndup(val, (size_t) len);
  }
}





void set_vim_var_list(const VimVarIndex idx, list_T *const val)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_LIST;
  vimvars[idx].vv_di.di_tv.vval.v_list = val;
  if (val != 
# 8091 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 8091 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    tv_list_ref(val);
  }
}






void set_vim_var_dict(const VimVarIndex idx, dict_T *const val)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_DICT;
  vimvars[idx].vv_di.di_tv.vval.v_dict = val;

  if (val != 
# 8107 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 8107 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    val->dv_refcount++;

    tv_dict_set_keys_readonly(val);
  }
}


void set_argv_var(char **argv, int argc)
{
  list_T *l = tv_list_alloc(argc);
  int i;

  if (l == 
# 8120 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8120 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ) {
    getout(1);
  }
  tv_list_set_lock(l, VAR_FIXED);
  for (i = 0; i < argc; i++) {
    tv_list_append_string(l, (const char *const)argv[i], -1);
    (&(tv_list_last(l))->li_tv)->v_lock = VAR_FIXED;
  }
  set_vim_var_list(VV_ARGV, l);
}




void set_reg_var(int c)
{
  char regname;

  if (c == 0 || c == ' ') {
    regname = '"';
  } else {
    regname = c;
  }

  if (vimvars[VV_REG].vv_di.di_tv.vval.v_string == 
# 8144 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0) 
# 8144 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    || vimvars[VV_REG].vv_di.di_tv.vval.v_string[0] != c) {
    set_vim_var_string(VV_REG, &regname, 1);
  }
}







char_u *v_exception(char_u *oldval)
{
  if (oldval == 
# 8157 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 8157 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   )
    return vimvars[VV_EXCEPTION].vv_di.di_tv.vval.v_string;

  vimvars[VV_EXCEPTION].vv_di.di_tv.vval.v_string = oldval;
  return 
# 8161 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0)
# 8161 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}







char_u *v_throwpoint(char_u *oldval)
{
  if (oldval == 
# 8172 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0)
# 8172 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   )
    return vimvars[VV_THROWPOINT].vv_di.di_tv.vval.v_string;

  vimvars[VV_THROWPOINT].vv_di.di_tv.vval.v_string = oldval;
  return 
# 8176 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0)
# 8176 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}







char_u *set_cmdarg(exarg_T *eap, char_u *oldarg)
{
  char_u *oldval = vimvars[VV_CMDARG].vv_di.di_tv.vval.v_string;
  if (eap == 
# 8188 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 8188 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    xfree(oldval);
    vimvars[VV_CMDARG].vv_di.di_tv.vval.v_string = oldarg;
    return 
# 8191 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8191 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  size_t len = 0;
  if (eap->force_bin == 1)
    len = 6;
  else if (eap->force_bin == 2)
    len = 8;

  if (eap->read_edit)
    len += 7;

  if (eap->force_ff != 0) {
    len += 10;
  }
  if (eap->force_enc != 0) {
    len += strlen((char *)(eap->cmd + eap->force_enc)) + 7;
  }
  if (eap->bad_char != 0) {
    len += 7 + 4;
  }

  const size_t newval_len = len + 1;
  char_u *newval = xmalloc(newval_len);

  if (eap->force_bin == 1)
    sprintf((char *)newval, " ++bin");
  else if (eap->force_bin == 2)
    sprintf((char *)newval, " ++nobin");
  else
    *newval = '\000';

  if (eap->read_edit)
    strcat((char *)(newval), (char *)(" ++edit"));

  if (eap->force_ff != 0) {
    snprintf((char *)newval + strlen((char *)(newval)), newval_len, " ++ff=%s",
             eap->force_ff == 'u' ? "unix" :
             eap->force_ff == 'd' ? "dos" : "mac");
  }
  if (eap->force_enc != 0) {
    snprintf((char *)newval + strlen((char *)(newval)), newval_len, " ++enc=%s",
             eap->cmd + eap->force_enc);
  }
  if (eap->bad_char == -1) {
    strcpy((char *)(newval + strlen((char *)(newval))), (char *)(" ++bad=keep"));
  } else if (eap->bad_char == -2) {
    strcpy((char *)(newval + strlen((char *)(newval))), (char *)(" ++bad=drop"));
  } else if (eap->bad_char != 0) {
    snprintf((char *)newval + strlen((char *)(newval)), newval_len, " ++bad=%c",
             eap->bad_char);
  }
  vimvars[VV_CMDARG].vv_di.di_tv.vval.v_string = newval;
  return oldval;
}





int get_var_tv(
    const char *name,
    int len,
    typval_T *rettv,
    dictitem_T **dip,
    int verbose,
    int no_autoload
)
{
  int ret = 1;
  typval_T *tv = 
# 8261 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0)
# 8261 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
  dictitem_T *v;

  v = find_var(name, (size_t)len, 
# 8264 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 8264 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , no_autoload);
  if (v != 
# 8265 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8265 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ) {
    tv = &v->di_tv;
    if (dip != 
# 8267 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 8267 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ) {
      *dip = v;
    }
  }

  if (tv == 
# 8272 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0)
# 8272 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ) {
    if (rettv != 
# 8273 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0) 
# 8273 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     && verbose) {
      emsgf(gettext((char *)("E121: Undefined variable: %.*s")), len, name);
    }
    ret = 0;
  } else if (rettv != 
# 8277 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 8277 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
    tv_copy(tv, rettv);
  }

  return ret;
}



static void check_vars(const char *name, size_t len)
{
  if (eval_lavars_used == 
# 8288 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 8288 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ) {
    return;
  }

  const char *varname;
  hashtab_T *ht = find_var_ht(name, len, &varname);

  if (ht == get_funccal_local_ht() || ht == get_funccal_args_ht()) {
    if (find_var(name, len, 
# 8296 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 8296 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               , 
# 8296 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 1
# 8296 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     ) != 
# 8296 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                          ((void *)0)
# 8296 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              ) {
      *eval_lavars_used = 
# 8297 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         1
# 8297 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ;
    }
  }
}



# 8303 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 8303 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    is_luafunc(partial_T *partial)
{
  return partial == vvlua_partial;
}


static 
# 8309 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
      _Bool 
# 8309 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
           tv_is_luafunc(typval_T *tv)
{
  return tv->v_type == VAR_PARTIAL && is_luafunc(tv->vval.v_partial);
}


int check_luafunc_name(const char *str, 
# 8315 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       _Bool 
# 8315 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            paren)
{
  const char *p = str;
  while (((((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z') || ((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z')) || ascii_isdigit(*p)) || *p == '_' || *p == '.') {
    p++;
  }
  if (*p != (paren ? '(' : '\000')) {
    return 0;
  } else {
    return (int)(p-str);
  }
}




int
handle_subscript(
    const char **const arg,
    typval_T *rettv,
    int evaluate,
    int verbose
)
{
  int ret = 1;
  dict_T *selfdict = 
# 8340 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 8340 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ;
  const char_u *s;
  int len;
  typval_T functv;
  int slen = 0;
  
# 8345 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 8345 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      lua = 
# 8345 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 8345 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;

  if (tv_is_luafunc(rettv)) {
    if (**arg != '.') {
      tv_clear(rettv);
      ret = 0;
    } else {
      (*arg)++;

      lua = 
# 8354 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           1
# 8354 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
      s = (char_u *)(*arg);
      slen = check_luafunc_name(*arg, 
# 8356 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     1
# 8356 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                         );
      if (slen == 0) {
        tv_clear(rettv);
        ret = 0;
      }
      (*arg) += slen;
    }
  }


  while (ret == 1
         && (**arg == '['
             || (**arg == '.' && rettv->v_type == VAR_DICT)
             || (**arg == '(' && (!evaluate || tv_is_func(*rettv))))
         && !ascii_iswhite(*(*arg - 1))) {
    if (**arg == '(') {
      partial_T *pt = 
# 8372 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 8372 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;

      if (evaluate) {
        functv = *rettv;
        rettv->v_type = VAR_UNKNOWN;


        if (functv.v_type == VAR_PARTIAL) {
          pt = functv.vval.v_partial;
          if (!lua) {
            s = partial_name(pt);
          }
        } else {
          s = functv.vval.v_string;
        }
      } else {
        s = (char_u *)"";
      }
      ret = get_func_tv(s, lua ? slen : (int)strlen((char *)(s)), rettv, (char_u **)arg,
                        curwin->w_cursor.lnum, curwin->w_cursor.lnum,
                        &len, evaluate, pt, selfdict);



      if (evaluate) {
        tv_clear(&functv);
      }




      if (aborting()) {
        if (ret == 1) {
          tv_clear(rettv);
        }
        ret = 0;
      }
      tv_dict_unref(selfdict);
      selfdict = 
# 8410 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 8410 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
    } else {
      tv_dict_unref(selfdict);
      if (rettv->v_type == VAR_DICT) {
        selfdict = rettv->vval.v_dict;
        if (selfdict != 
# 8415 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 8415 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           )
          ++selfdict->dv_refcount;
      } else
        selfdict = 
# 8418 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 8418 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
      if (eval_index((char_u **)arg, rettv, evaluate, verbose) == 0) {
        tv_clear(rettv);
        ret = 0;
      }
    }
  }


  if (selfdict != 
# 8427 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0) 
# 8427 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      && tv_is_func(*rettv)) {
    set_selfdict(rettv, selfdict);
  }

  tv_dict_unref(selfdict);
  return ret;
}

void set_selfdict(typval_T *const rettv, dict_T *const selfdict)
{


  if (rettv->v_type == VAR_PARTIAL && !rettv->vval.v_partial->pt_auto
      && rettv->vval.v_partial->pt_dict != 
# 8440 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                          ((void *)0)
# 8440 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              ) {
    return;
  }
  make_partial(selfdict, rettv);
}



static const char *tv_stringify(typval_T *varp, char *buf)
  FUNC_ATTR_NONNULL_ALL
{
  if (varp->v_type == VAR_LIST
      || varp->v_type == VAR_DICT
      || varp->v_type == VAR_FUNC
      || varp->v_type == VAR_PARTIAL
      || varp->v_type == VAR_FLOAT) {
    typval_T tmp;

    f_string(varp, &tmp, 
# 8458 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        ((void *)0)
# 8458 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            );
    const char *const res = tv_get_string_buf(&tmp, buf);
    tv_clear(varp);
    *varp = tmp;
    return res;
  }
  return tv_get_string_buf(varp, buf);
}






dictitem_T *find_var(const char *const name, const size_t name_len,
                     hashtab_T **htp, int no_autoload)
{
  const char *varname;
  hashtab_T *const ht = find_var_ht(name, name_len, &varname);
  if (htp != 
# 8477 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 8477 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    *htp = ht;
  }
  if (ht == 
# 8480 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0)
# 8480 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ) {
    return 
# 8481 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8481 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }
  dictitem_T *const ret = find_var_in_ht(ht, *name,
                                         varname,
                                         name_len - (size_t)(varname - name),
                                         no_autoload || htp != 
# 8486 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                              ((void *)0)
# 8486 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                  );
  if (ret != 
# 8487 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 8487 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
    return ret;
  }


  return find_var_in_scoped_ht(name, name_len, no_autoload || htp != 
# 8492 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                    ((void *)0)
# 8492 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                        );
}
# 8507 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
dictitem_T *find_var_in_ht(hashtab_T *const ht,
                           int htname,
                           const char *const varname,
                           const size_t varname_len,
                           int no_autoload)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
{
  hashitem_T *hi;

  if (varname_len == 0) {

    switch (htname) {
      case 's': return (dictitem_T *)&(((scriptvar_T **)ga_scripts.ga_data)[(current_sctx.sc_sid) - 1])->sv_var;
      case 'g': return (dictitem_T *)&globvars_var;
      case 'v': return (dictitem_T *)&vimvars_var;
      case 'b': return (dictitem_T *)&curbuf->b_bufvar;
      case 'w': return (dictitem_T *)&curwin->w_winvar;
      case 't': return (dictitem_T *)&curtab->tp_winvar;
      case 'l': return get_funccal_local_var();
      case 'a': return get_funccal_args_var();
    }
    return 
# 8528 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8528 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  hi = hash_find_len(ht, varname, varname_len);
  if (((hi)->hi_key == 
# 8532 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     ((void *)0) 
# 8532 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
     || (hi)->hi_key == (char_u *)&hash_removed)) {




    if (ht == &globvardict.dv_hashtab && !no_autoload) {


      if (!script_autoload(varname, varname_len, 
# 8540 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                0
# 8540 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     ) || aborting()) {
        return 
# 8541 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 8541 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
      }
      hi = hash_find_len(ht, varname, varname_len);
    }
    if (((hi)->hi_key == 
# 8545 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0) 
# 8545 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       || (hi)->hi_key == (char_u *)&hash_removed)) {
      return 
# 8546 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 8546 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
  }
  return ((dictitem_T *)((hi)->hi_key - 
# 8549 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        __builtin_offsetof (
# 8549 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        dictitem_T
# 8549 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        , 
# 8549 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        di_key
# 8549 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        )
# 8549 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        ));
}
# 8561 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static hashtab_T *find_var_ht_dict(const char *name, const size_t name_len,
                                   const char **varname, dict_T **d)
{
  hashitem_T *hi;
  funccall_T *funccal = get_funccal();
  *d = 
# 8566 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
      ((void *)0)
# 8566 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          ;

  if (name_len == 0) {
    return 
# 8569 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8569 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }
  if (name_len == 1 || name[1] != ':') {

    if (name[0] == ':' || name[0] == '#') {

      return 
# 8575 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 8575 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
    *varname = name;


    hi = hash_find_len(&compat_hashtab, name, name_len);
    if (!((hi)->hi_key == 
# 8581 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0) 
# 8581 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        || (hi)->hi_key == (char_u *)&hash_removed)) {
      return &compat_hashtab;
    }

    if (funccal == 
# 8585 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 8585 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ) {
      *d = &globvardict;
    } else {
      *d = &funccal->l_vars;
    }
    goto end;
  }

  *varname = name + 2;
  if (*name == 'g') {
    *d = &globvardict;
  } else if (name_len > 2
             && (memchr(name + 2, ':', name_len - 2) != 
# 8597 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       ((void *)0)
                 
# 8598 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                || memchr(name + 2, '#', name_len - 2) != 
# 8598 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                    ((void *)0)
# 8598 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                        )) {

    return 
# 8600 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8600 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  if (*name == 'b') {
    *d = curbuf->b_vars;
  } else if (*name == 'w') {
    *d = curwin->w_vars;
  } else if (*name == 't') {
    *d = curtab->tp_vars;
  } else if (*name == 'v') {
    *d = &vimvardict;
  } else if (*name == 'a' && funccal != 
# 8611 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 8611 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           ) {
    *d = &funccal->l_avars;
  } else if (*name == 'l' && funccal != 
# 8613 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 8613 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           ) {
    *d = &funccal->l_vars;
  } else if (*name == 's'
             && current_sctx.sc_sid > 0
             && current_sctx.sc_sid <= ga_scripts.ga_len) {
    *d = &(((scriptvar_T **)ga_scripts.ga_data)[(current_sctx.sc_sid) - 1])->sv_dict;
  }

end:
  return *d ? &(*d)->dv_hashtab : 
# 8622 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 8622 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     ;
}
# 8633 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
hashtab_T *find_var_ht(const char *name, const size_t name_len,
                       const char **varname)
{
  dict_T *d;
  return find_var_ht_dict(name, name_len, varname, &d);
}






char_u *get_var_value(const char *const name)
{
  dictitem_T *v;

  v = find_var(name, strlen(name), 
# 8649 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 8649 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      , 
# 8649 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        0
# 8649 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             );
  if (v == 
# 8650 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8650 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ) {
    return 
# 8651 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8651 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }
  return (char_u *)tv_get_string(&v->di_tv);
}





void new_script_vars(scid_T id)
{
  hashtab_T *ht;
  scriptvar_T *sv;

  ga_grow(&ga_scripts, (int)(id - ga_scripts.ga_len));
  {



    for (int i = 1; i <= ga_scripts.ga_len; ++i) {
      ht = &((((scriptvar_T **)ga_scripts.ga_data)[(i) - 1])->sv_dict.dv_hashtab);
      if (ht->ht_mask == 16 - 1)
        ht->ht_array = ht->ht_smallarray;
      sv = (((scriptvar_T **)ga_scripts.ga_data)[(i) - 1]);
      sv->sv_var.di_tv.vval.v_dict = &sv->sv_dict;
    }

    while (ga_scripts.ga_len < id) {
      sv = (((scriptvar_T **)ga_scripts.ga_data)[(ga_scripts.ga_len + 1) - 1]) = xcalloc(1, sizeof(scriptvar_T));
      init_var_dict(&sv->sv_dict, &sv->sv_var, VAR_SCOPE);
      ++ga_scripts.ga_len;
    }
  }
}





void init_var_dict(dict_T *dict, ScopeDictDictItem *dict_var, int scope)
{
  hash_init(&dict->dv_hashtab);
  dict->dv_lock = VAR_UNLOCKED;
  dict->dv_scope = scope;
  dict->dv_refcount = DO_NOT_FREE_CNT;
  dict->dv_copyID = 0;
  dict_var->di_tv.vval.v_dict = dict;
  dict_var->di_tv.v_type = VAR_DICT;
  dict_var->di_tv.v_lock = VAR_FIXED;
  dict_var->di_flags = DI_FLAGS_RO | DI_FLAGS_FIX;
  dict_var->di_key[0] = '\000';
  QUEUE_INIT(&dict->watchers);
}




void unref_var_dict(dict_T *dict)
{


  dict->dv_refcount -= DO_NOT_FREE_CNT - 1;
  tv_dict_unref(dict);
}






void vars_clear(hashtab_T *ht)
{
  vars_clear_ext(ht, 1);
}




void vars_clear_ext(hashtab_T *ht, int free_val)
{
  int todo;
  hashitem_T *hi;
  dictitem_T *v;

  hash_lock(ht);
  todo = (int)ht->ht_used;
  for (hi = ht->ht_array; todo > 0; ++hi) {
    if (!((hi)->hi_key == 
# 8738 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0) 
# 8738 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        || (hi)->hi_key == (char_u *)&hash_removed)) {
      --todo;




      v = ((dictitem_T *)((hi)->hi_key - 
# 8744 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         __builtin_offsetof (
# 8744 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
         dictitem_T
# 8744 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         , 
# 8744 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
         di_key
# 8744 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         )
# 8744 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
         ));
      if (free_val) {
        tv_clear(&v->di_tv);
      }
      if (v->di_flags & DI_FLAGS_ALLOC) {
        xfree(v);
      }
    }
  }
  hash_clear(ht);
  ht->ht_used = 0;
}





static void delete_var(hashtab_T *ht, hashitem_T *hi)
{
  dictitem_T *di = ((dictitem_T *)((hi)->hi_key - 
# 8763 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   __builtin_offsetof (
# 8763 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   dictitem_T
# 8763 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   , 
# 8763 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   di_key
# 8763 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   )
# 8763 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   ));

  hash_remove(ht, hi);
  tv_clear(&di->di_tv);
  xfree(di);
}




static void list_one_var(dictitem_T *v, const char *prefix, int *first)
{
  char *const s = encode_tv2echo(&v->di_tv, 
# 8775 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           ((void *)0)
# 8775 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                               );
  list_one_var_a(prefix, (const char *)v->di_key, strlen((char *)(v->di_key)),
                 v->di_tv.v_type, (s == 
# 8777 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0) 
# 8777 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            ? "" : s), first);
  xfree(s);
}




static void list_one_var_a(const char *prefix, const char *name,
                           const ptrdiff_t name_len, const int type,
                           const char *string, int *first)
{

  msg_start();
  msg_puts(prefix);
  if (name != 
# 8791 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 8791 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
    msg_puts_attr_len(name, name_len, 0);
  }
  msg_putchar(' ');
  msg_advance(22);
  if (type == VAR_NUMBER) {
    msg_putchar('#');
  } else if (type == VAR_FUNC || type == VAR_PARTIAL) {
    msg_putchar('*');
  } else if (type == VAR_LIST) {
    msg_putchar('[');
    if (*string == '[')
      ++string;
  } else if (type == VAR_DICT) {
    msg_putchar('{');
    if (*string == '{')
      ++string;
  } else
    msg_putchar(' ');

  msg_outtrans((char_u *)string);

  if (type == VAR_FUNC || type == VAR_PARTIAL) {
    msg_puts("()");
  }
  if (*first) {
    msg_clr_eos();
    *first = 0;
  }
}
# 8831 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
void set_var(const char *name, const size_t name_len, typval_T *const tv,
             const 
# 8832 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  _Bool 
# 8832 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       copy)
  FUNC_ATTR_NONNULL_ALL
{
  set_var_const(name, name_len, tv, copy, 
# 8835 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         0
# 8835 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              );
}
# 8848 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
static void set_var_const(const char *name, const size_t name_len,
                          typval_T *const tv, const 
# 8849 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   _Bool 
# 8849 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        copy,
                          const 
# 8850 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               _Bool 
# 8850 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    is_const)
  FUNC_ATTR_NONNULL_ALL
{
  dictitem_T *v;
  hashtab_T *ht;
  dict_T *dict;

  const char *varname;
  ht = find_var_ht_dict(name, name_len, &varname, &dict);
  const 
# 8859 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       _Bool 
# 8859 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            watched = tv_dict_is_watched(dict);

  if (ht == 
# 8861 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           ((void *)0) 
# 8861 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                || *varname == '\000') {
    emsgf((const char *) (gettext((char *)(e_illvar))), (name));
    return;
  }
  v = find_var_in_ht(ht, 0, varname, name_len - (size_t)(varname - name), 
# 8865 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                         1
# 8865 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                             );


  if (v == 
# 8868 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8868 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ) {
    v = find_var_in_scoped_ht((const char *)name, name_len, 
# 8869 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                           1
# 8869 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                               );
  }

  if (tv_is_func(*tv) && !var_check_func_name(name, v == 
# 8872 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                        ((void *)0)
# 8872 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                            )) {
    return;
  }

  typval_T oldtv = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
  if (v != 
# 8877 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 8877 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ) {
    if (is_const) {
      emsg((char_u *)(gettext((char *)(e_cannot_mod))));
      return;
    }


    if (var_check_ro(v->di_flags, name, name_len)
        || tv_check_lock(v->di_tv.v_lock, name, name_len)) {
      return;
    }



    if (ht == &vimvardict.dv_hashtab) {
      if (v->di_tv.v_type == VAR_STRING) {
        do { void **ptr_ = (void **)&(v->di_tv.vval.v_string); xfree(*ptr_); *ptr_ = 
# 8893 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
       ((void *)0)
# 8893 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
       ; (void)(*ptr_); } while (0);
        if (copy || tv->v_type != VAR_STRING) {
          const char *const val = tv_get_string(tv);



          if (v->di_tv.vval.v_string == 
# 8899 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       ((void *)0)
# 8899 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           ) {
            v->di_tv.vval.v_string = (char_u *)xstrdup(val);
          }
        } else {

          v->di_tv.vval.v_string = tv->vval.v_string;
          tv->vval.v_string = 
# 8905 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             ((void *)0)
# 8905 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 ;
        }
        return;
      } else if (v->di_tv.v_type == VAR_NUMBER) {
        v->di_tv.vval.v_number = tv_get_number(tv);
        if (strcmp(varname, "searchforward") == 0) {
          set_search_direction(v->di_tv.vval.v_number ? '/' : '?');
        } else if (strcmp(varname, "hlsearch") == 0) {
          no_hlsearch = !v->di_tv.vval.v_number;
          redraw_all_later(35);
        }
        return;
      } else if (v->di_tv.v_type != tv->v_type) {
        emsgf((const char *) (gettext((char *)("E963: setting %s to value with wrong type"))), (name));
        return;
      }
    }

    if (watched) {
      tv_copy(&v->di_tv, &oldtv);
    }
    tv_clear(&v->di_tv);
  } else {

    if (ht == &vimvardict.dv_hashtab || ht == get_funccal_args_ht()) {
      emsgf(gettext((char *)(e_illvar)), name);
      return;
    }


    if (!valid_varname(varname)) {
      return;
    }


    
# 8940 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void) sizeof ((
# 8940 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   dict != 
# 8940 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 8940 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   dict != 
# 8940 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   ((void *)0)) ; else __assert_fail (
# 8940 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
   "dict != NULL"
# 8940 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 8940, __extension__ __PRETTY_FUNCTION__); }))
# 8940 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;

    v = xmalloc(sizeof(dictitem_T) + strlen(varname));
    strcpy((char *)(v->di_key), (char *)(varname));
    if (tv_dict_add(dict, v) == 0) {
      xfree(v);
      return;
    }
    v->di_flags = DI_FLAGS_ALLOC;
    if (is_const) {
      v->di_flags |= DI_FLAGS_LOCK;
    }
  }

  if (copy || tv->v_type == VAR_NUMBER || tv->v_type == VAR_FLOAT) {
    tv_copy(tv, &v->di_tv);
  } else {
    v->di_tv = *tv;
    v->di_tv.v_lock = 0;
    tv_init(tv);
  }

  if (watched) {
    if (oldtv.v_type == VAR_UNKNOWN) {
      tv_dict_watcher_notify(dict, (char *)v->di_key, &v->di_tv, 
# 8964 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                ((void *)0)
# 8964 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                    );
    } else {
      tv_dict_watcher_notify(dict, (char *)v->di_key, &v->di_tv, &oldtv);
      tv_clear(&oldtv);
    }
  }

  if (is_const) {
    v->di_tv.v_lock |= VAR_LOCKED;
  }
}
# 8995 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 8995 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 8995 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    var_check_ro(const int flags, const char *name,
                  size_t name_len)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
{
  const char *error_message = 
# 8999 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             ((void *)0)
# 8999 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 ;
  if (flags & DI_FLAGS_RO) {
    error_message = gettext((char *)(e_readonlyvar));
  } else if ((flags & DI_FLAGS_RO_SBX) && sandbox) {
    error_message = "E794: Cannot set variable in the sandbox: \"%.*s\"";
  }

  if (error_message == 
# 9006 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      ((void *)0)
# 9006 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          ) {
    return 
# 9007 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 9007 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }
  if (name_len == (
# 9009 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 (18446744073709551615UL)
# 9009 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 )) {
    name = gettext((char *)(name));
    name_len = strlen(name);
  } else if (name_len == (
# 9012 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                        (18446744073709551615UL) 
# 9012 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        - 1)) {
    name_len = strlen(name);
  }

  emsgf(gettext((char *)(error_message)), (int)name_len, name);

  return 
# 9018 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        1
# 9018 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}
# 9039 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 9039 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 9039 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    var_check_fixed(const int flags, const char *name,
                     size_t name_len)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
{
  if (flags & DI_FLAGS_FIX) {
    if (name_len == (
# 9044 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   (18446744073709551615UL)
# 9044 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                   )) {
      name = gettext((char *)(name));
      name_len = strlen(name);
    } else if (name_len == (
# 9047 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          (18446744073709551615UL) 
# 9047 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                          - 1)) {
      name_len = strlen(name);
    }
    emsgf((const char *) (gettext((char *)("E795: Cannot delete variable %.*s"))), ((int)name_len), (name));
    return 
# 9051 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          1
# 9051 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }
  return 
# 9053 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        0
# 9053 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
}
# 9065 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 9065 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 9065 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    var_check_func_name(const char *const name, const 
# 9065 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                      _Bool 
# 9065 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           new_var)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
{

  if (!(vim_strchr((char_u *)"wbst", name[0]) != 
# 9069 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                ((void *)0) 
# 9069 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                     && name[1] == ':')
      && !((unsigned)((name[0] != '\000' && name[1] == ':') ? name[2] : name[0]) >= 'A' && (unsigned)((name[0] != '\000' && name[1] == ':') ? name[2] : name[0]) <= 'Z')
                                                                     ) {
    emsgf((const char *) (gettext((char *)("E704: Funcref variable name must start with a capital: %s"))), (name));
    return 
# 9073 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 9073 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }



  if (new_var && function_exists((const char *)name, 
# 9078 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                    0
# 9078 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                         )) {
    emsgf((const char *) (gettext((char *)("E705: Variable name conflicts with existing function: %s"))), (name))
               ;
    return 
# 9081 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 9081 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }
  return 
# 9083 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        1
# 9083 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}
# 9094 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 9094 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 9094 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    valid_varname(const char *varname)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
{
  for (const char *p = varname; *p != '\000'; p++) {
    if (!eval_isnamec1((int)(uint8_t)(*p))
        && (p == varname || !ascii_isdigit(*p))
        && *p != '#') {
      emsgf(gettext((char *)(e_illvar)), varname);
      return 
# 9102 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 9102 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
    }
  }
  return 
# 9105 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        1
# 9105 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}
# 9124 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int var_item_copy(const vimconv_T *const conv,
                  typval_T *const from,
                  typval_T *const to,
                  const 
# 9127 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       _Bool 
# 9127 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            deep,
                  const int copyID)
  FUNC_ATTR_NONNULL_ARG(2, 3)
{
  static int recurse = 0;
  int ret = 1;

  if (recurse >= 100) {
    emsg((char_u *)(gettext((char *)("E698: variable nested too deep for making a copy"))));
    return 0;
  }
  ++recurse;

  switch (from->v_type) {
  case VAR_NUMBER:
  case VAR_FLOAT:
  case VAR_FUNC:
  case VAR_PARTIAL:
  case VAR_SPECIAL:
    tv_copy(from, to);
    break;
  case VAR_STRING:
    if (conv == 
# 9149 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
               ((void *)0) 
# 9149 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    || conv->vc_type == CONV_NONE
        || from->vval.v_string == 
# 9150 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 9150 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     ) {
      tv_copy(from, to);
    } else {
      to->v_type = VAR_STRING;
      to->v_lock = 0;
      if ((to->vval.v_string = string_convert((vimconv_T *)conv,
                                              from->vval.v_string,
                                              
# 9157 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             ((void *)0)
# 9157 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 ))
          == 
# 9158 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 9158 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
        to->vval.v_string = (char_u *) xstrdup((char *) from->vval.v_string);
      }
    }
    break;
  case VAR_LIST:
    to->v_type = VAR_LIST;
    to->v_lock = 0;
    if (from->vval.v_list == 
# 9166 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 9166 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ) {
      to->vval.v_list = 
# 9167 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 9167 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
    } else if (copyID != 0 && tv_list_copyid(from->vval.v_list) == copyID) {

      to->vval.v_list = tv_list_latest_copy(from->vval.v_list);
      tv_list_ref(to->vval.v_list);
    } else {
      to->vval.v_list = tv_list_copy(conv, from->vval.v_list, deep, copyID);
    }
    if (to->vval.v_list == 
# 9175 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0) 
# 9175 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               && from->vval.v_list != 
# 9175 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       ((void *)0)
# 9175 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           ) {
      ret = 0;
    }
    break;
  case VAR_DICT:
    to->v_type = VAR_DICT;
    to->v_lock = 0;
    if (from->vval.v_dict == 
# 9182 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                            ((void *)0)
# 9182 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                ) {
      to->vval.v_dict = 
# 9183 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       ((void *)0)
# 9183 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
    } else if (copyID != 0 && from->vval.v_dict->dv_copyID == copyID) {

      to->vval.v_dict = from->vval.v_dict->dv_copydict;
      ++to->vval.v_dict->dv_refcount;
    } else {
      to->vval.v_dict = tv_dict_copy(conv, from->vval.v_dict, deep, copyID);
    }
    if (to->vval.v_dict == 
# 9191 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0) 
# 9191 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               && from->vval.v_dict != 
# 9191 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                       ((void *)0)
# 9191 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                           ) {
      ret = 0;
    }
    break;
  case VAR_UNKNOWN:
    internal_error("var_item_copy(UNKNOWN)");
    ret = 0;
  }
  --recurse;
  return ret;
}






void ex_echo(exarg_T *eap)
{
  char_u *arg = eap->arg;
  typval_T rettv;
  
# 9212 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 9212 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      atstart = 
# 9212 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                1
# 9212 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ;
  
# 9213 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 9213 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      need_clear = 
# 9213 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   1
# 9213 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                       ;
  const int did_emsg_before = did_emsg;

  if (eap->skip)
    ++emsg_skip;
  while (*arg != '\000' && *arg != '|' && *arg != '\n' && !got_int) {


    need_clr_eos = 
# 9221 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  1
# 9221 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;

    {
      char_u *p = arg;
      if (eval1(&arg, &rettv, !eap->skip) == 0) {



        if (!aborting() && did_emsg == did_emsg_before) {
          emsgf((const char *) (gettext((char *)(e_invexpr2))), (p));
        }
        need_clr_eos = 
# 9232 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                      0
# 9232 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                           ;
        break;
      }
      need_clr_eos = 
# 9235 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    0
# 9235 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ;
    }

    if (!eap->skip) {
      if (atstart) {
        atstart = 
# 9240 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 0
# 9240 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;


        if (eap->cmdidx == CMD_echo) {



          msg_sb_eol();
          msg_start();
        }
      } else if (eap->cmdidx == CMD_echo) {
        msg_puts_attr(" ", echo_attr);
      }
      char *tofree = encode_tv2echo(&rettv, 
# 9253 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                           ((void *)0)
# 9253 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                               );
      if (*tofree != '\000') {
        msg_ext_set_kind("echo");
        msg_multiline_attr(tofree, echo_attr, 
# 9256 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             1
# 9256 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 , &need_clear);
      }
      xfree(tofree);
    }
    tv_clear(&rettv);
    arg = skipwhite(arg);
  }
  eap->nextcmd = check_nextcmd(arg);

  if (eap->skip) {
    emsg_skip--;
  } else {

    if (need_clear) {
      msg_clr_eos();
    }
    if (eap->cmdidx == CMD_echo) {
      msg_end();
    }
  }
}




void ex_echohl(exarg_T *eap)
{
  echo_attr = syn_name2attr(eap->arg);
}
# 9293 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
void ex_execute(exarg_T *eap)
{
  char_u *arg = eap->arg;
  typval_T rettv;
  int ret = 1;
  garray_T ga;
  int save_did_emsg;

  ga_init(&ga, 1, 80);

  if (eap->skip)
    ++emsg_skip;
  while (*arg != '\000' && *arg != '|' && *arg != '\n') {
    ret = eval1_emsg(&arg, &rettv, !eap->skip);
    if (ret == 0) {
      break;
    }

    if (!eap->skip) {
      char buf[NUMBUFLEN];
      const char *const argstr = eap->cmdidx == CMD_execute
        ? tv_get_string_buf(&rettv, buf)
        : tv_stringify(&rettv, buf);
      const size_t len = strlen(argstr);
      ga_grow(&ga, len + 2);
      if (!((&ga)->ga_len <= 0)) {
        ((char_u *)(ga.ga_data))[ga.ga_len++] = ' ';
      }
      memcpy((char_u *)(ga.ga_data) + ga.ga_len, argstr, len + 1);
      ga.ga_len += len;
    }

    tv_clear(&rettv);
    arg = skipwhite(arg);
  }

  if (ret != 0 && ga.ga_data != 
# 9329 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                  ((void *)0)
# 9329 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                      ) {
    if (eap->cmdidx == CMD_echomsg || eap->cmdidx == CMD_echoerr) {



      msg_sb_eol();
    }

    if (eap->cmdidx == CMD_echomsg) {
      msg_ext_set_kind("echomsg");
      msg_attr((const char *)(ga.ga_data), (echo_attr));
      ui_flush();
    } else if (eap->cmdidx == CMD_echoerr) {

      save_did_emsg = did_emsg;
      msg_ext_set_kind("echoerr");
      emsg((char_u *)((char_u *)ga.ga_data));
      if (!force_abort)
        did_emsg = save_did_emsg;
    } else if (eap->cmdidx == CMD_execute)
      do_cmdline((char_u *)ga.ga_data,
          eap->getline, eap->cookie, 0x02|0x01);
  }

  ga_clear(&ga);

  if (eap->skip)
    --emsg_skip;

  eap->nextcmd = check_nextcmd(arg);
}







static const char *find_option_end(const char **const arg, int *const opt_flags)
{
  const char *p = *arg;

  ++p;
  if (*p == 'g' && p[1] == ':') {
    *opt_flags = OPT_GLOBAL;
    p += 2;
  } else if (*p == 'l' && p[1] == ':') {
    *opt_flags = OPT_LOCAL;
    p += 2;
  } else {
    *opt_flags = 0;
  }

  if (!(((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z') || ((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z'))) {
    return 
# 9383 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 9383 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }
  *arg = p;

  if (p[0] == 't' && p[1] == '_' && p[2] != '\000' && p[3] != '\000') {
    p += 4;
  } else {
    while ((((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z') || ((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z'))) {
      p++;
    }
  }
  return p;
}


void func_do_profile(ufunc_T *fp)
{
  int len = fp->uf_lines.ga_len;

  if (!fp->uf_prof_initialized) {
    if (len == 0) {
      len = 1;
    }
    fp->uf_tm_count = 0;
    fp->uf_tm_self = profile_zero();
    fp->uf_tm_total = profile_zero();

    if (fp->uf_tml_count == 
# 9410 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 9410 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ) {
      fp->uf_tml_count = xcalloc(len, sizeof(int));
    }

    if (fp->uf_tml_total == 
# 9414 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 9414 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ) {
      fp->uf_tml_total = xcalloc(len, sizeof(proftime_T));
    }

    if (fp->uf_tml_self == 
# 9418 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          ((void *)0)
# 9418 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                              ) {
      fp->uf_tml_self = xcalloc(len, sizeof(proftime_T));
    }

    fp->uf_tml_idx = -1;
    fp->uf_prof_initialized = 
# 9423 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             1
# 9423 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                 ;
  }

  fp->uf_profiling = 1;
}




void func_dump_profile(FILE *fd)
{
  hashitem_T *hi;
  int todo;
  ufunc_T *fp;
  ufunc_T **sorttab;
  int st_len = 0;

  todo = (int)func_hashtab.ht_used;
  if (todo == 0) {
    return;
  }

  sorttab = xmalloc(sizeof(ufunc_T *) * todo);

  for (hi = func_hashtab.ht_array; todo > 0; ++hi) {
    if (!((hi)->hi_key == 
# 9448 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0) 
# 9448 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        || (hi)->hi_key == (char_u *)&hash_removed)) {
      --todo;
      fp = ((ufunc_T *)((hi)->hi_key - 
# 9450 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          __builtin_offsetof (
# 9450 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          ufunc_T
# 9450 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          , 
# 9450 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          uf_name
# 9450 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          )
# 9450 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          ));
      if (fp->uf_prof_initialized) {
        sorttab[st_len++] = fp;

        if (fp->uf_name[0] == (0x80)) {
          fprintf(fd, "FUNCTION  <SNR>%s()\n", fp->uf_name + 3);
        } else {
          fprintf(fd, "FUNCTION  %s()\n", fp->uf_name);
        }
        if (fp->uf_script_ctx.sc_sid != 0) {
          
# 9460 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         _Bool 
# 9460 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              should_free;
          const LastSet last_set = (LastSet){
            .script_ctx = fp->uf_script_ctx,
              .channel_id = 0,
          };
          char_u *p = get_scriptname(last_set, &should_free);
          fprintf(fd, "    Defined: %s:%" "ld" "\n",
                  p, fp->uf_script_ctx.sc_lnum);
          if (should_free) {
            xfree(p);
          }
        }
        if (fp->uf_tm_count == 1) {
          fprintf(fd, "Called 1 time\n");
        } else {
          fprintf(fd, "Called %d times\n", fp->uf_tm_count);
        }
        fprintf(fd, "Total time: %s\n", profile_msg(fp->uf_tm_total));
        fprintf(fd, " Self time: %s\n", profile_msg(fp->uf_tm_self));
        fprintf(fd, "\n");
        fprintf(fd, "count  total (s)   self (s)\n");

        for (int i = 0; i < fp->uf_lines.ga_len; ++i) {
          if (((char_u **)(fp->uf_lines.ga_data))[i] == 
# 9483 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                ((void *)0)
# 9483 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                    )
            continue;
          prof_func_line(fd, fp->uf_tml_count[i],
              &fp->uf_tml_total[i], &fp->uf_tml_self[i], 1);
          fprintf(fd, "%s\n", ((char_u **)(fp->uf_lines.ga_data))[i]);
        }
        fprintf(fd, "\n");
      }
    }
  }

  if (st_len > 0) {
    qsort((void *)sorttab, (size_t)st_len, sizeof(ufunc_T *),
        prof_total_cmp);
    prof_sort_list(fd, sorttab, st_len, "TOTAL", 0);
    qsort((void *)sorttab, (size_t)st_len, sizeof(ufunc_T *),
        prof_self_cmp);
    prof_sort_list(fd, sorttab, st_len, "SELF", 1);
  }

  xfree(sorttab);
}

static void
prof_sort_list(
    FILE *fd,
    ufunc_T **sorttab,
    int st_len,
    char *title,
    int prefer_self
)
{
  int i;
  ufunc_T *fp;

  fprintf(fd, "FUNCTIONS SORTED ON %s TIME\n", title);
  fprintf(fd, "count  total (s)   self (s)  function\n");
  for (i = 0; i < 20 && i < st_len; ++i) {
    fp = sorttab[i];
    prof_func_line(fd, fp->uf_tm_count, &fp->uf_tm_total, &fp->uf_tm_self,
        prefer_self);
    if (fp->uf_name[0] == (0x80))
      fprintf(fd, " <SNR>%s()\n", fp->uf_name + 3);
    else
      fprintf(fd, " %s()\n", fp->uf_name);
  }
  fprintf(fd, "\n");
}




static void prof_func_line(
    FILE *fd,
    int count,
    proftime_T *total,
    proftime_T *self,
    int prefer_self
)
{
  if (count > 0) {
    fprintf(fd, "%5d ", count);
    if (prefer_self && profile_equal(*total, *self))
      fprintf(fd, "           ");
    else
      fprintf(fd, "%s ", profile_msg(*total));
    if (!prefer_self && profile_equal(*total, *self))
      fprintf(fd, "           ");
    else
      fprintf(fd, "%s ", profile_msg(*self));
  } else
    fprintf(fd, "                            ");
}




static int prof_total_cmp(const void *s1, const void *s2)
{
  ufunc_T *p1 = *(ufunc_T **)s1;
  ufunc_T *p2 = *(ufunc_T **)s2;
  return profile_cmp(p1->uf_tm_total, p2->uf_tm_total);
}




static int prof_self_cmp(const void *s1, const void *s2)
{
  ufunc_T *p1 = *(ufunc_T **)s1;
  ufunc_T *p2 = *(ufunc_T **)s2;
  return profile_cmp(p1->uf_tm_self, p2->uf_tm_self);
}
# 9584 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
char *autoload_name(const char *const name, const size_t name_len)
  FUNC_ATTR_MALLOC FUNC_ATTR_WARN_UNUSED_RESULT
{

  char *const scriptname = xmalloc(name_len + sizeof("autoload/.vim"));
  memcpy(scriptname, "autoload/", sizeof("autoload/") - 1);
  memcpy(scriptname + sizeof("autoload/") - 1, name, name_len);
  size_t auchar_idx = 0;
  for (size_t i = sizeof("autoload/") - 1;
       i - sizeof("autoload/") + 1 < name_len;
       i++) {
    if (scriptname[i] == '#') {
      scriptname[i] = '/';
      auchar_idx = i;
    }
  }
  memcpy(scriptname + auchar_idx, ".vim", sizeof(".vim"));

  return scriptname;
}
# 9612 "/home/toto/.env/encours/neovim/src/nvim/eval.c"

# 9612 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 9612 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    script_autoload(const char *const name, const size_t name_len,
                     const 
# 9613 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                          _Bool 
# 9613 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               reload)
{

  const char *p = memchr(name, '#', name_len);
  if (p == 
# 9617 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0) 
# 9617 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               || p == name) {
    return 
# 9618 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 9618 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }

  
# 9621 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 9621 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      ret = 
# 9621 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 9621 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
  char *tofree = autoload_name(name, name_len);
  char *scriptname = tofree;



  int i = 0;
  for (; i < ga_loaded.ga_len; i++) {
    if (strcmp((char *)(((char **)ga_loaded.ga_data)[i] + 9), (char *)(scriptname + 9)) == 0) {
      break;
    }
  }
  if (!reload && i < ga_loaded.ga_len) {
    ret = 
# 9634 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         0
# 9634 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  } else {

    if (i == ga_loaded.ga_len) {
      do { ga_grow(&ga_loaded, 1); ((char * *)(&ga_loaded)->ga_data)[(&ga_loaded)->ga_len++] = (scriptname); } while (0);
      tofree = 
# 9639 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 9639 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
    }


    if (source_runtime((char_u *)scriptname, 0) == 1) {
      ret = 
# 9644 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
           1
# 9644 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
    }
  }

  xfree(tofree);
  return ret;
}







void func_line_start(void *cookie)
{
  funccall_T *fcp = (funccall_T *)cookie;
  ufunc_T *fp = fcp->func;

  if (fp->uf_profiling && sourcing_lnum >= 1
      && sourcing_lnum <= fp->uf_lines.ga_len) {
    fp->uf_tml_idx = sourcing_lnum - 1;

    while (fp->uf_tml_idx > 0 && ((char_u **)(fp->uf_lines.ga_data))[fp->uf_tml_idx] == 
# 9667 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                ((void *)0)
# 9667 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                    ) {
      fp->uf_tml_idx--;
    }
    fp->uf_tml_execed = 
# 9670 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                       0
# 9670 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                            ;
    fp->uf_tml_start = profile_start();
    fp->uf_tml_children = profile_zero();
    fp->uf_tml_wait = profile_get_wait();
  }
}




void func_line_exec(void *cookie)
{
  funccall_T *fcp = (funccall_T *)cookie;
  ufunc_T *fp = fcp->func;

  if (fp->uf_profiling && fp->uf_tml_idx >= 0)
    fp->uf_tml_execed = 1;
}




void func_line_end(void *cookie)
{
  funccall_T *fcp = (funccall_T *)cookie;
  ufunc_T *fp = fcp->func;

  if (fp->uf_profiling && fp->uf_tml_idx >= 0) {
    if (fp->uf_tml_execed) {
      ++fp->uf_tml_count[fp->uf_tml_idx];
      fp->uf_tml_start = profile_end(fp->uf_tml_start);
      fp->uf_tml_start = profile_sub_wait(fp->uf_tml_wait, fp->uf_tml_start);
      fp->uf_tml_total[fp->uf_tml_idx] =
        profile_add(fp->uf_tml_total[fp->uf_tml_idx], fp->uf_tml_start);
      fp->uf_tml_self[fp->uf_tml_idx] =
        profile_self(fp->uf_tml_self[fp->uf_tml_idx], fp->uf_tml_start,
          fp->uf_tml_children);
    }
    fp->uf_tml_idx = -1;
  }
}

static var_flavour_T var_flavour(char_u *varname)
{
  char_u *p = varname;

  if (((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z')) {
    while (*(++p))
      if (((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z')) {
        return VAR_FLAVOUR_SESSION;
      }
    return VAR_FLAVOUR_SHADA;
  } else {
    return VAR_FLAVOUR_DEFAULT;
  }
}
# 9738 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
const void *var_shada_iter(const void *const iter, const char **const name,
                           typval_T *rettv, var_flavour_T flavour)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ARG(2, 3)
{
  const hashitem_T *hi;
  const hashitem_T *hifirst = globvardict.dv_hashtab.ht_array;
  const size_t hinum = (size_t) globvardict.dv_hashtab.ht_mask + 1;
  *name = 
# 9745 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         ((void *)0)
# 9745 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
  if (iter == 
# 9746 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ((void *)0)
# 9746 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ) {
    hi = globvardict.dv_hashtab.ht_array;
    while ((size_t) (hi - hifirst) < hinum
           && (((hi)->hi_key == 
# 9749 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0) 
# 9749 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              || (hi)->hi_key == (char_u *)&hash_removed)
               || !(var_flavour(hi->hi_key) & flavour))) {
      hi++;
    }
    if ((size_t) (hi - hifirst) == hinum) {
      return 
# 9754 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 9754 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ;
    }
  } else {
    hi = (const hashitem_T *) iter;
  }
  *name = (char *)((dictitem_T *)((hi)->hi_key - 
# 9759 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 __builtin_offsetof (
# 9759 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 dictitem_T
# 9759 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 , 
# 9759 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 di_key
# 9759 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 )
# 9759 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ))->di_key;
  tv_copy(&((dictitem_T *)((hi)->hi_key - 
# 9760 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          __builtin_offsetof (
# 9760 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          dictitem_T
# 9760 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          , 
# 9760 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          di_key
# 9760 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          )
# 9760 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          ))->di_tv, rettv);
  while ((size_t)(++hi - hifirst) < hinum) {
    if (!((hi)->hi_key == 
# 9762 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0) 
# 9762 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        || (hi)->hi_key == (char_u *)&hash_removed) && (var_flavour(hi->hi_key) & flavour)) {
      return hi;
    }
  }
  return 
# 9766 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        ((void *)0)
# 9766 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
            ;
}

void var_set_global(const char *const name, typval_T vartv)
{
  funccal_entry_T funccall_entry;

  save_funccal(&funccall_entry);
  set_var(name, strlen(name), &vartv, 
# 9774 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     0
# 9774 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                          );
  restore_funccal();
}

int store_session_globals(FILE *fd)
{
  do { hashtab_T *const this_varhi_ht_ = (&(&globvardict)->dv_hashtab); size_t this_varhi_todo_ = this_varhi_ht_->ht_used; for (hashitem_T *this_varhi_ = this_varhi_ht_->ht_array; this_varhi_todo_; this_varhi_++) { if (!((this_varhi_)->hi_key == 
# 9780 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void *)0) 
# 9780 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 || (this_varhi_)->hi_key == (char_u *)&hash_removed)) { this_varhi_todo_--; { { { dictitem_T *const this_var = ((dictitem_T *)((this_varhi_)->hi_key - 
# 9780 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 __builtin_offsetof (
# 9780 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 dictitem_T
# 9780 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 , 
# 9780 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 di_key
# 9780 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 )
# 9780 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 )); { { if ((this_var->di_tv.v_type == VAR_NUMBER || this_var->di_tv.v_type == VAR_STRING) && var_flavour(this_var->di_key) == VAR_FLAVOUR_SESSION) { char_u *const p = vim_strsave_escaped( (const char_u *)tv_get_string(&this_var->di_tv), (const char_u *)"\\\"\n\r"); for (char_u *t = p; *t != '\000'; t++) { if (*t == '\n') { *t = 'n'; } else if (*t == '\r') { *t = 'r'; } } if ((fprintf(fd, "let %s = %c%s%c", this_var->di_key, ((this_var->di_tv.v_type == VAR_STRING) ? '"' : ' '), p, ((this_var->di_tv.v_type == VAR_STRING) ? '"' : ' ')) < 0) || put_eol(fd) == 0) { xfree(p); return 0; } xfree(p); } else if (this_var->di_tv.v_type == VAR_FLOAT && var_flavour(this_var->di_key) == VAR_FLAVOUR_SESSION) { float_T f = this_var->di_tv.vval.v_float; int sign = ' '; if (f < 0) { f = -f; sign = '-'; } if ((fprintf(fd, "let %s = %c%f", this_var->di_key, sign, f) < 0) || put_eol(fd) == 0) { return 0; } } } } } } } } } } while (0)
# 9822 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    ;
  return 1;
}





void last_set_msg(sctx_T script_ctx)
{
  const LastSet last_set = (LastSet){
    .script_ctx = script_ctx,
    .channel_id = 0,
  };
  option_last_set_msg(last_set);
}




void option_last_set_msg(LastSet last_set)
{
  if (last_set.script_ctx.sc_sid != 0) {
    
# 9845 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 9845 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        should_free;
    char_u *p = get_scriptname(last_set, &should_free);
    verbose_enter();
    msg_puts((const char *)(gettext((char *)("\n\tLast set from "))));
    msg_puts((const char *)(p));
    if (last_set.script_ctx.sc_lnum > 0) {
      msg_puts((const char *)(gettext((char *)(line_msg))));
      msg_outnum((long)last_set.script_ctx.sc_lnum);
    }
    if (should_free) {
      xfree(p);
    }
    verbose_leave();
  }
}


void reset_v_option_vars(void)
{
  set_vim_var_string(VV_OPTION_NEW, 
# 9864 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                    ((void *)0)
# 9864 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        , -1);
  set_vim_var_string(VV_OPTION_OLD, 
# 9865 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                    ((void *)0)
# 9865 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        , -1);
  set_vim_var_string(VV_OPTION_TYPE, 
# 9866 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                    ((void *)0)
# 9866 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                        , -1);
}
# 9876 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
int
modify_fname(
    char_u *src,
    
# 9879 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
   _Bool 
# 9879 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
        tilde_file,
    size_t *usedlen,
    char_u **fnamep,
    char_u **bufp,
    size_t *fnamelen
)
{
  int valid = 0;
  char_u *tail;
  char_u *s, *p, *pbuf;
  char_u dirname[
# 9889 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                4096
# 9889 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        ];
  int c;
  int has_fullname = 0;

repeat:

  if (src[*usedlen] == ':' && src[*usedlen + 1] == 'p') {
    has_fullname = 1;

    valid |= 1;
    *usedlen += 2;


    if ((*fnamep)[0] == '~'







        && !(tilde_file && (*fnamep)[1] == '\000')
        ) {
      *fnamep = expand_env_save(*fnamep);
      xfree(*bufp);
      *bufp = *fnamep;
      if (*fnamep == 
# 9915 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 9915 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        )
        return -1;
    }


    for (p = *fnamep; *p != '\000'; (p += utfc_ptr2len((char_u *)p))) {
      if (vim_ispathsep(*p)
          && p[1] == '.'
          && (p[2] == '\000'
              || vim_ispathsep(p[2])
              || (p[2] == '.'
                  && (p[3] == '\000' || vim_ispathsep(p[3]))))) {
        break;
      }
    }


    if (*p != '\000' || !vim_isAbsName(*fnamep)) {
      *fnamep = (char_u *)FullName_save((char *)(*fnamep), *p != '\000');
      xfree(*bufp);
      *bufp = *fnamep;
      if (*fnamep == 
# 9936 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 9936 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        )
        return -1;
    }


    if (os_isdir(*fnamep)) {

      *fnamep = vim_strnsave(*fnamep, strlen((char *)(*fnamep)) + 2);
      xfree(*bufp);
      *bufp = *fnamep;
      if (*fnamep == 
# 9946 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 9946 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        )
        return -1;
      add_pathsep((char *)*fnamep);
    }
  }




  while (src[*usedlen] == ':'
         && ((c = src[*usedlen + 1]) == '.' || c == '~' || c == '8')) {
    *usedlen += 2;
    if (c == '8') {
      continue;
    }
    pbuf = 
# 9961 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 9961 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;

    if (!has_fullname) {
      if (c == '.' && **fnamep == '~')
        p = pbuf = expand_env_save(*fnamep);
      else
        p = pbuf = (char_u *)FullName_save((char *)*fnamep, 0);
    } else
      p = *fnamep;

    has_fullname = 0;

    if (p != 
# 9973 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            ((void *)0)
# 9973 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                ) {
      if (c == '.') {
        os_dirname(dirname, 
# 9975 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           4096
# 9975 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   );
        s = path_shorten_fname(p, dirname);
        if (s != 
# 9977 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 9977 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
          *fnamep = s;
          if (pbuf != 
# 9979 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 9979 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         ) {
            xfree(*bufp);
            *bufp = pbuf;
            pbuf = 
# 9982 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                  ((void *)0)
# 9982 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                      ;
          }
        }
      } else {
        home_replace(
# 9986 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                    ((void *)0)
# 9986 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        , p, dirname, 
# 9986 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                      4096
# 9986 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              , 
# 9986 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                1
# 9986 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    );

        if (*dirname == '~') {
          s = vim_strsave(dirname);
          *fnamep = s;
          xfree(*bufp);
          *bufp = s;
        }
      }
      xfree(pbuf);
    }
  }

  tail = path_tail(*fnamep);
  *fnamelen = strlen((char *)(*fnamep));



  while (src[*usedlen] == ':' && src[*usedlen + 1] == 'h') {
    valid |= 2;
    *usedlen += 2;
    s = get_past_head(*fnamep);
    while (tail > s && after_pathsep((char *)s, (char *)tail)) {
      (tail -= utf_head_off((char_u *)*fnamep, (char_u *)tail - 1) + 1);
    }
    *fnamelen = (size_t)(tail - *fnamep);
    if (*fnamelen == 0) {

      xfree(*bufp);
      *bufp = *fnamep = tail = vim_strsave((char_u *)".");
      *fnamelen = 1;
    } else {
      while (tail > s && !after_pathsep((char *)s, (char *)tail)) {
        (tail -= utf_head_off((char_u *)*fnamep, (char_u *)tail - 1) + 1);
      }
    }
  }


  if (src[*usedlen] == ':' && src[*usedlen + 1] == '8') {
    *usedlen += 2;
  }



  if (src[*usedlen] == ':' && src[*usedlen + 1] == 't') {
    *usedlen += 2;
    *fnamelen -= (size_t)(tail - *fnamep);
    *fnamep = tail;
  }



  while (src[*usedlen] == ':'
         && (src[*usedlen + 1] == 'e' || src[*usedlen + 1] == 'r')) {




    const 
# 10045 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
         _Bool 
# 10045 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              is_second_e = *fnamep > tail;
    if (src[*usedlen + 1] == 'e' && is_second_e) {
      s = *fnamep - 2;
    } else {
      s = *fnamep + *fnamelen - 1;
    }

    for (; s > tail; s--) {
      if (s[0] == '.') {
        break;
      }
    }
    if (src[*usedlen + 1] == 'e') {
      if (s > tail || (0 && is_second_e && s == tail)) {

        char_u *newstart = s + 1;
        size_t distance_stepped_back = *fnamep - newstart;
        *fnamelen += distance_stepped_back;
        *fnamep = newstart;
      } else if (*fnamep <= tail) {
        *fnamelen = 0;
      }
    } else {
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      if (s > 
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             (((
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             tail
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             )>(
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             *fnamep
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ))?(
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             tail
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ):(
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             *fnamep
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             ))
# 10083 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ) {
        *fnamelen = (size_t)(s - *fnamep);
      }
    }
    *usedlen += 2;
  }



  if (src[*usedlen] == ':'
      && (src[*usedlen + 1] == 's'
          || (src[*usedlen + 1] == 'g' && src[*usedlen + 2] == 's'))) {
    char_u *str;
    char_u *pat;
    char_u *sub;
    int sep;
    char_u *flags;
    int didit = 0;

    flags = (char_u *)"";
    s = src + *usedlen + 2;
    if (src[*usedlen + 1] == 'g') {
      flags = (char_u *)"g";
      ++s;
    }

    sep = *s++;
    if (sep) {

      p = vim_strchr(s, sep);
      if (p != 
# 10113 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
              ((void *)0)
# 10113 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ) {
        pat = vim_strnsave(s, (int)(p - s));
        s = p + 1;

        p = vim_strchr(s, sep);
        if (p != 
# 10118 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                ((void *)0)
# 10118 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                    ) {
          sub = vim_strnsave(s, (int)(p - s));
          str = vim_strnsave(*fnamep, *fnamelen);
          *usedlen = (size_t)(p + 1 - src);
          s = do_string_sub(str, pat, sub, 
# 10122 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                          ((void *)0)
# 10122 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              , flags);
          *fnamep = s;
          *fnamelen = strlen((char *)(s));
          xfree(*bufp);
          *bufp = s;
          didit = 1;
          xfree(sub);
          xfree(str);
        }
        xfree(pat);
      }

      if (didit) {
        goto repeat;
      }
    }
  }

  if (src[*usedlen] == ':' && src[*usedlen + 1] == 'S') {

    c = (*fnamep)[*fnamelen];
    if (c != '\000') {
      (*fnamep)[*fnamelen] = '\000';
    }
    p = vim_strsave_shellescape(*fnamep, 
# 10146 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                        0
# 10146 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                             , 
# 10146 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                               0
# 10146 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                    );
    if (c != '\000') {
      (*fnamep)[*fnamelen] = c;
    }
    xfree(*bufp);
    *bufp = *fnamep = p;
    *fnamelen = strlen((char *)(p));
    *usedlen += 2;
  }

  return valid;
}





char_u *do_string_sub(char_u *str, char_u *pat, char_u *sub,
                      typval_T *expr, char_u *flags)
{
  int sublen;
  regmatch_T regmatch;
  int do_all;
  char_u *tail;
  char_u *end;
  garray_T ga;
  char_u *save_cpo;
  char_u *zero_width = 
# 10173 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                           ((void *)0)
# 10173 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                               ;


  save_cpo = p_cpo;
  p_cpo = empty_option;

  ga_init(&ga, 1, 200);

  do_all = (flags[0] == 'g');

  regmatch.rm_ic = p_ic;
  regmatch.regprog = vim_regcomp(pat, 1 + 2);
  if (regmatch.regprog != 
# 10185 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 10185 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ) {
    tail = str;
    end = str + strlen((char *)(str));
    while (vim_regexec_nl(&regmatch, str, (colnr_T)(tail - str))) {

      if (regmatch.startp[0] == regmatch.endp[0]) {
        if (zero_width == regmatch.startp[0]) {

          int i = utfc_ptr2len(tail);
          memmove((char_u *)ga.ga_data + ga.ga_len, tail, (size_t)i);
          ga.ga_len += i;
          tail += i;
          continue;
        }
        zero_width = regmatch.startp[0];
      }






      sublen = vim_regsub(&regmatch, sub, expr, tail, 
# 10207 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                     0
# 10207 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                          , 
# 10207 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                            1
# 10207 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                , 
# 10207 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                  0
# 10207 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                       );
      ga_grow(&ga, (int)((end - tail) + sublen -
                     (regmatch.endp[0] - regmatch.startp[0])));


      int i = (int)(regmatch.startp[0] - tail);
      memmove((char_u *)ga.ga_data + ga.ga_len, tail, (size_t)i);

      (void)vim_regsub(&regmatch, sub, expr, (char_u *)ga.ga_data
                       + ga.ga_len + i, 
# 10216 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       1
# 10216 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                           , 
# 10216 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                             1
# 10216 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                 , 
# 10216 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                   0
# 10216 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                        );
      ga.ga_len += i + sublen - 1;
      tail = regmatch.endp[0];
      if (*tail == '\000')
        break;
      if (!do_all)
        break;
    }

    if (ga.ga_data != 
# 10225 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                     ((void *)0)
# 10225 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                         )
      strcpy((char *)((char *)ga.ga_data + ga.ga_len), (char *)(tail));

    vim_regfree(regmatch.regprog);
  }

  char_u *ret = vim_strsave(ga.ga_data == 
# 10231 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                         ((void *)0) 
# 10231 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                              ? str : (char_u *)ga.ga_data);
  ga_clear(&ga);
  if (p_cpo == empty_option) {
    p_cpo = save_cpo;
  } else {

    free_string_option(save_cpo);
  }

  return ret;
}





# 10246 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 10246 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    common_job_callbacks(dict_T *vopts,
                          CallbackReader *on_stdout,
                          CallbackReader *on_stderr,
                          Callback *on_exit)
{
  if (tv_dict_get_callback(vopts, ("on_stdout"), (sizeof("on_stdout") - 1), &on_stdout->cb)
      &&tv_dict_get_callback(vopts, ("on_stderr"), (sizeof("on_stderr") - 1), &on_stderr->cb)
      && tv_dict_get_callback(vopts, ("on_exit"), (sizeof("on_exit") - 1), on_exit)) {
    on_stdout->buffered = tv_dict_get_number(vopts, "stdout_buffered");
    on_stderr->buffered = tv_dict_get_number(vopts, "stderr_buffered");
    if (on_stdout->buffered && on_stdout->cb.type == kCallbackNone) {
      on_stdout->self = vopts;
    }
    if (on_stderr->buffered && on_stderr->cb.type == kCallbackNone) {
      on_stderr->self = vopts;
    }
    vopts->dv_refcount++;
    return 
# 10263 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          1
# 10263 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }

  callback_reader_free(on_stdout);
  callback_reader_free(on_stderr);
  callback_free(on_exit);
  return 
# 10269 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
        0
# 10269 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
             ;
}


Channel *find_job(uint64_t id, 
# 10273 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                              _Bool 
# 10273 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   show_error)
{
  Channel *data = find_channel(id);
  if (!data || data->streamtype != kChannelStreamProc
      || process_is_stopped(&data->stream.proc)) {
    if (show_error) {
      if (data && data->streamtype != kChannelStreamProc) {
        emsg((char_u *)(gettext((char *)(e_invchanjob))));
      } else {
        emsg((char_u *)(gettext((char *)(e_invchan))));
      }
    }
    return 
# 10285 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          ((void *)0)
# 10285 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
  }
  return data;
}


void script_host_eval(char *name, typval_T *argvars, typval_T *rettv)
{
  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_STRING) {
    emsg((char_u *)(gettext((char *)(e_invarg))));
    return;
  }

  list_T *args = tv_list_alloc(1);
  tv_list_append_string(args, (const char *)argvars[0].vval.v_string, -1);
  *rettv = eval_call_provider(name, "eval", args);
}

typval_T eval_call_provider(char *provider, char *method, list_T *arguments)
{
  if (!eval_has_provider(provider)) {
    emsgf("E319: No \"%s\" provider found. Run \":checkhealth provider\"",
          provider);
    return (typval_T){
      .v_type = VAR_NUMBER,
      .v_lock = VAR_UNLOCKED,
      .vval.v_number = (varnumber_T)0
    };
  }

  char func[256];
  int name_len = snprintf(func, sizeof(func), "provider#%s#Call", provider);


  struct caller_scope saved_provider_caller_scope = provider_caller_scope;
  provider_caller_scope = (struct caller_scope) {
    .script_ctx = current_sctx,
    .sourcing_name = sourcing_name,
    .sourcing_lnum = sourcing_lnum,
    .autocmd_fname = autocmd_fname,
    .autocmd_match = autocmd_match,
    .autocmd_bufnr = autocmd_bufnr,
    .funccalp = (void *)get_current_funccal()
  };
  funccal_entry_T funccal_entry;
  save_funccal(&funccal_entry);
  provider_call_nesting++;

  typval_T argvars[3] = {
    {.v_type = VAR_STRING, .vval.v_string = (uint8_t *)method, .v_lock = 0},
    {.v_type = VAR_LIST, .vval.v_list = arguments, .v_lock = 0},
    {.v_type = VAR_UNKNOWN}
  };
  typval_T rettv = { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED };
  tv_list_ref(arguments);

  int dummy;
  (void)call_func((const char_u *)func,
                  name_len,
                  &rettv,
                  2,
                  argvars,
                  
# 10351 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 10351 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ,
                  curwin->w_cursor.lnum,
                  curwin->w_cursor.lnum,
                  &dummy,
                  
# 10355 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 1
# 10355 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ,
                  
# 10356 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 10356 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     ,
                  
# 10357 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                 ((void *)0)
# 10357 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                     );

  tv_list_unref(arguments);

  restore_funccal();
  provider_caller_scope = saved_provider_caller_scope;
  provider_call_nesting--;
  
# 10364 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ((void) sizeof ((
# 10364 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 provider_call_nesting >= 0
# 10364 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 10364 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 provider_call_nesting >= 0
# 10364 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 ) ; else __assert_fail (
# 10364 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
 "provider_call_nesting >= 0"
# 10364 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 , "/home/toto/.env/encours/neovim/src/nvim/eval.c", 10364, __extension__ __PRETTY_FUNCTION__); }))
# 10364 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   ;

  return rettv;
}



# 10370 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 10370 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    eval_has_provider(const char *feat)
{
  if (!strequal(feat, "clipboard")
      && !strequal(feat, "python")
      && !strequal(feat, "python3")
      && !strequal(feat, "python_compiled")
      && !strequal(feat, "python_dynamic")
      && !strequal(feat, "python3_compiled")
      && !strequal(feat, "python3_dynamic")
      && !strequal(feat, "perl")
      && !strequal(feat, "ruby")
      && !strequal(feat, "node")) {

    return 
# 10383 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 10383 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
  }

  char name[32];
  snprintf(name, sizeof(name), "%s", feat);
  strchrsub(name, '_', '\0');

  char buf[256];
  typval_T tv;

  int len = snprintf(buf, sizeof(buf), "g:loaded_%s_provider", name);
  if (get_var_tv(buf, len, &tv, 
# 10394 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                               ((void *)0)
# 10394 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                   , 
# 10394 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     0
# 10394 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                          , 
# 10394 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                            1
# 10394 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                ) == 0) {

    len = snprintf(buf, sizeof(buf), "provider#%s#bogus", name);
    script_autoload(buf, len, 
# 10397 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                             0
# 10397 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                  );


    len = snprintf(buf, sizeof(buf), "g:loaded_%s_provider", name);
    if (get_var_tv(buf, len, &tv, 
# 10401 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                 ((void *)0)
# 10401 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                     , 
# 10401 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                       0
# 10401 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                            , 
# 10401 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                              1
# 10401 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                  ) == 0) {

      snprintf(buf, sizeof(buf), "provider#%s#Call", name);
      if (!!find_func((char_u *)buf) && p_lpl) {
        emsgf("provider: %s: missing required variable g:loaded_%s_provider",
              name, name);
      }
      return 
# 10408 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 10408 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
    }
  }

  
# 10412 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 10412 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      ok = (tv.v_type == VAR_NUMBER)
    ? 2 == tv.vval.v_number
    : 
# 10414 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     0
# 10414 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          ;

  if (ok) {

    snprintf(buf, sizeof(buf), "provider#%s#Call", name);
    if (!find_func((char_u *)buf)) {
      emsgf("provider: %s: g:loaded_%s_provider=2 but %s is not defined",
            name, name, buf);
      ok = 
# 10422 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          0
# 10422 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
               ;
    }
  }

  return ok;
}


void eval_fmt_source_name_line(char *buf, size_t bufsize)
{
  if (sourcing_name) {
    snprintf(buf, bufsize, "%s:%" "ld", sourcing_name, sourcing_lnum);
  } else {
    snprintf(buf, bufsize, "?");
  }
}


void ex_checkhealth(exarg_T *eap)
{
  
# 10442 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
 _Bool 
# 10442 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
      found = !!find_func((char_u *)"health#check");
  if (!found
      && script_autoload("health#check", sizeof("health#check") - 1, 
# 10444 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                                                    0
# 10444 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                                                         )) {
    found = !!find_func((char_u *)"health#check");
  }
  if (!found) {
    const char *vimruntime_env = os_getenv("VIMRUNTIME");
    if (vimruntime_env == 
# 10449 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                         ((void *)0)
# 10449 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                             ) {
      emsg((char_u *)(gettext((char *)("E5009: $VIMRUNTIME is empty or unset"))));
    } else {
      
# 10452 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
     _Bool 
# 10452 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
          rtp_ok = 
# 10452 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                   ((void *)0) 
# 10452 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                        != strstr((char *)p_rtp, vimruntime_env);
      if (rtp_ok) {
        emsgf((const char *) (gettext((char *)("E5009: Invalid $VIMRUNTIME: %s"))), (vimruntime_env));
      } else {
        emsg((char_u *)(gettext((char *)("E5009: Invalid 'runtimepath'"))));
      }
    }
    return;
  }

  size_t bufsize = strlen((char *)(eap->arg)) + sizeof("call health#check('')");
  char *buf = xmalloc(bufsize);
  snprintf(buf, bufsize, "call health#check('%s')", eap->arg);

  do_cmdline_cmd(buf);

  xfree(buf);
}

void invoke_prompt_callback(void)
{
    typval_T rettv;
    typval_T argv[2];
    char_u *text;
    char_u *prompt;
    linenr_T lnum = curbuf->b_ml.ml_line_count;



    ml_append(lnum, (char_u *)"", 0, 
# 10481 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
                                     0
# 10481 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                                          );
    curwin->w_cursor.lnum = lnum + 1;
    curwin->w_cursor.col = 0;

    if (curbuf->b_prompt_callback.type == kCallbackNone) {
      return;
    }
    text = ml_get(lnum);
    prompt = prompt_text();
    if (strlen((char *)(text)) >= strlen((char *)(prompt))) {
      text += strlen((char *)(prompt));
    }
    argv[0].v_type = VAR_STRING;
    argv[0].vval.v_string = vim_strsave(text);
    argv[1].v_type = VAR_UNKNOWN;

    callback_call(&curbuf->b_prompt_callback, 1, argv, &rettv);
    tv_clear(&argv[0]);
    tv_clear(&rettv);
}



# 10503 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
_Bool 
# 10503 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
    invoke_prompt_interrupt(void)
{
    typval_T rettv;
    typval_T argv[1];

    if (curbuf->b_prompt_interrupt.type == kCallbackNone) {
      return 
# 10509 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
            0
# 10509 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                 ;
    }
    argv[0].v_type = VAR_UNKNOWN;

    got_int = 
# 10513 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
             0
# 10513 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
                  ;
    callback_call(&curbuf->b_prompt_interrupt, 0, argv, &rettv);
    tv_clear(&rettv);
    return 
# 10516 "/home/toto/.env/encours/neovim/src/nvim/eval.c" 3 4
          1
# 10516 "/home/toto/.env/encours/neovim/src/nvim/eval.c"
              ;
}
